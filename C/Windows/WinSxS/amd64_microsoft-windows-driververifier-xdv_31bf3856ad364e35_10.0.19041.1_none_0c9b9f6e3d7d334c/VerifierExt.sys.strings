    (B)reak to investigate, 
    (C)ontinue to bugcheck, 
    (E)xtend the timelimit and continue? 
    Context Object (IRP or Miniport): 0x%p 
    Error String: '%s' 
    Tracked Object (OID, Port number, IRP, etc.): 0x%p 
 %02X 
 A^A\_
 A_A^_
 A_A^_^]
 A_A^A\
 A_A^A]
 A_A^A]A\_
 begin tid: 
 has high starvation: 
 hash: 
 http://www.microsoft.com/windows0
 Microsoft Corporation. All rights reserved.
 Modification targeted subkey: 
 musecs, reason: 
 not yielding
 Operating System
 phs: 
 pri change: 
 reason: 
 sop:
 step var:
 tin:
 tout:
-------------------- Truncated --------------------
 Windows
 yield 
!This program cannot be run in DOS mode.
"Microsoft Window
$`2X`F
$j,{,Q
$Microsoft Ireland Operations Limited1
$Microsoft Ireland Operations Limited1&0$
%lS %lu %lu
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
%S ScanCount: %d
%S ViolationCount: %d
%s: %s: %S: %s
%s: %s: %S: %s'%ws'
%s: %s: %S: %s'%wZ'
%s: %s: %S: %s'%wZ':%s'%wZ'
)Microsoft Root Certificate Authority 20100
*** Choose to either :
*** Driver Verifier rule 0x%X is violated on the time limit of %d milliseconds ***
,EuGoOlh11a502dUmXXl4hDFGKghkqbo7fBy4lG9TKtg=0Z
.00cfg
.data
.data$brc
.edata
.fffffff
.gfids
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.text
.text$mn
.text$mn$00
.text$mn$21
.xdata
:PTP|P
@A^_^
@A^A\_
@A_A^]
@A_A^_
@A_A^A\
@INIT
@SUVWATAUAVAWH
@SUVWAVH
@SVWATAUAVAWH
@SVWH
@USVWATAVAWH
[#]h]
[*]n]
[1] BaseAddress 
[2] BaseAddress 
[3]p]
[9[O[
[A\`\r\
[O^j^v^
\$ UVWATAUAVAWH
\$ UVWH
\$(E3
\$H@8{@
\(]P]Y_
\*\6\^\
\_^`_
\D\i\
\Device\VerifierExt
\DosDevices\VerifierExt
\O_j_v_
\REGISTRY\MACHINE\BSPDRIVERS\
\Registry\Machine\OSBOOT\ControlSetOverride\Session Manager\Memory Management\Extensions\
\REGISTRY\MACHINE\SOFTWARE\
\REGISTRY\MACHINE\SYSTEM\
\Registry\Machine\System\CurrentControlSet\Control\Class
\Registry\Machine\System\CurrentControlSet\Control\Session Manager\Memory Management
\Registry\Machine\System\CurrentControlSet\Services\VerifierExt\Extensions\
]$_k_
]%^;^
]*]6]^]
]/_l_
_,_U_n_
__C_specific_handler
_snwprintf
_vsnprintf
_vsnwprintf
_wcsicmp
_wcsnicmp
` UAVAWH
`.edata
`A^_^][
`A_A^_^]
`A_A^A]A\_^[
{ ATAVAWH
{ AVH
{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}
{HD8'
|$ UATAUAVAWH
|$ UAVAWH
|$ UH
|$(E3
|$0A^A\
|hK,_
}bgk#!F
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
0: The miniport driver hasn't processed any NBL in the past 22 seconds.
0: Timeout on sending a NET_BUFFER_LIST by MiniportSendNetBufferLists.
040904B0
0A^_]
0A^_^
0A_A^]
0A_A^_
0A_A^A\_^
0A_A^A]_^
0A_A^A]A\]
0A_A^A]A\_^]
0x20002
0x20003
0x20004
0x20005
0x20006
0x20007
0x20008
0x20009
0x2000A
0x2000B
0x2000C
0x2000D
0x2000E
0x2000F
0x20010
0x20011
0x20015
0x20016
0x20019
0x2001A
0x2001B
0x2001C
0x2001E
0x2001F
0x20022
0x20023
0x20024
0x20025
0x40003
0x40007
0x4000A
0x4100B
0x43006
0x71001
0x71003
0x71004
0x71005
0x71006
0x71007
0x71008
0x71009
0x7100A
0x72001
0x81001
0x81002
0x81003
0x81004
0x81005
0x81006
0x81007
0x81008
0x81009
0x8100A
0x8100B
0x8100C
0x82001
0x82002
0x82003
0x82004
0x82005
0x91001
0x91002
0x9100E
0x92003
0x9200D
0x9200F
0x92010
0x92011
0x92012
0x93004
0x93005
0x93006
0x93101
0x94007
0x94008
0x94009
0x9400B
0x9400C
1(0&0
1/0-0
1: The miniport driver hasn't processed any NBL in the past 22 seconds.
1: Timeout on sending a NET_BUFFER_LIST by MiniportSendNetBufferLists.
10.0.19041.1
10.0.19041.1 (WinBuild.160101.0800)
100701213655Z
111019184142Z
190502212436Z
191023231921Z
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
2: The miniport driver hasn't processed any NBL in the past 22+ seconds.
2: Timeout on sending a NET_BUFFER_LIST by MiniportSendNetBufferLists.
200502212436Z0p1
20191207005658.494Z0
20191207034402Z
20191208034402Z0w0=
210121231921Z0
229879+4541120
250701214655Z0|1
261019185142Z0
7/PDwp
7:D$@u
8_^][
9: The miniport driver didn't process any NBL too long before this moment.
9: Timeout on sending a NET_BUFFER_LIST by MiniportSendNetBufferLists.
9:u|B
9|$`u
9C u-H
A different OID is being completed at NdisMOidRequestComplete rather than the one previously sent by MiniportOidRequest.
A different OID is being completed other than the pending OID.
A Driver Verifier rule violation has been detected by VerifierExt.
A registered driver cancel routine was called.
A^A\_
A^A]A\_]
A_A^]
A_A^A\_]
A_A^A\_^[]
A_A^A]_]
A_A^A]_^
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^]
A_A^A]A\_^][
A+A,;
A+Ap;
A+Q$A
AB8AC
AccessModeMismatch
AddDriver(): failed to allocate memory for driver entry!
AddIrp(): failed to allocate memory for irp entry!
Address_Stack
AiF8@B
At Entry - DriverName: %S, SigningLevel: %d, IsBootDriver: %d, CallerAddress: 0x%x
At Exit - DriverName: %S
Autofail
AutofailAddDriver
AutofailEntry
AutofailHandleIoControl
autoFailInitialize
AutoFailInject
AVXCorruption
B.reloc
B.rsrc
BaseAddress
bGFIDS
C\$0H
Caller Integrity Level: %s
Caller Integrity Level: AppContainer
Caller Integrity Level: Unknown
CcCopyWrite
CcCopyWrite should only be called at IRQL <= APC_LEVEL.
CcCopyWriteEx
CcCopyWriteEx should only be called at IRQL <= APC_LEVEL.
CcDeferWrite
CcDeferWrite should only be called at IRQL <= APC_LEVEL.
CcFastCopyWrite
CcFastCopyWrite should only be called at IRQL <= APC_LEVEL.
change point
CheckSum
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
Class
CmRegisterCallback
CmRegisterCallback should only be called at IRQL <= APC_LEVEL.
CmRegisterCallbackEx
CmRegisterCallbackEx should only be called at IRQL <= APC_LEVEL.
CmUnRegisterCallback
CmUnRegisterCallback should only be called at IRQL <= APC_LEVEL.
CompanyName
Context Object (IRP or Miniport): 0x%p
CRIM0
CurrentCallStack
cuzzlog
CuzzRandomSeed=
D$ E3
D$ KAEL
D$(E3
D$(fD
D$(XdvS3
D$0E3
D$0H+D$8H=
D$Hu@
D:P(A;;GA;;;SY)(A;;GA;;;BA)
D;l$xs1
D8=v"
D86u@
D86uI
D8L$Pt^
D8MHt
D8mHtEH
D9qpu
D9rpu)L
DbgkWerCaptureLiveKernelDump
DbgPrompt
DeviceCharacteristics
DeviceType
DifLoadPlugins
DifNA
DifNH
DifUpdatePluginState
DifXdvModeInfoDisclosureIRPDetection
DifXdvModeInterceptionTest
Double association start.
Double OID completion detected at MiniportOidRequest.
Double OID completion detected at NdisMOidRequestComplete.
Double OID request detected at MiniportOidRequest.
Driver CheckSum
Driver Event: entry function/DDI calls
Driver Name: %S
Driver Verifier
DRIVER VERIFIER DETECTED VIOLATION
DRIVER VERIFIER DMA VIOLATION
Driver Verifier Extension
Driver Verifier Extension: '%wZ' successfully initialized.
Driver Verifier Extension: '%wZ' successfully started I/O processing.
Driver Verifier Extension: failed to allocate context for thread 0x%p.
Driver Verifier Extension: failed to insert context to thread 0x%p with 0x%x.
Driver Verifier Extension>Driver Verifier component to help find bugs in device drivers.
Driver Verifier failed to clear the XDV thread context.
DRIVER VERIFIER IOMANAGER VIOLATION
Driver Verifier: A driver dispatch routine returns with IRQL > DISPATCH_LEVEL.
Driver Verifier: Bugcheck initiated with Error Code: 0x%X Error Message: '%s'
Driver Verifier: Bugcheck initiated with Error Code: 0x%X Error String: '%s'
Driver Verifier: Bugcheck suppressed with Error Code: 0x%X Error String: '%s'
Driver Verifier: Couldn't read a TiP tag for a TiP postmortem event.
Driver Verifier: Counter: %s: %d
Driver Verifier: failed to clear the XDV thread context.
Driver Verifier: Failed to query dispatch table!
Driver Verifier: Livedump scheduled with Error Code: 0x%X Error Message: '%s'
Driver Verifier: run out of space for blob storage.
Driver Verifier: XdvLogging failed to initialize with %08lx
Driver Verifier: XdvLoggingEntry: '%wZ'
Driver Verifier: XdvQueryRuleSuppression: wrong rule ID: %d
Driver Verifier: XdvSetRuleSuppression: wrong rule ID: %d
Driver Verifier: XdvTimed extension started.
DriverCancel
DriverName
DriverName: %S, SigningLevel: %d, IsBootDriver: %d
DriverName: %S, SigningLevel: %d, IsBootDriver: %d, CallerAddress: 0x%x
DriverName=%S, NumberOfLeaks=%d, IntegrityLevel=%s, IoctlCode=0x%08x
DriverSize
DriverUnload
DriverVerifier
dvafK
DvIdH
DvIdI
dvssA
dvssH
E(H9]
E8!E(
E99t;3
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
en-US
Error
Error: Context has been corrupted on address: %p
ERROR: Driver Verifier Extension: '%wZ' failed to initialize with 0x%x
ERROR: Driver Verifier Extension: '%wZ' failed to start I/O processing with 0x%x
Error: no Record.  Location of Context: %p
Error: Size does not match.  Value of Size: %d; value of blobSize: %d, location of context: %p, location of record: %p
ErrorCode
ErrorMessage
Etw wasn't initialized yet.
EtwRegister
EtwSetInformation
EtwWriteTransfer
EventData
ExAcquireFastMutex
ExAcquireFastMutex should only be called at IRQL <= APC_LEVEL.
ExAcquireResourceExclusiveLite
ExAcquireResourceExclusiveLite should only be called at IRQL <= APC_LEVEL.
ExAcquireResourceSharedLite
ExAcquireResourceSharedLite should only be called at IRQL <= APC_LEVEL.
ExAcquireSharedStarveExclusive
ExAcquireSharedStarveExclusive should only be called at IRQL <= APC_LEVEL.
ExAcquireSharedWaitForExclusive
ExAcquireSharedWaitForExclusive should only be called at IRQL <= APC_LEVEL.
ExAcquireSpinLockExclusive
ExAcquireSpinLockShared
ExAcquireSpinLockSharedAtDpcLevel
ExAllocatePool
ExAllocatePool can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType.
ExAllocatePool can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType.
ExAllocatePool can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool.
ExAllocatePool can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned.
ExAllocatePool should only be called at IRQL <= DISPATCH_LEVEL.
ExAllocatePool2
ExAllocatePool3
ExAllocatePoolWithQuota
ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType.
ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType.
ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool.
ExAllocatePoolWithQuota can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned.
ExAllocatePoolWithQuota should only be called at IRQL <= DISPATCH_LEVEL.
ExAllocatePoolWithQuotaTag
ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType.
ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType.
ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool.
ExAllocatePoolWithQuotaTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned.
ExAllocatePoolWithQuotaTag should only be called at IRQL <= DISPATCH_LEVEL.
ExAllocatePoolWithTag
ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType.
ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType.
ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool.
ExAllocatePoolWithTag can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned.
ExAllocatePoolWithTag should only be called at IRQL <= DISPATCH_LEVEL.
ExAllocatePoolWithTagPriority
ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not DontUseThisType.
ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not MaxPoolType.
ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPool.
ExAllocatePoolWithTagPriority can be called at DISPATCH_LEVEL only if a NonPagedXXX is specified for PoolType, not PagedPoolCacheAligned.
ExAllocatePoolWithTagPriority should only be called at IRQL <= DISPATCH_LEVEL.
ExAllocateTimer
Exception occurred while scanning IRP buffer for driver %S!
Exclusive
ExConvertExclusiveToSharedLite
ExConvertExclusiveToSharedLite should only be called at IRQL <= APC_LEVEL.
ExCreateCallback
ExCreateCallback should only be called at IRQL <= APC_LEVEL.
ExDeletePagedLookasideList
ExDeletePagedLookasideList should only be called at IRQL <= APC_LEVEL.
ExDeleteResourceLite
ExDeleteResourceLite should only be called at IRQL <= APC_LEVEL.
ExDeleteTimer
exemptedstacks
ExEnterCriticalRegionAndAcquireResourceExclusive
ExEnterCriticalRegionAndAcquireResourceShared
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive
ExEnterPriorityRegionAndAcquireResourceExclusive
ExEnterPriorityRegionAndAcquireResourceShared
ExFreePool
ExFreePoolWithTag
ExInitializeNPagedLookasideList
ExInitializePagedLookasideList should only be called at IRQL <= APC_LEVEL.
ExIsProcessorFeaturePresent
ExIsProcessorFeaturePresent should only be called at IRQL = PASSIVE_LEVEL.
ExpInterlockedPopEntrySList
ExpInterlockedPushEntrySList
ExQueryDepthSList
ExRaiseAccessViolation
ExRaiseAccessViolation should only be called at IRQL = PASSIVE_LEVEL.
ExRaiseDatatypeMisalignment
ExRaiseDatatypeMisalignment should only be called at IRQL = PASSIVE_LEVEL.
ExRaiseStatus
ExRaiseStatus should only be called at IRQL <= APC_LEVEL.
ExRegisterCallback
ExRegisterCallback should only be called at IRQL <= APC_LEVEL.
ExReleaseResourceAndLeaveCriticalRegion
ExReleaseResourceAndLeavePriorityRegion
ExReleaseSpinLockExclusive
ExReleaseSpinLockShared
ExReleaseSpinLockSharedFromDpcLevel
ExSetTimer
ExSetTimerResolution
ExSetTimerResolution should only be called at IRQL <= APC_LEVEL.
ExTryToAcquireFastMutex
ExTryToAcquireFastMutex should only be called at IRQL <= APC_LEVEL.
ExUnregisterCallback
ExUnregisterCallback should only be called at IRQL <= APC_LEVEL.
ExUuidCreate
ExUuidCreate should only be called at IRQL = PASSIVE_LEVEL.
f9,Qu
f94Bu
f94Hu
fA9<Qu
fA94Hu
Failed to allocate buffer for output string!
Failed to allocate MDL for user buffer!
Failed to allocate memory for token!
Failed to get app container status 0x%08x!
Failed to get caller token information!
Failed to get device name from driver object!
Failed to get integrity level from SID!
Failed to get process token 0x%08x!
Failed to get the integrity level token 0x%08x!
Failed to get the size of the integrity token 0x%08x!
Failed to report rule violation: %x
Failed to sanitize device name for driver %S!
Failed to track irp for device %S!
failuremode
fD9$Gu
fD9,Fu
fD9,Ju
fD9;t
fD9>t
fE9,Qu
fffffff
-fffffff
FileDescription
FileVersion
FltMgr.sys
G0D9p
GetRegistryInformation
GetXdvDDIWrappers
GetXdvDriverEntryWrappers
gfffffffA
H VWAVH
H!|$ A
H!|$ D
H!|$0H
H.data
H.idata
h.rdata
H+C(Hi
H+C@H
H3t$`A
H9]xt
H9Mxt
HA1o7w
HAL.dll
HPAGE
I(A+I,;
I0G1-0+
Information
Information disclosure detected:
InternalName
IoAllocateController
IoAllocateController should only be called at IRQL == DISPATCH_LEVEL.
IoAllocateIrpEx
IoAllocateMdl
IoAllocateWorkItem
IoAttachDevice
IoAttachDevice should only be called at IRQL = PASSIVE_LEVEL.
IoBuildDeviceIoControlRequest should only be called at IRQL <= APC_LEVEL.
IoCheckShareAccess
IoCheckShareAccess should only be called at IRQL = PASSIVE_LEVEL.
IoConnectInterrupt
IoConnectInterrupt should only be called at IRQL = PASSIVE_LEVEL.
IoCreateController
IoCreateController should only be called at IRQL = PASSIVE_LEVEL.
IoCreateDevice
IoCreateDevice should only be called at IRQL <= APC_LEVEL.
IoCreateDeviceSecure
IoCreateFile
IoCreateFile should only be called at IRQL = PASSIVE_LEVEL.
IoCreateFileEx
IoCreateFileEx should only be called at IRQL = PASSIVE_LEVEL.
IoCreateFileSpecifyDeviceObjectHint
IoCreateFileSpecifyDeviceObjectHint should only be called at IRQL = PASSIVE_LEVEL.
IoCreateNotificationEvent
IoCreateNotificationEvent should only be called at IRQL = PASSIVE_LEVEL.
IoCreateSymbolicLink
IoCreateSymbolicLink should only be called at IRQL = PASSIVE_LEVEL.
IoCreateSynchronizationEvent
IoCreateSynchronizationEvent should only be called at IRQL = PASSIVE_LEVEL.
IoCreateUnprotectedSymbolicLink
IoCreateUnprotectedSymbolicLink should only be called at IRQL = PASSIVE_LEVEL.
IOCTL: 0x%08x
IoDeleteController
IoDeleteController should only be called at IRQL = PASSIVE_LEVEL.
IoDeleteDevice
IoDeleteDevice should only be called at IRQL <= APC_LEVEL.
IoDeleteSymbolicLink
IoDeleteSymbolicLink should only be called at IRQL = PASSIVE_LEVEL.
IoDetachDevice
IoDetachDevice should only be called at IRQL = PASSIVE_LEVEL.
IoDeviceObjectType
IoDisconnectInterrupt
IoDisconnectInterrupt should only be called at IRQL = PASSIVE_LEVEL.
IofCompleteRequest
IoFreeController
IoFreeController should only be called at IRQL == DISPATCH_LEVEL.
IoFreeMdl
IoGetConfigurationInformation
IoGetConfigurationInformation should only be called at IRQL = PASSIVE_LEVEL.
IoGetDeviceDirectory
IoGetDeviceDirectory should only be called at IRQL = PASSIVE_LEVEL.
IoGetDeviceObjectPointer
IoGetDeviceObjectPointer should only be called at IRQL = PASSIVE_LEVEL.
IoGetDeviceToVerify
IoGetDeviceToVerify should only be called at IRQL <= DISPATCH_LEVEL.
IoGetDmaAdapter
IoGetDmaAdapter should only be called at IRQL = PASSIVE_LEVEL.
IoGetDriverDirectory
IoGetDriverDirectory should only be called at IRQL = PASSIVE_LEVEL.
IoGetFileObjectGenericMapping
IoGetFileObjectGenericMapping should only be called at IRQL = PASSIVE_LEVEL.
IoGetInitialStack
IoGetInitialStack should only be called at IRQL <= APC_LEVEL.
IoGetStackLimits
IoInitializeTimer
IoInitializeTimer should only be called at IRQL = PASSIVE_LEVEL.
IoIsWdmVersionAvailable
IoIsWdmVersionAvailable should only be called at IRQL = PASSIVE_LEVEL.
IoOpenDeviceInterfaceRegistryKey
IoOpenDeviceInterfaceRegistryKey should only be called at IRQL = PASSIVE_LEVEL.
IoOpenDeviceRegistryKey
IoOpenDeviceRegistryKey should only be called at IRQL = PASSIVE_LEVEL.
IoQueueWorkItem
IoRaiseHardError
IoRaiseHardError should only be called at IRQL <= APC_LEVEL.
IoRaiseInformationalHardError
IoRaiseInformationalHardError should only be called at IRQL <= APC_LEVEL.
IoReadPartitionTable
IoReadPartitionTable should only be called at IRQL = PASSIVE_LEVEL.
IoRegisterDeviceInterface
IoRegisterDeviceInterface should only be called at IRQL = PASSIVE_LEVEL.
IoRegisterDriverReinitialization
IoRegisterDriverReinitialization should only be called at IRQL = PASSIVE_LEVEL.
IoRegisterShutdownNotification
IoRegisterShutdownNotification should only be called at IRQL = PASSIVE_LEVEL.
IoRemoveShareAccess
IoRemoveShareAccess should only be called at IRQL = PASSIVE_LEVEL.
IoSetDeviceInterfaceState
IoSetDeviceInterfaceState should only be called at IRQL = PASSIVE_LEVEL.
IoSetDeviceToVerify
IoSetDeviceToVerify should only be called at IRQL <= DISPATCH_LEVEL.
IoSetPartitionInformation
IoSetPartitionInformation should only be called at IRQL = PASSIVE_LEVEL.
IoSetShareAccess
IoSetShareAccess should only be called at IRQL = PASSIVE_LEVEL.
IoStartNextPacket
IoStartNextPacket should only be called at IRQL == DISPATCH_LEVEL.
IoUnregisterShutdownNotification
IoUnregisterShutdownNotification should only be called at IRQL = PASSIVE_LEVEL.
IoUpdateShareAccess
IoUpdateShareAccess should only be called at IRQL = PASSIVE_LEVEL.
IoValidateDeviceIoControlAccess
IoWMIAllocateInstanceIds
IoWMIAllocateInstanceIds should only be called at IRQL = PASSIVE_LEVEL.
IoWMIRegistrationControl
IoWMIRegistrationControl should only be called at IRQL = PASSIVE_LEVEL.
IoWriteErrorLogEntry
IoWriteErrorLogEntry should only be called at IRQL <= DISPATCH_LEVEL.
IoWritePartitionTable
IoWritePartitionTable should only be called at IRQL = PASSIVE_LEVEL.
IRP_Address
IRP_MJ_DEVICE_CONTROL
IRP_Parameters
IRP_Stack_Loc_Code
IRQL: %d
Irrelevant
KeAcquireGuardedMutex
KeAcquireGuardedMutex should only be called at IRQL <= APC_LEVEL.
KeAcquireGuardedMutexUnsafe
KeAcquireGuardedMutexUnsafe should only be called at IRQL <= APC_LEVEL.
KeAcquireInStackQueuedSpinLock
KeAcquireInStackQueuedSpinLockAtDpcLevel
KeAcquireInStackQueuedSpinLockForDpc
KeAcquireQueuedSpinLock
KeAcquireSpinLockAtDpcLevel
KeAcquireSpinLockAtDpcLevel should only be called at IRQL >= DISPATCH_LEVEL.
KeAcquireSpinLockRaiseToDpc
KeAcquireSpinLockRaiseToDpc should only be called at IRQL <= DISPATCH_LEVEL.
KeBugCheckEx
KeCancelTimer
KeCancelTimer should only be called at IRQL <= DISPATCH_LEVEL.
KeClearEvent
KeClearEvent should only be called at IRQL <= DISPATCH_LEVEL.
KeDelayExecutionThread
KeDelayExecutionThread should only be called at IRQL <= APC_LEVEL.
KeDeregisterNmiCallback
KeDeregisterNmiCallback should only be called at IRQL <= APC_LEVEL.
KeEnterCriticalRegion
KeEnterCriticalRegion should only be called at IRQL <= APC_LEVEL.
KeEnterGuardedRegion
KeEnterGuardedRegion should only be called at IRQL <= APC_LEVEL.
KeInitializeDeviceQueue
KeInitializeDeviceQueue should only be called at IRQL <= DISPATCH_LEVEL.
KeInitializeSemaphore
KeInitializeSemaphore should only be called at IRQL <= DISPATCH_LEVEL.
KeInitializeSpinLock
KeInitializeTimer
KeInitializeTimer should only be called at IRQL <= DISPATCH_LEVEL.
KeInitializeTimerEx
KeInitializeTimerEx should only be called at IRQL <= DISPATCH_LEVEL.
KeInsertByKeyDeviceQueue
KeInsertByKeyDeviceQueue should only be called at IRQL == DISPATCH_LEVEL.
KeInsertDeviceQueue
KeInsertDeviceQueue should only be called at IRQL == DISPATCH_LEVEL.
KeIsExecutingDpc
KeLeaveCriticalRegion
KeLeaveCriticalRegion should only be called at IRQL <= APC_LEVEL.
KeLeaveGuardedRegion
KeLeaveGuardedRegion should only be called at IRQL <= APC_LEVEL.
KeLowerIrql
KePulseEvent
KePulseEvent should only be called at IRQL <= DISPATCH_LEVEL.
KeQueryActiveProcessors
KeQueryActiveProcessors should only be called at IRQL <= APC_LEVEL.
KeQueryDpcWatchdogInformation
KeQueryPerformanceCounter
KeReadStateEvent
KeReadStateEvent should only be called at IRQL <= DISPATCH_LEVEL.
KeReadStateTimer
KeReadStateTimer should only be called at IRQL <= DISPATCH_LEVEL.
KeRegisterNmiCallback
KeRegisterNmiCallback should only be called at IRQL <= APC_LEVEL.
KeReleaseGuardedMutex
KeReleaseGuardedMutex should only be called at IRQL <= APC_LEVEL.
KeReleaseGuardedMutexUnsafe
KeReleaseGuardedMutexUnsafe should only be called at IRQL <= APC_LEVEL.
KeReleaseInStackQueuedSpinLock
KeReleaseInStackQueuedSpinLock is called without KeAcquireInStackQueuedSpinLock called first.
KeReleaseInStackQueuedSpinLockForDpc
KeReleaseInStackQueuedSpinLockFromDpcLevel
KeReleaseInStackQueuedSpinLockFromDpcLevel is called without KeAcquireInStackQueuedSpinLock called first.
KeReleaseMutant
KeReleaseMutex
KeReleaseMutex should only be called at IRQL <= DISPATCH_LEVEL.
KeReleaseQueuedSpinLock
KeReleaseSpinLock
KeReleaseSpinLock should only be called at IRQL = DISPATCH_LEVEL.
KeReleaseSpinLockFromDpcLevel
KeReleaseSpinLockFromDpcLevel should only be called at IRQL >= DISPATCH_LEVEL.
KeRemoveByKeyDeviceQueue
KeRemoveByKeyDeviceQueue should only be called at IRQL == DISPATCH_LEVEL.
KeRemoveDeviceQueue
KeRemoveDeviceQueue should only be called at IRQL == DISPATCH_LEVEL.
KeRemoveEntryDeviceQueue
KeRemoveEntryDeviceQueue should only be called at IRQL <= DISPATCH_LEVEL.
KeResetEvent
KeResetEvent should only be called at IRQL <= DISPATCH_LEVEL.
KeRestoreExtendedProcessorState
KeSaveExtendedProcessorState
KeSetEvent
KeSetEvent should only be called at IRQL <= APC_LEVEL when Wait is set to TRUE.
KeSetEvent should only be called at IRQL <= DISPATCH_LEVEL.
KeSetTimer
KeSetTimer should only be called at IRQL <= DISPATCH_LEVEL.
KeSetTimerEx
KeSetTimerEx should only be called at IRQL <= DISPATCH_LEVEL.
KeStallExecutionProcessor
KeTryToAcquireGuardedMutex
KeTryToAcquireGuardedMutex should only be called at IRQL <= APC_LEVEL.
KeTryToAcquireQueuedSpinLock
KeTryToAcquireSpinLockAtDpcLevel
KfRaiseIrql
KhL9)t
L {II>zk
L$ E3
L$ SUVWH
L$ SVWH
L$ UH
l$ VWAUAVAWH
L$(E3
l$(E3
L$(E3
L$@H3
L$0E3
L$0H3
L$0t'H
L$8H3
l$pD8L$Pu
L$pH3
L$PH3
L$XH3
L+x`r
L9uHt
L9uXt
Lc|$xA
Lcl$ A
Legal_Policy_Statement
LegalCopyright
LEVLd
LI`+*
LightWeightSpecialPool
Livedump failed with status code: 0x%X 
LoadAddress
Loading plugin, %s, failed with 0x%x
lowpri
m|z{LV
M0K0I
Medium
mHH9]
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1.0,
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
Microsoft-Windows-Kernel-XDV
Microsoft-Windows-Kernel-XDV/Analytic
MinCount
MmAllocateContiguousMemory
MmAllocateContiguousMemorySpecifyCache
MmAllocateNonCachedMemory
MmAllocateNonCachedMemory should only be called at IRQL <= APC_LEVEL.
MmAllocatePagesForMdl
MmAllocatePagesForMdl should only be called at IRQL <= DISPATCH_LEVEL.
MmAllocatePagesForMdlEx
MmAllocatePagesForMdlEx should only be called at IRQL <= DISPATCH_LEVEL.
MmFreeContiguousMemory
MmFreeContiguousMemory should only be called at IRQL <= DISPATCH_LEVEL.
MmFreeNonCachedMemory
MmFreeNonCachedMemory should only be called at IRQL <= APC_LEVEL.
MmFreePagesFromMdl
MmFreePagesFromMdl should only be called at IRQL <= DISPATCH_LEVEL.
MmGetSystemRoutineAddress
MmIsAddressValid
MmLockPagableDataSection
MmLockPagableDataSection should only be called at IRQL <= APC_LEVEL.
MmLockPagableSectionByHandle
MmLockPagableSectionByHandle should only be called at IRQL <= APC_LEVEL.
MmMapIoSpace
MmMapLockedPagesSpecifyCache
MmPageEntireDriver
MmPageEntireDriver should only be called at IRQL <= APC_LEVEL.
MmProbeAndLockPages
MmResetDriverPaging
MmResetDriverPaging should only be called at IRQL <= APC_LEVEL.
MmSecureVirtualMemory
MmSecureVirtualMemory should only be called at IRQL <= APC_LEVEL.
MmUnlockPagableImageSection
MmUnlockPagableImageSection should only be called at IRQL <= APC_LEVEL.
MmUnlockPages
MmUnsecureVirtualMemory
MmUnsecureVirtualMemory should only be called at IRQL <= APC_LEVEL.
MmUserProbeAddress
Module
More debugging info: 
ms:CriticalData
ms:Measures
ms:ReservedKeyword44
ms:Telemetry
N0L0J
ndis.sys
NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION indicated without an NDIS_STATUS_DOT11_ASSOCIATION_START first.
NDIS_STATUS_DOT11_ASSOCIATION_START indicated outside the connection/roaming operations.
NDIS_STATUS_DOT11_CONNECTION_COMPLETION indicated without an NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION for an NDIS_STATUS_DOT11_ASSOCIATION_START.
NDIS_STATUS_DOT11_CONNECTION_COMPLETION missing for the previous NDIS_STATUS_DOT11_CONNECTION_START.
NDIS_STATUS_DOT11_CONNECTION_COMPLETION without an NDIS_STATUS_DOT11_CONNECTION_START indicated first.
NDIS_STATUS_DOT11_CONNECTION_START indicated between NDIS_STATUS_DOT11_ROAMING_START and NDIS_STATUS_DOT11_ROAMING_COMPLETION.
NDIS_STATUS_DOT11_CONNECTION_START is inidcated without a prevoius OID_DOT11_CONNECT_REQUEST.
NDIS_STATUS_DOT11_DISASSOCIATION without NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION first.
NDIS_STATUS_DOT11_ROAMING_COMPLETION indicated without an NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION for an NDIS_STATUS_DOT11_ASSOCIATION_START.
NDIS_STATUS_DOT11_ROAMING_COMPLETION missing for the previous NDIS_STATUS_DOT11_ROAMING_START.
NDIS_STATUS_DOT11_ROAMING_COMPLETION without an NDIS_STATUS_DOT11_ROAMING_START indicated first.
NDIS_STATUS_DOT11_ROAMING_START indicated between NDIS_STATUS_DOT11_CONNECTION_START and NDIS_STATUS_DOT11_CONNECTION_COMPLETION.
NdisAllocateCloneNetBufferList
NdisFreeCloneNetBufferList
NdisMOidRequestComplete should not be called with 3rd parameter (i.e., Status) as NDIS_STATUS_PENDING.
new phase init
NoDisplayClass
NoUseClass
NtCreateFile
NtCreateFile should only be called at IRQL = PASSIVE_LEVEL.
ntoskrnl.exe
NtSetInformationFile
NtSetInformationFile should only be called at IRQL = PASSIVE_LEVEL.
NtWriteFile
NtWriteFile should only be called at IRQL = PASSIVE_LEVEL.
O0M0K
ObGetObjectSecurity
ObGetObjectSecurity should only be called at IRQL <= APC_LEVEL.
ObOpenObjectByPointer
ObReferenceObjectByHandle
ObReferenceObjectByHandle should only be called at IRQL = PASSIVE_LEVEL.
ObReleaseObjectSecurity
ObReleaseObjectSecurity should only be called at IRQL <= APC_LEVEL.
OID_DOT11_CONNECT_REQUEST is failed by MiniportOidRequest after NDIS_STATUS_DOT11_CONNECTION_START is inidcated.
OID_DOT11_CONNECT_REQUEST is failed by NdisMOidRequestComplete after NDIS_STATUS_DOT11_CONNECTION_START is inidcated.
oK0D$"<
OPaQpR
OPCOT
OriginalFilename
p AWH
P$RkR
P7RwR
pA^_]
pA_A^A]A\_[]
PA_A^A]A\_^]
PDPLR
PKR_R
PoFxActivateComponent
PoFxCompleteDevicePowerNotRequired
PoFxCompleteIdleCondition
PoFxCompleteIdleState
PoFxIdleComponent
PoFxNotifySurprisePowerOn
PoFxPowerControl
PoFxRegisterDevice
PoFxReportDevicePoweredOn
PoFxSetComponentLatency
PoFxSetComponentResidency
PoFxSetComponentWake
PoFxSetDeviceIdleTimeout
PoFxStartDevicePowerManagement
PoFxUnregisterDevice
PoRequestPowerIrp
POSTMORTEM
PpRbH
PpUcH
ProbeForRead
ProbeForRead should only be called at IRQL <= APC_LEVEL.
ProbeForWrite
ProbeForWrite should only be called at IRQL <= APC_LEVEL.
ProductName
ProductVersion
Properties
Protected-Process
PRVAP
PsCreateSystemThread
PsCreateSystemThread should only be called at IRQL = PASSIVE_LEVEL.
PsGetCurrentProcessId
PsGetCurrentThreadId
PsGetVersion
PsGetVersion should only be called at IRQL = PASSIVE_LEVEL.
PsSetCreateProcessNotifyRoutine
PsSetCreateProcessNotifyRoutine should only be called at IRQL = PASSIVE_LEVEL.
PsSetCreateThreadNotifyRoutine
PsSetCreateThreadNotifyRoutine should only be called at IRQL = PASSIVE_LEVEL.
PsSetLoadImageNotifyRoutine
PsSetLoadImageNotifyRoutine should only be called at IRQL = PASSIVE_LEVEL.
PsTerminateSystemThread
PsTerminateSystemThread should only be called at IRQL = PASSIVE_LEVEL.
Q(RPR
Q*Q6Q^Q
Q*SnS
QOTjTvT
Q-Q_Q
r!H;K
R!s4Z
R$fA;Z*
R(TVT
R*R6R^R
r~akow
Redmond1
Registered IRP_MJ_DEVICE_CONTROL routine was called.
RESET: 
Return value of MmMapIoSpaceInfo: %p
RJRbS
ROUjUvU
RSDS=k
Rt0A;
RtlAbsoluteToSelfRelativeSD
RtlAddAccessAllowedAce
RtlAppendUnicodeStringToString
RtlCaptureStackBackTrace
RtlCompareMemory
RtlCompareUnicodeString
RtlCreateRegistryKey
RtlCreateRegistryKey should only be called at IRQL = PASSIVE_LEVEL.
RtlCreateSecurityDescriptor
RtlCreateSystemVolumeInformationFolder
RtlCreateSystemVolumeInformationFolder should only be called at IRQL = PASSIVE_LEVEL.
RtlDeleteRegistryValue
RtlDeleteRegistryValue should only be called at IRQL = PASSIVE_LEVEL.
RtlFindExportedRoutineByName
RtlFreeAnsiString
RtlFreeUnicodeString
RtlGetDaclSecurityDescriptor
RtlGetGroupSecurityDescriptor
RtlGetOwnerSecurityDescriptor
RtlGetPersistedStateLocation
RtlGetSaclSecurityDescriptor
RtlHashUnicodeString
RtlInitAnsiString
RtlInitUnicodeString
RtlLengthSecurityDescriptor
RtlLengthSid
RtlPrefixUnicodeString
RtlRandomEx
RtlSetDaclSecurityDescriptor
RtlSubAuthoritySid
RtlUnicodeStringToAnsiString
RtlWalkFrameChain
RtlWriteRegistryValue
RtlWriteRegistryValue should only be called at IRQL = PASSIVE_LEVEL.
RuleId
RWTuT
S U`U
S UqV
S[TyT
SanitizeDeviceName(): failed to allocate memory for driver name.
SavedCallStack
SDV_AllocateAdapterChannel should only be called at IRQL == DISPATCH_LEVEL.
SDV_AllocateCommonBuffer should only be called at IRQL == PASSIVE_LEVEL.
SDV_BuildMdlFromScatterGatherList should only be called at IRQL <= DISPATCH_LEVEL.
SDV_BuildScatterGatherList should only be called at IRQL == DISPATCH_LEVEL.
SDV_FlushAdapterBuffers should only be called at IRQL <= DISPATCH_LEVEL.
SDV_FreeAdapterChannel should only be called at IRQL == DISPATCH_LEVEL.
SDV_FreeCommonBuffer should only be called at IRQL <= DISPATCH_LEVEL.
SDV_FreeMapRegisters should only be called at IRQL == DISPATCH_LEVEL.
SDV_GetDmaAlignment should only be called at IRQL == PASSIVE_LEVEL.
SDV_GetScatterGatherList should only be called at IRQL == DISPATCH_LEVEL.
SDV_MapTransfer should only be called at IRQL <= DISPATCH_LEVEL.
SDV_PutDmaAdapter should only be called at IRQL <= DISPATCH_LEVEL.
SDV_PutScatterGatherList should only be called at IRQL == DISPATCH_LEVEL.
SDV_ReadDmaCounter should only be called at IRQL <= DISPATCH_LEVEL.
SeAlA
SeCaptureSecurityDescriptor
SeConvertStringSecurityDescriptorToSecurityDescriptor
Security
SeExports
SeSdH
SeTsI
SetXdvKernelUtilities
SGT,ViV
sprintf
Start
StringFileInfo
StringToULong64
System
t$ fD
t$ UWAVH
t$ WATAUAVAWH
t$ WATAVH
t$ WH
T$xE3
T(U:U
t1L;A
t7B9T
T7VUV
tAE81t<3
tDD9w
TEMP`
Test: Oops! Something went wrong.
testflags
TFTrT
Thales TSS ESN:FC41-4BD4-D2201%0#
The driver has returned without leaving the critical region.
The driver is calling ExReleaseResourceAndLeaveCriticalRegion from outside a critical region.
The driver is calling ExReleaseResourceAndLeavePriorityRegion from outside a critical region.
The driver is calling KeLeaveCriticalRegion from outside a critical region.
The driver shall not modify the registry using an absolute registry path. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs.
The driver shall not modify the registry using an absolute registry path. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs. Modification detected for key: 
The driver shall not modify the registry using RTL_REGISTRY_CONTROL. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs.
The driver shall not modify the registry using RTL_REGISTRY_CONTROL. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs. Modification targeted subkey: 
The driver shall not modify the registry using RTL_REGISTRY_SERVICES. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs.
The driver shall not modify the registry using RTL_REGISTRY_SERVICES. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs. Modification targeted subkey: 
The driver shall not modify the registry using RTL_REGISTRY_WINDOWS_NT. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs.
The driver shall not modify the registry using RTL_REGISTRY_WINDOWS_NT. The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs. Modification targeted subkey: 
The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs.
The driver shall only modify the registry using a key handle which comes from WDF or WDM framework APIs. Modification detected for key: 
The driver should have released global cancellation lock!
The filter driver calls NdisFPauseComplete without its FilterPause returning NDIS_STATUS_PENDING first.
The filter driver can only return NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING from FilterPause.
The filter driver failed to complete FilterPause within 10 seconds.
The IRP can only be completed with STATUS_SUCCESS.
The last parameter of PoRequestPowerIrp must be null.
This event is sent whenever XDV attempts to write a live kernel dump.
This OID should only be completed with NDIS_STATUS_NOT_ACCEPTED or NDIS_STATUS_SUCCESS.
This OID should only be completed with NDIS_STATUS_NOT_ACCEPTED, NDIS_STATUS_REQUEST_ABORTED, NDIS_STATUS_SUCCESS, or NDIS_STATUS_PENDING.
This OID should only be completed with NDIS_STATUS_NOT_ACCEPTED, NDIS_STATUS_REQUEST_ABORTED, or NDIS_STATUS_SUCCESS.
This OID should only be completed with NDIS_STATUS_NOT_ACCEPTED, NDIS_STATUS_SUCCESS, or NDIS_STATUS_PENDING.
TimeDateStamp
Timeout on completing an NDIS OID request.
Timeout on NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION after NDIS_STATUS_DOT11_ASSOCIATION_START.
Timeout on NDIS_STATUS_DOT11_CONNECTION_COMPLETION/NDIS_STATUS_DOT11_ROAMING_COMPLETION after NDIS_STATUS_DOT11_CONNECTION_START/NDIS_STATUS_DOT11_ROAMING_START.
Timeout on NDIS_STATUS_DOT11_CONNECTION_START after OID_DOT11_CONNECT_REQUEST.
Timeout on NDIS_STATUS_DOT11_LINK_QUALITY after NDIS_STATUS_DOT11_ASSOCIATION_COMPLETION.
Timeout on NDIS_STATUS_DOT11_SCAN_CONFIRM after OID_DOT11_SCAN_REQUEST.
Timeout on receiving a NET_BUFFER_LIST by FilterReceiveNetBufferLists (in the upper driver).
Timeout on receiving a NET_BUFFER_LIST by FilterReceiveNetBufferLists.
Timeout on sending a NET_BUFFER_LIST by NdisFilterSendNetBufferLists (check the lower edge).
Timeout on sending a NET_BUFFER_LIST by NdisFilterSendNetBufferLists.
tJv!Ic
TlP0X
TMU*W
Tracked Object (OID, Port number, IRP, etc.): 0x%p
Tracking driver %S with fill pattern 0x%02x
TrackingIrpCount: %d
Translation
TTBLd
u$H9=ym
U*WoW
U,VHVZV
u-@8=  
U[KMA
u0fD;
U0S0Q
U0WoW
UATAUAVAWH
UAVAWH
UInt32_Event_Number
Unable to find a verified driver outside of XDV, XDVRange: 
Unknown
UNKNOWN VIOLATION REPORTED VIA DRIVER VERIFIER
Untrusted
usec:
USVWATAUAVAWH
USWATAUAVAWH
UVWATAUAVAWH
UVWAVAWH
UWATAUAVH
UWATAVAWH
UWAUAVAWH
UWAVH
V%XLXwX
V:VFVnV
V2XzX
v5L9%
VarFileInfo
vDbgPrintEx
ve[]0
VerifierExt
VerifierExt!%s unable to allocate resources for driver data
VerifierExt!%s:  failed to initialize with %08lx
VerifierExt!%s: FailureMode value from registry is invalid {%d} 
VerifierExt!%s: injecting failure for function %s
VerifierExt!%s: invalid IOCTL received: 0x%0x
VerifierExt!%s: registry data format error: %s
VerifierExt!%s: unable to allocate additional resources for driver list
VerifierExt!%s: Unrecognized stack fail type: %x
VerifierExt!%s: would have injected failure for function %s
VerifierExt.pdb
VerifierExt.sys
VerifierExtLoadAddress
VerifierOptions
VerifierSettingState
VerifierTriageContext
VerifyDriverLevel
VerifyDrivers
VfInsertContext
VfIsRuleClassEnabled
VfQueryDispatchTable
VfQueryThreadContext
VfRemoveContext
Violating Drivername
Violation Hash
Violation ID
Violation stack passed to XdvEtwWriteBugCheckEvent is NULL
ViolationString
VOYjYvY
VS_VERSION_INFO
VUWgWzW
VWATAVAWH
VWAUAVAWH
VWAVH
VWP-:i
W*W6W^W
w,t3A
W;Y~Y
w]tQ-
w^tRA
w_tSA
w`tTA
waitforvar
Washington1
WATAUAVAWH
WAVAWH
WCOS_STATE_SEPARATION_VIOLATION
WCOSStateSepRuleClass
wcschr
wcscpy_s
wcsncmp
wcsncpy_s
wcstoul
wctW-
wdf01000.sys
wetYA
wetYD
WEVT_TEMPLATE
wftZA
wftZD
wht\A
wht_A
win:Error
win:Informational
win:Start
win:Stop
WindowsDriverVerifierXdv
wlt`-
wlt`A
wMtD-
wotcD
wotfD
WOZjZvZ
wptdD
wPtGA
wTtKA
wwtk-
x ATAV
x ATAVAWH
x AUAVAWH
x AVH
x AWH
X$ZgZ
X&ZlZ
X*X6X^XUZM_
X?YuY9^
X5XaX
XA_A^A]A\_^[]
XAY`YrY
XBZ\Z
XDV driver loaded!
XDV driver unloaded!
XDV Internal problem 1.1. Data cleanup.
XDV Internal problem 1.2. Data cleanup.
XDV Internal problem 2.1. Data cleanup.
XDV Lock was held too long. Total, Maximal 
XDV state-full rule filter cannot find the storage blob in FreeState
XDV state-full rule filter: blob size does not match in LoadState
XDV state-full rule state has been corrupted
xdv_AddDevice returned with an invalid QueuedSpinLock state.
xdv_AddDevice returned with an invalid SpinLock state
xdv_DriverEntry returned with an invalid QueuedSpinLock state.
xdv_DriverEntry returned with an invalid SpinLock state
xdv_DriverStartIo returned with an invalid QueuedSpinLock state.
xdv_DriverStartIo returned with an invalid SpinLock state
xdv_DriverUnload returned with an invalid QueuedSpinLock state.
xdv_DriverUnload returned with an invalid SpinLock state
xdv_IRP_MJ_CLEANUP returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_CLEANUP returned with an invalid SpinLock state
xdv_IRP_MJ_CLOSE returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_CLOSE returned with an invalid SpinLock state
xdv_IRP_MJ_CREATE returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_CREATE returned with an invalid SpinLock state
xdv_IRP_MJ_CREATE_MAILSLOT returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_CREATE_MAILSLOT returned with an invalid SpinLock state
xdv_IRP_MJ_CREATE_NAMED_PIPE returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_CREATE_NAMED_PIPE returned with an invalid SpinLock state
xdv_IRP_MJ_DEVICE_CHANGE returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_DEVICE_CHANGE returned with an invalid SpinLock state
xdv_IRP_MJ_DEVICE_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_DEVICE_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_DIRECTORY_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_DIRECTORY_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_FILE_SYSTEM_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_FILE_SYSTEM_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_FLUSH_BUFFERS returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_FLUSH_BUFFERS returned with an invalid SpinLock state
xdv_IRP_MJ_INTERNAL_DEVICE_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_INTERNAL_DEVICE_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_LOCK_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_LOCK_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_PNP returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_PNP returned with an invalid SpinLock state
xdv_IRP_MJ_POWER returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_POWER returned with an invalid SpinLock state
xdv_IRP_MJ_QUERY_EA returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_QUERY_EA returned with an invalid SpinLock state
xdv_IRP_MJ_QUERY_INFORMATION returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_QUERY_INFORMATION returned with an invalid SpinLock state
xdv_IRP_MJ_QUERY_QUOTA returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_QUERY_QUOTA returned with an invalid SpinLock state
xdv_IRP_MJ_QUERY_SECURITY returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_QUERY_SECURITY returned with an invalid SpinLock state
xdv_IRP_MJ_QUERY_VOLUME_INFORMATION returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_QUERY_VOLUME_INFORMATION returned with an invalid SpinLock state
xdv_IRP_MJ_READ returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_READ returned with an invalid SpinLock state
xdv_IRP_MJ_SET_EA returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SET_EA returned with an invalid SpinLock state
xdv_IRP_MJ_SET_INFORMATION returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SET_INFORMATION returned with an invalid SpinLock state
xdv_IRP_MJ_SET_QUOTA returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SET_QUOTA returned with an invalid SpinLock state
xdv_IRP_MJ_SET_SECURITY returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SET_SECURITY returned with an invalid SpinLock state
xdv_IRP_MJ_SET_VOLUME_INFORMATION returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SET_VOLUME_INFORMATION returned with an invalid SpinLock state
xdv_IRP_MJ_SHUTDOWN returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SHUTDOWN returned with an invalid SpinLock state
xdv_IRP_MJ_SYSTEM_CONTROL returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_SYSTEM_CONTROL returned with an invalid SpinLock state
xdv_IRP_MJ_WRITE returned with an invalid QueuedSpinLock state.
xdv_IRP_MJ_WRITE returned with an invalid SpinLock state
XDV_LIVE_DUMP_EVENT
XdvBugCheck
XDVDBG
XDVDBG: Restart.
XDVDBG: Stop.
XDVDBG: Verifying. Under XDV lock (microseconds): 
XdvDebugControl
XdvDebugRules
XdvDriverLoad
XdvEtwRandomSeed: 
XdvExtensionOption
XdvHibernationNotification
XdvLA
XdvLH
XdvLiveDump
XdvLoaded
XdvLogging
XdvLoggingCleanup
XdvLoggingEntry
XdvMH
XdvMI
XdvNA
XdvND
XdvNH
XdvNI
XdvNotifyExtensions
XdvOH
XdvPersistDisableRule
XdvQueryDispatchTable
XdvRf
XdvRuleSuppress
XdvTimedFactor
XdvTipPerformanceControl
XdvTipStopTime
XdvTipTag
XdvUI
XdvVerifierFlags
XdvVerifierOptions
xf,[P
XOY'[z[
XqY@[
xRich
XYXQZgZzZ
Y$[k[
Y)Y5Y[Yc[{[
Y*ZiZ
Z,\t\
z.9Wv
Z3\p\
ZwClose
ZwClose should only be called at IRQL = PASSIVE_LEVEL.
ZwCreateDirectoryObject
ZwCreateDirectoryObject should only be called at IRQL = PASSIVE_LEVEL.
ZwCreateFile
ZwCreateFile should only be called at IRQL = PASSIVE_LEVEL.
ZwCreateKey
ZwCreateKey is called by %S
ZwCreateKey should only be called at IRQL = PASSIVE_LEVEL.
ZwCreateKeyTransacted
ZwCreateKeyTransacted should only be called at IRQL = PASSIVE_LEVEL.
ZwDeleteFile
ZwDeleteFile should only be called at IRQL = PASSIVE_LEVEL.
ZwDeleteKey
ZwDeleteKey should only be called at IRQL = PASSIVE_LEVEL.
ZwDeleteValueKey
ZwDeleteValueKey should only be called at IRQL = PASSIVE_LEVEL.
ZwEnumerateKey
ZwEnumerateKey should only be called at IRQL = PASSIVE_LEVEL.
ZwEnumerateValueKey
ZwEnumerateValueKey should only be called at IRQL = PASSIVE_LEVEL.
ZwFlushBuffersFile
ZwFlushBuffersFile should only be called at IRQL = PASSIVE_LEVEL.
ZwFlushBuffersFileEx
ZwFlushBuffersFileEx should only be called at IRQL = PASSIVE_LEVEL.
ZwFlushKey
ZwFlushKey should only be called at IRQL = PASSIVE_LEVEL.
ZwOpenKey
ZwOpenKey should only be called at IRQL = PASSIVE_LEVEL.
ZwOpenProcessTokenEx
ZwQueryInformationToken
ZwQueryKey
ZwQueryKey should only be called at IRQL = PASSIVE_LEVEL.
ZwQueryValueKey
ZwQueryValueKey should only be called at IRQL = PASSIVE_LEVEL.
ZwRenameKey
ZwRenameKey should only be called at IRQL = PASSIVE_LEVEL.
ZwSetEaFile
ZwSetEaFile should only be called at IRQL = PASSIVE_LEVEL.
ZwSetInformationFile
ZwSetInformationFile should only be called at IRQL = PASSIVE_LEVEL.
ZwSetInformationKey
ZwSetInformationKey should only be called at IRQL = PASSIVE_LEVEL.
ZwSetSecurityObject
ZwSetValueKey
ZwSetValueKey should only be called at IRQL = PASSIVE_LEVEL.
ZwWriteFile
ZwWriteFile should only be called at IRQL = PASSIVE_LEVEL.
