                        external.sendMessage("OnMessage", this.name, data);
                        privatePorts[e.portName].internalData.eventManager.__fireEvent("message", { data: e.data });
                        return 1;
                        throw new Error("Cannot postMessage on an unconnected port.");
                        throw new Error("Diagnostics message received for unknown port.");
                    }
                    } else {
                    break;
                    breakFlags = parseInt(e.breakFlags, 10);
                    diagnosticsEventManager.__fireEvent("breakpointhit", {});
                    diagnosticsEventManager.__fireEvent("connect", privatePort.port);
                    diagnosticsEventManager.__fireEvent("detach", {});
                    diagnosticsEventManager.__fireEvent("scripterror", e);
                    hwnd = e.hwnd;
                    if (_internalData.isConnected) {
                    if (privatePorts.hasOwnProperty(e.portName)) {
                    if (this.__eventListeners[eventName][i] === callback) {
                    isAttached = false;
                    privatePort.internalData.isConnected = true;
                    privatePorts = {};
                    this.__eventListeners[eventName].splice(i, 1);
                    throw new Error("You must use a port created by ScriptedHost.Diagnostics.createPort");
                    var privatePort = createPortInternal(e.portName);
                // A synchronous message will be sent back which will update the value of hwnd above.
                // GetBreakFlags triggers a synchronous message back to us of commandId "OnGetBreakFlagsResult" which sets breakFlags above.
                // sendMessage requires at least one after the message ID string, however we don't use any for GetBreakFlags
                ///     The port to connect to the remote side.
                ///     The portName that will identify the port
                /// </param>
                /// </signature>
                /// <param name='port' type='Object' optional='false'>
                /// <param name='portName' type='String' optional='false'>
                /// <returns type="Object">The port object which can be connected, postMessage'd and listened on (using the "message event").</returns>
                /// <signature>
                /// <summary> Connects a port to the remote target - on the remote side, a "connect" event will be fired with the other end of the port.</summary>
                /// <summary> Creates a port to be used to talk to script running in the diagnostics engine in the remote target.</summary>
                }
                },
                addEventListener: _internalData.eventManager.addEventListener.bind(_internalData.eventManager),
                case "OnBreakpointHit":
                case "OnConnect":
                case "OnDetach":
                case "OnGetBreakFlagsResult":
                case "OnHWND":
                case "OnMessage":
                case "OnRemoteScriptError":
                eventManager: new EventHelper()
                external.sendMessage("GetBreakFlags", "empty");
                external.sendMessage("GetHWND", "empty");
                external.sendMessage("OnConnect", port.name);
                external.sendMessage("TakeMemorySnapshot", portName, uid, "" + startPartId);
                for (var i = 0; i < this.__eventListeners[eventName].length; i++) {
                if (!privatePorts.hasOwnProperty(port.name)) {
                if (this.__eventListeners[eventName][i] === listener) {
                isConnected: false,
                name: portName,
                postMessage: function (data) {
                privatePorts[port.name].internalData.isConnected = true;
                removeEventListener: _internalData.eventManager.removeEventListener.bind(_internalData.eventManager)
                return breakFlags; 
                return createPortInternal(portName).port;
                return hwnd;
                return this.__eventListeners[eventName].length;
                this.__eventListeners[eventName][i](params);
                throw new Error("A port with that name already exists.");
                val ThreadingModel = s 'Apartment'
                val ThreadingModel = s 'Both'
            // diagOM supports ES5
            // Only create one port of a given name.
            ///     connecting the incoming events from VS to the actual script objects
            ///     Creates a port and its private data for storage to use later when 
            ///     The portName that will identify the port
            ///     they correspond to.
            /// </param>
            /// </signature>
            /// </summary>
            /// <param name='portName' type='String' optional='false'>
            /// <returns type="Object">An object containing the internal data and the public port to return to callers.</returns>
            /// <signature>
            /// <summary> 
            {
            }
            } else {
            },
            };
            addEventListener: diagnosticsEventManager.addEventListener.bind(diagnosticsEventManager),
            connect: function ScriptedHost$Diagnostics$connect(port) {
            createPort: function ScriptedHost$Diagnostics$createPort(portName) {
            engineSupportsES5: true,
            for (var i = 0; i < this.__eventListeners[eventName].length; i++) {
            ForceRemove Programmable
            getBreakFlags: function () {
            getHWND: function () {
            if (listener) {
            if (privatePorts.hasOwnProperty(portName)) {
            InprocServer32 = s '%MODULE%'
            privatePorts[portName] = privatePort;
            removeEventListener: diagnosticsEventManager.removeEventListener.bind(diagnosticsEventManager),
            return privatePort;
            switch (e.commandId) {
            takeMemorySnapshot: function (portName, uid, startPartId) {
            this.__eventListeners[eventName] = [];
            TypeLib = s '{8C0C62FB-37F1-11E3-8259-6C3BE516EAD0}'
            var _internalData = {
            var _port = {
            var privatePort = { internalData: _internalData, port: _port };
            Version = s '1.0'
        // Public Diagnostics API:
        // Track existing ports with private access
        ///     and provides a fire event helper function that is used internally to mimic real events.
        ///     It stores a set of attached event listeners that are the callbacks for events,
        ///     This object is used as a base class for objects that require event listener functions
        /// </summary> 
        /// <summary>
        {
        }
        });
        };
        external.addEventListener("message", function (e) {
        ForceRemove {8C0C62FD-37F1-11E3-8259-6C3BE516EAD0} = s 'TapObject Class'
        ForceRemove {8C0C6304-37F1-11E3-8259-6C3BE516EAD0} = s 'MessageDispatch Class'
        ForceRemove {CA7C1262-EA3B-4508-B120-DF9BCDEF3E60} = s 'LocalDebuggeeScriptHostFactory2 Class'
        if (!this.__eventListeners[eventName]) {
        if (this.__eventListeners[eventName]) {
        return 0;
        return diagnostics;
        this.__eventListeners = [];
        this.__eventListeners = {};
        this.__eventListeners[eventName].push(listener);
        var breakFlags = 0;
        var createPortInternal = function ScriptedHost$createPortInternal(portName) {
        var diagnostics = {
        var diagnosticsEventManager = new EventHelper();
        var hwnd = 0;
        var isAttached = true;
        var privatePorts = {};
    // Disable the usage of ActiveX
    // Hacks to get console working without code changes
    {
    }
    }();
    };
    ActiveXObject = null;
    EventHelper.prototype.__fireEvent = function (eventName, params) {
    EventHelper.prototype.addEventListener = function (eventName, listener) {
    EventHelper.prototype.isEventListenerAttached = function (eventName, listener) {
    EventHelper.prototype.removeAllEventListeners = function () {
    EventHelper.prototype.removeEventListener = function (eventName, listener) {
    function EventHelper() {
    mainBrowser = browser;
    NoRemove CLSID
    toolUI = function () {
 #%lu
 Microsoft Corporation. All rights reserved.
!aeJ@
!This program cannot be run in DOS mode.
"9_4t"
"DiagnosticsTapLibWWW
"IActiveScriptErrorWW
$0G0P0c0
%ProcessIdWWW
(function () {
)_^[]
."plCharacterPositionW
.?AV?$_Ref_count@E@std@@
.?AV_Ref_count_base@std@@
.?AV<lambda_1aa29260efe18fb4a9a0da353288df9a>@@
.?AV<lambda_6e895be48cbc1d1bc3210ae5ed3d15e2>@@
.?AV<lambda_ea7eab20e2b470d7486fb5b54d604fa1>@@
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVCAccessAce@CDacl@ATL@@
.?AVCAce@CAcl@ATL@@
.?AVCAcl@ATL@@
.?AVCAtlException@ATL@@
.?AVCDacl@ATL@@
.?AVCSecurityDesc@ATL@@
.?AVCSid@ATL@@
.?AVEventHelper@@
.?AVexception@std@@
.?AVlength_error@std@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.rdata
.rdata$brc
.rdata$r$brc
.rdata$sxdata
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$x
.text$yd
.xdata$x
// Scoping function
/0V0v0|0
: ;L;|;
:#:/:8:J:p:
:$:*:9:?:J:O:_:d:t:y:
:$:,:4:<:D:P:p:x:
:$:D:`:p:|:
:%:f:y:
:(:H:P:X:`:l:
:):l:
:*:0:M:u:
:,:o:~:
:,;<;H;h;p;x;
:;;K;b;i;p;w;~;
:@;R;l;
:};1<J<`<
:+:B:J:Q:X:_:f:z:
:4:<:C:W:
:B;];
:R;n;
; ;\;
; ;8;H;L;\;`;d;l;
; ;V;s;
;";*;>;I;
;"<4<
;#;4;K;^;
;#;7;
;$;,;4;<;H;P;
;$<_<
;&;5;
;)<r<~<
;,;G;b;
;,<r<x<
;/;?;V;^;e;y;
;-<A<H<x<
;0<z<
;4;H;\;l;|;
;5;p;
;7;`;
;7u ;
;8<s<M=
;9;F;K;~;
;D<y<
;D<Y<i<{<
;data
;F|u/
;F|u/SW
;Fpt@
;K;[;r;{;
;w$t,
;w(t7
? ?(?0?8?D?d?l?t?
?"?9?C?I?k?
?#?F?a?|?
?$?0?8?l?|?
?&?P?v?
?)?t?
?,?4?D?`?h?p?|?
?/?>?H?
?'?1?:???D?J?O?^?g?p?u?
?_Xbad_function_call@std@@YAXXZ
?_Xlength_error@std@@YAXPBD@Z
?=u/W
?0?9?
?2?8???F?S?
?C?T?v?
?I?c?
?R?t?
@.reloc
@.rsrc
@Qm6t
\Implemented Categories
\Required Categories
\u%04x
^d9;t
^spSucceededWW*
__CxxFrameHandler3
__std_terminate
__std_type_info_compare
_CxxThrowException
_D+_@V
_except_handler4_common
_finite
_initterm
_initterm_e
_isnan
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vswprintf
_o___stdio_common_vswprintf_s
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__fpclass
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__itow_s
_o__purecall
_o__recalloc
_o__register_onexit_function
_o__seh_filter_dll
_o__ui64tow_s
_o__wfopen_s
_o_calloc
_o_ceil
_o_fclose
_o_fgetws
_o_free
_o_malloc
_o_terminate
_o_wcscat_s
_o_wcscpy_s
_o_wcsncat_s
_o_wcsncpy_s
_o_wcstol
_o_wmemcpy_s
`.data
{1b7cd997-e5ff-4932-a7a6-2a9e636da385}
{DB78C36C-0C1D-4D30-B722-2D4C252523F1}
{loadScriptInProc
|$ f9D$Ht
|$ PWV
})();
~4listener
< <$<,<4<8<@<D<L<T<\<d<x<|<
< <D<X<h<x<
<"=0=d=r=
<#<*<1<8<?<L<
<$=,=_=i=s=
<&=L=
<*<8<?<
<*=C=I=P=W=^=e=t=
<,<8<@<t<|<
<,<R<v<
<@=k=
<<=E=`=
<-<F<L<S<Z<a<h<w<
<1=W=
<4<D<P<p<x<
<7<T<
<D<o<
<F<g<q<
<S<e<z<
<Type Name Not Found>
= =$=<=@=X=h=x=
= =@=H=T=t=|=
= =<=D=L=X=x=
= =2=8=>=D=J=P=V=\=b=h=n=,>
=!=+=c=
=$=,=8=@=X=h=
=&===}=
=(=2=s=
=:>d>
=;>N>\>
=@=p=
='>>>R>m>
=0>W>
=6>H?
=8>V>
=C=g=
=F=N=e=
=l=u=
=L9o<
> >(>\>l>x>
> >;>
>$?[?
>$>J>l>
>(>,><>@>P>T>\>`>d>h>l>p>|>
>[>}>
>=>F>
>0>8>D>d>l>x>
>0>D>L>T>\>d>p>x>
>2?9?J?T?a?
>2?c?
>5?>?N?`?
>8>O>j>q>~>
>9>T>g>
>C>I>P>]>~>
>N?T?
->portName
>S>]>c>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0"1M1p1
0$0K0`0
0(0F0c0
0(0H0P0\0d0|0
0.0S0[0b0
0/040>0
0?0Z0t0{0
0]0t0
0=1j1
000L0P0X0`0h0l0t0
000m0
040@0`0h0p0|0
040<0`0h0p0|0
040904B0
'0L0Y0v0
0m1r1
0Qh|)
0S1r1
0W1]1c1
1 1$1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(14181<1H1
1 1(1H1d1t1
1 1,1L1X1`1
1 1'1-1A1P1Y1b1t1|1
1$1X1`1h1t1
1&1L1i1
1)2d2n2u2|2
1:1{1
1^2x2
1+262Q2
11.00.19041.1
11.00.19041.1 (WinBuild.160101.0800)
111<1K1h1
1-1S1a1z1
132p2
181B1Z1g1
1A2s2
1C1J1S1\1e1
1O2y2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2@2D2`2d2
2!2(2/262=2D2K2S2[2c2o2x2}2
2!3W3
2%3A3p3
2(3_3
2)212Q2
2)292r2
2,282\2d2l2t2|2
2:3i3r3
2;2F2h2
2+2\2
2<2L2X2`2
223E3
233A3q3{3
242W2
272b2|2
2H3f3
2I3R3X3]3r3
2L2\2h2p2
2Q374c4
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3T3d3p3
3 3T3d3p3x3
3 3V3e3
3 4R4
3$3.3g3
3$3+32393@3G3N3U3]3e3m3x3}3
3/3c3
3/3g3s3z3
3:3U3p3
3<3D3T3\3d3l3t3|3
3>3^3q3
3090F0
323M3h3
34383<3X3p3
364Y4
3F4w4
3J3S3r3
3j4;5
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 545<5D5L5T5
4"4'41474k4
4$4,444<4L4T4\4d4p4
4$4,484@4`4
4$40484l4|4
4$4h4
4%5y5
4&444L4d4x4
4(4`4
4.434;4a4o4
4/5g5t5
4:4U4
4;4e4v4
4+4<4f4
4<5~5
435A5Z5
454L4c4z4
4G4r4
4N4y4
4O5Z5j5z5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5!5C5Z5
5"5A5i5
5#616
5$505P5\5d5
5(5`5|5
5,6K6k6
5:5h5
5;6L6Y6
5^5m5
5+565
545<5D5P5p5x5
5-5<5C5P5s5
5'525Y5p5
5A5g5v5
5d5n5
5D5v5
5G5\5
5H5R5
5ineI
5J5U5z5
5l8r8u9c:
5ntel
5P5|5
5x5~5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6@6H6P6X6`6l6t6
6 6<6T6
6"686O6
6"7]7
6#7K7
6$7+7r7y7
6$747@7d7l7t7|7
6&7+777`7
6)6D6o6
6*6>6m6}6
6,6\6
6\6b6t6
606K6s6
627d7m7v7}7
647R8
676w6
696@6G6Y6h6
6B6k6
6E6]6w6
6H6X6d6
6L6\6h6
6L6t6
6L6w6
7 7@7L7p7x7
7 797
7 8b8
7"7)787f7
7#8l8s8
7$7,747@7d7l7t7|7
7$7,747@7H7h7
7$8A8f8
7(7P7
7,828E8V8
7,8u8
7.777D7Z7
7;8d8
7+797C7e7n7
7<8c8j8
717L7g7
747=7
747X7v7
758b8z8
7EduplicatedWriteHandleWWW
7O7s7z7
7Z7n7
8 8$8(8,808<8H8`8
8 8&858;8F8K8[8`8p8u8
8 8,8L8X8x8
8!9Y9
8"8>8i8
8"9J9d9
8#878E9
8$8,888X8`8l8
8$8\8x8
8;8e8
8?8Z8
8[JDebugEngineSiteW
839:9L9g9n9
848B8H8^8w8
848P8`8l8
868M8]8
879Q9
889G9$:w:
8M9{9
8mzIScriptEventProvider
8Q8y8
8Y9k9
9 :[:~:
9 9,9P9\9h9t9
9 969;9N9a9~9
9!91969O9U9\9o9x9~9
9#:T:
9$9,949@9d9l9t9|9
9%:1:D:Y:n:}:
9%9,939I9
9&:C:f:
9(90989D9d9l9x9
9)9_9
9?9g9
9+:4:V:s:
9<:@:H:P:h:
91;d;
989T9d9p9
98t[9~
9A:^:w:
9A:W:>;D;
9B9K9|9
9f;:u
9S:`:|:0;l;
9s0tx
A script error has occurred in the remote side JavaScript:
AddAce
ADVAPI32.dll
advapi32.dll
api-ms-win-core-com-l1-1-0.dll
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
api-ms-win-crt-math-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
APPID
AppID
ATL$__a
ATL$__m
ATL$__z
ATL:%p
atlthunk.dll
AtlThunk_AllocateData
AtlThunk_DataToCode
AtlThunk_FreeData
AtlThunk_InitData
attach
attachedCountWWW
bad allocation
bad array new length
break
breakFlags
C(Ph@Q
C4Wj@
CallWindowProcW
CharNextW
Cl91t
closed
CloseHandle
CLSID
CLSID\
CoCreateInstance
CoInternetCombineUrlEx
column
commandId
CompanyName
CompareStringOrdinal
Component Categories
connect
connectW
CopySid
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
CreateEventW
CreatePipe
createPortWWL
CreateThread
CreateUri
CreateWindowExW
Cw48?
D$ PVVV
D$,WP
D$<PV
dbgsh://%d/%s
debug
DebugMessagePortx
DecodePointer
DefWindowProcW
Delete
DeleteCriticalSection
detach
DiagnosticsTap.dll
DiagnosticsTap.pdb
DispatchMessageW
DllCanUnloadNow
DllGetClassObject
DllInstall
DllRegisterServer
DllUnregisterServer
dOnConnectWWW
dsh://%d/%s
duplicatedReadHandle
DuplicateHandle
EaddEventListener
edgehtml.dll
elementAttributesSize
elementTextChildrenSize
EncodePointer
engineId
EnterCriticalSection
events
external
F12 Debugger Script Engine
F12 Developer Tools Diagnostics TAP
F12\F12Tab.dll
F12\F12Tab2.dll
F12DSEDEBUGENABLED
false
File: %s
FileDescription
FileType
FileVersion
FindAtomW
FindClose
FindFirstFileW
FindResourceExW
FindResourceW
FlushInstructionCache
ForceRemove
FreeLibrary
FtPh &
functionName
G,PVQhP
G7PVh
GetAclInformation
GetBreakFlags
GetBreakFlagsWWW
GetClassInfoExW
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetEnvironmentVariableW
GetHWND
GetLastError
GetLengthSid
GetMessageW
GetModuleFileNameW
GetModuleHandleExW
GetModuleHandleW
GetProcAddress
GetProcessHeap
GetSecurityDescriptorControl
GetSecurityDescriptorDacl
GetSecurityDescriptorGroup
GetSecurityDescriptorLength
GetSecurityDescriptorOwner
GetSecurityDescriptorSacl
GetSidLengthRequired
GetSidSubAuthority
GetSourceLineTextWWW
GetSourcePositionWWW
GetSystemTimeAsFileTime
GetThreadLocale
GetTokenInformation
GetUserDefaultLCID
GetWindowLongW
Hardware
hCreateDebuggerScriptHostAtWebApp
HeapAlloc
HeapDestroy
HeapFree
HeapReAlloc
HeapSize
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_DYN_DATA
HKEY_LOCAL_MACHINE
HKEY_PERFORMANCE_DATA
HKEY_USERS
I3M3Q3U3Y3]3a3e3s3
I9w8u
IDebugMessagePortWWWx
IDiagnosticsMessageHandler interfaceWW0
-IDiagnosticsMessageHandlerWW
iertutil.dll
ILocalDebuggeeScriptHostFactory2
ILocalDebuggeeScriptHostFactory2 interface$
IMessageDispatch
indices
Infinity
-Infinity
InitializeAcl
InitializeCriticalSection
InitializeSecurityDescriptor
InitializeSid
InitializeSListHead
InitializeWithExistingPipeWWX
Interface
InterlockedPopEntrySList
InterlockedPushEntrySList
InternalName
internalProperties
Internet Explorer
invalid hash bucket count
isAttachedWW
IsDebuggerPresent
isGetter
isNew
IsProcessorFeaturePresent
isRoot
isSetter
isSiteClosed
IsValidSid
IsWindow
ITapObjectWW
j Z_^
j%Yf;
j{Xf;
j{Xf9
j=Xf9
j0Xf9
j0Yf;
JS_DEBUG_DSH
jsonData
j'Xf;
K 99t
K(91t
K(99t
K891t
KERNEL32.dll
L$ QVVV
L$<QVP
L$HQPR
LeaveCriticalSection
LegalCopyright
length
Line: %u
list<T> too long
LoadCursorW
LoadLibraryExA
LoadLibraryExW
LoadResource
LocalDebuggeeScriptHostFactory2WX
LockResource
lstrcmpiW
MakeAbsoluteSD
MakeSelfRelativeSD
map/set<T> too long
memcmp
memcpy
memmove
memset
message
Message: %s
MessageDispatchW
method addEventListener - Add an event listener.WW6
method isEventListenerAttached - Determine if an event listener is attached to a specific event.WWE
method removeAllEventListeners - Remove all attached event listeners.W
method removeEventListener - Remove an event listener.`
Microsoft Corporation
Module
Module_Raw
msvcp_win.dll
MultiByteToWideChar
N499t
namex
NDP9NHt
NInitializeWW
NoRemove
NpFileNameWWW
nspdwSourceContext
numberValue
O,P9O0t
Object
objectId
oJ3]1"
OLEAUT32.dll
OnBreakpointHit
OnConnect
OnDetach
OnDetachX
OnExecuteScriptW
OnGetBreakFlagsResult
OnHWND
OnMessage
OnMessageWWW
OnRemoteScriptError
OpenAndReadFileFromModuleResources '%s' failed
OpenProcess
OpenProcessToken
OriginalFilename
OutputDebugStringW
partId
PathGetCharTypeW
pbstrSourceLineW,
PeekMessageW
pEngineSiteToRemoveW
pexcepinfoWW
portName
PostMessageW
postMessageW
PostQuitMessage
PostThreadMessageW
ppWebApp 
PQjeZ
PQSVW
ProductName
ProductVersion
properties
prototype
pScriptErrord
PSSSV
pToolWindowW
pulLineNumberWWW
Q$9PPt
QQQQQQQPQQQ
QQQWV
QQSVW
QQSVWj
QueryPerformanceCounter
RaiseException
ReadFile
readHandleWW
RegCloseKey
RegCreateKeyExW
RegDeleteKeyExW
RegDeleteKeyW
RegDeleteValueW
RegEnumKeyExW
RegisterClassExW
RegisterWindowMessageW
REGISTRY
RegOpenKeyExW
RegQueryInfoKeyW
RegSetValueExW
relationships
RemoteDiagnostics.js
remotescripterror
RemoveEngineSite
removeEventListenerW
Rich4
RIDebugEngineSite
rt, ccs=
rtremoveAllEventListenersW
S{OnScriptErrorWWW
sBj%V
scopes
scriptFileNameWW
SECURITY
SendMessageW
SetEvent
SetLastError
SetSecurityDescriptorDacl
SetThreadLocale
SetUnhandledExceptionFilter
SetWindowLongW
sfs+/v/+/v++/v9+/v8
SHLWAPI.dll
sizeIsApproximate
SizeofResource
Software
SSSSSSSPSSSV
stdole2.tlbWWW
StringFileInfo
StringFromGUID2
stringValue
SYSTEM
t$8hX(
t$hpA
t*h44
t.;:u
T0g0x0
t2pScriptW
t6h4)
TakeMemorySnapshot
TapObjectWWWd
targetProcessIdW
TerminateProcess
teventNameWWW
tFhD)
tIDiagnosticsScriptEngineSite,
tnj'[f;
toolUI
TpszDataW
TranslateMessage
Translation
tRemoteGetExceptionInfoWW
TypeLib
TYPELIB
u*j}Xf9
u@h4)
u[f9C
u_SSSSSSS
uiWriteHandleWWWX
ulDataCountW
ULONG_PTRWWWd
UnhandledExceptionFilter
UNKNOWN
Unknown exception
UNKNOWN relationshipinfo
Unknown remote file
UnregisterClassA
urlmon.dll
USER32.dll
UTF-16LE
UTF-8
value
VarFileInfo
vector<T> too long
VirtualAlloc
VirtualFree
VS_VERSION_INFO
VVShpS
WaitForSingleObject
winrt
wisEventListenerAttachedW
WM_F12_SITE_COMMAND
WriteFile
writeHandleWd
X[_^]
Xf9D$Xt
XpFlagsOutWWW,
Y__^[
