    f9w v$V
 http://www.microsoft.com/windows0
 Microsoft Corporation. All rights reserved.
 Microsoft Operations Puerto Rico1&0$
 Operating System
 w*;{(wC
 Windows
!]_0t
!This program cannot be run in DOS mode.
!TkjE
"1s1`2
"Microsoft Window
#Blob
#GUID
#HMDuV
#Strings
$Microsoft Ireland Operations Limited1
$SVW3
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
&go`4
&S|9a
)Microsoft Root Certificate Authority 20100
, <^w2
,JrOdk
,QAkX5Obrlz4uL4i9nB5H9t81sNLo/2AoOihko8s28Cc=0Z
,SVW3
.?AVException@cdp@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$r$brc
.edata
.gfids
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.idau
.rdata
.rdata$brc
.rdata$r$brc
.rdata$sxdata
.rdata$zzzdbg
.relu
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$mn
.text$x
.xdata$x
: :(:\:d:l:x:
:#;/;k;w;
:#;M;
:$;V;
:*:c:
:.;H;e;
:::o:
::;{;
:':5:C:Q:_:m:{:
:-:H:c:~:
:{;V<
:2:7:P:U:b:
:6;U;)<d<
:8:@:L:T:
:8:D:L:
:C:j:
:K:W:
:S;c<
:Tt3n
;";H;
;"<Z<s<
;#;1;?;M;[;i;w;
;$;,;4;P;X;`;l;t;
;&;~;
;(;0;d;l;t;
;:;];x;
;;;L;
;;<z<
;';3;>;g;
;-;c;
;@;`;
;@;j;
;\$Tt
;_^[]
;_4s(
;|$@r
;|$<r
;+<S<a<s<
;'<r<
;=;h;
;=;V;s;
;><V<
;0;8;@;\;d;l;x;
;3<j<
;4<[<i<
;8;@;H;T;\;
;8;u;
;9<s<
;9rP3
;9tn3
;C;m;
;D$0t<
;D$0u*
;D<o<
;G t(
;G(t&
;H;W;
;P8tK;P@tFj0Y
;P8u2
;t$ v
;V(wd
;x<t2
? ?,?4?h?p?x?
? ?d?x?
?#?U?
?$?,?`?h?p?|?
?$?X?`?h?t?|?
?%?W?
?(?/?5?;?
?/=KzdN
?-?c?
?-?X?
?=?]?}?
?=?y?
?0?R?
?6?O?
?7?f?
@$+L$
@.reloc
@.rsrc
@D+D$
@gcLe
[QQj Z
\$ 9^
\$(;\$<
\$@;\$8
\$49_$
^(_^[
_ 7Zj
_^[Y]
__CxxFrameHandler3
_CxxThrowException
_except_handler4_common
_f9P 
_initterm
_initterm_e
_o___std_type_info_destroy_list
_o__cexit
_o__configure_narrow_argv
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__purecall
_o__seh_filter_dll
_o_free
_o_malloc
_o_terminate
`.data
`0^0\
|$ ;D$0t)QQQ
|$$f9x 
|$,f9x 
|K;3rG
|V;;rR3
+\$ ;\$Tt
+0z1f2
+D$ PQ
+D$@RP
+D$4RP
+F,+F(
+r(+r
< =N=
<"tP<\u
<#=C=j=
<#=M=
<$<,<4<<<D<L<\<d<p<x<
<$<0<8<l<t<|<
<%=]=
<(<H<P<X<d<
<(=:=<>
<(=k=
<)=<=K=
<)=D=_=z=
<,<G<j<
</=S=t=
<?<j<
<@<H<P<`<h<
<-<c<
<=<]<}<
<=<-=
<'=6=r=
<1>n>
<2<c<
<5<_<
<7BSJBt
<a|F<z
<C<m<
<F<p<
<F<U<
<Q<h<z<
<r=0>
<t -d
= =(=\=d=l=x=
=">R?
=#>A>
=#>M>
=$=,=8=@=t=|=
=:>c>
=;L$$r
===]=}=
=-=c=
=0=8=@=H=P=\=d=|=
=0>Z>
=2=U=p=
=3=^=E>
=4=<=D=P=X=
=4>w>
=6=R=w=
=A=a=
=A=l=
=H=Y=
=N>}>
=O>3?_?
=s>c?
=ta  t
> >(>L>T>\>l>t>|>
>#?M?
>$>L>f>
>(>0>8>@>H>P>X>d>
>.>Q>|>
>??b?
>\>`>d>h>
>+>j>
>=>]>}>
>3>i>
>4?C?
>6>c>p>
>9?h?
>C>m>
>D?p?
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>I?d?
>L>`>h>p>x>
>NGdx
>P>X>`>l>t>
>S>b>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0,0L0T0`0h0
0 0@0`0
0$0`0o0
0$000T0\0d0l0t0|0
0%0a0o0
0%0N0
0(040T0\0h0
0)0M0
0)0V0y0
0/0Z0
0>0b0G3
00081
001V1w1
0123456789abcdefStartOffset
040<0D0P0p0x0
040904B0
060Y0t0
081M1j3p3
09L3Lux
0C0h0
0D0L0T0`0h0
0G1\1
0G1c1G2g2
0I1{1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1(1X1`1
1 1@1`1
1"2.2j2v2
1#2M2
1$1,141<1D1L1T1\1d1l1t1|1
1(0&0
1(10181D1d1p1
1(1c1
1(1H1T1\1t1
1(2^2
1*1D1`1{1
1,0*0
1,2;2_2t2@3`3j3
1@1o1
1>1b1{1V2
111\1
111019184142Z
1'114
111b1p1
121E1K1Q1W1]1c1i1o1
161N1
172S2
192Q2
1A1P1
1B1}1
1C1m1
1d1:2J233D3U3
1D1e1|1
1E1h1
1R2z2
1s2@3\3
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2D2d2
2!3d3
2#272A2H2S2`2f2k2u2
2#3M3
2$2,242<2D2L2T2\2d2l2t2|2
2&2@2Z2t2
2(2I2`2j2
2*2K2
2,242@2`2l2t2
2,2c2
2,343<3H3P3
2=2I2
202<2D2x2
20220913042057.585Z0
20220913051411Z
20220914051411Z0t0:
20383@3L3T3
210930182225Z
220302185137Z
220505192315Z
229879+4700220
230504192315Z0p1
230511185137Z0
232\4
2'3h3
252X2s2
261019185142Z0
262V2v2
293~3
2C2Q2
2D3v3
2K3R3
2P2X2`2l2
2V2s2
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3#3)3b3u3
3#3l3
3#4M4
3$3,343<3D3L3T3\3d3l3t3|3
3$3D3d3
3%4d4
3(3=3
3(30393?3E3K3Y3
3)3<3s324~5
3:3W3t3
3@3[3v3
3@4x436
3=485J5>:p:
300930183225Z0|1
303K3f3
333y3
343<3D3P3X3
343M3f3
3-4p4
384u4
3B3N3
3C3j3
3c3s3
3D3r3
3H5}5
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3i3y3
3i4:5b5
3T8-=
3x3L4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 6,666
4"505
4#5I5V5
4#5J5
4$4,444<4D4L4T4\4d4l4t4|4
4$40484l4t4|4
4&4b4q4
4&5H6Z6
4(4M4
4*4c4
4.8s8#:_:
4;H+7
4]4n4
4+4K4k4
4<4D4L4X4`4
40464=4E4N4a4i4t4
405W5
444<4D4P4X4
444A4T4a4
4-484]4k4~4
4-4i4
455v5
465I5
4C4m4
4m4r4
4s5A6N6^6u6
4SVW3
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5,545h5p5x5
5 6[6
5!6H6h6
5#6C7
5#6M6
5$5,545<5D5L5T5\5d5l5t5|5
5$5,585@5
5$6F6L6R6
5%5C5O5
5&5-545;5C5K5S5_5h5m5s5}5
5(6=6
5*6u6
5.00 (WinBuild.160101.0800)
5/6Q6}6
5:5E5g5
5=5I5
505T5\5d5p5x5
506b6
555N5g5
555Z5u5
5-5b5
5-5c5
5-5y5
5C5m5
5ineI
5N5e5
5ntel
5T5b5
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6(646T6\6d6l6t6
6!6]6i6
6#7M7
6$6,646<6D6L6T6\6d6l6t6|6
6$6/6R6]6
6$60686l6t6|6
6(6H6T6t6|6
6)6/656:6@6n6}6
6*7A7n7
6,7@7H7P7X7`7l7t7
6;7]7
6@7|7
6+6F6a6|6
6=8j8
6>6q6
626c6
657F7n7
6-6c6
687G7
6B6O6u6
6C6j6
6e6x6
6H6X6c6
6O7'8S8
6W7'9
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7!7+787J7T7e7y7
7!8L8s8
7#7N7e7
7#8J8
7$7,747<7D7L7T7\7d7l7t7|7
7$7X7`7h7t7|7
7(89>>>
7*7c7
7*8\8
7,7:7H7V7d7r7
7@7o:
707L7P7X7`7h7p7
708[8
737[7
737]7n7
737Y7|7
747O7j7
758\8j8
767?7H7V7_7p7z7
767Q7
7-7;7n7
7C7m7
7j9~9
7M7[7
7s839S9
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8D8T8\8d8l8t8|8
8!8J8|8
8"9P9
8#8'8h8
8#8C8c8
8#9M9
8$8,848<8D8P8X8
8$898F8T8w8
8$8D8L8X8x8
8$9_9
8&828:8@8I8S8Z8d8o8
8(8d8s8
8)8K8
8:829S9
8;8M8
8;r4w
8<9|9r:y:
80:i;1<m<
819t9
858O8m8
8-8c8
89D$@tZ
8C8l8
8L8T8\8h8p8
8O9r9
8X u'
8Y_^[
9 :/:k:z:
9 ;_;
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9x9
9 9(909<9D9x9
9 9(9H9P9X9t9|9
9 9T9\9d9p9x9
9#:M:
9$:,:4:@:H:|:
9$:7:O;
9%:P:{:
9%:Z:
9%9[9~9
9&969>9T9Y9a9n9s9{9
9.9M9m9
9':j:
9;9A9W9
9^,t3W3
9^Pt9
9{ t'
9|0Dw
9<0vz
9=9X9s9
91u,9q
91u:9q
939P:s:
949J9x9
97u,9w
9-9c9
99v59~$s
9A(vZP
9A9c9
9C$v0
9C$v1
9C$v5
9C@ud
9C9j9
9D7DsW
9D9L9T9`9
9E$t'
9E$v'
9E(t&
9E<v&
9E0v#
9E9Q9
9EHv&
9ETv#
9F$v<
9F@ud
9Fdt 
9G(v3P
9G4s'
9J:p:
9O4s*
9Q(r-
9qpv*
9t$ v
9V$v<
9w`t1
9XxtZ
AccumulateStatistics
AddRiftEntry
AMD64
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-classicprovider-l1-1-0.dll
api-ms-win-eventing-controller-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
ApplyDeltaA
ApplyDeltaB
ApplyDeltaProvidedB
ApplyDeltaW
ApplyPatch
ApplyPatchTargetBufferProvided
ApplyPatchToFileByBuffers
ApplyPayload
ApplyPostProcessTarget
ApplyPreProcessSource_AMD64
ApplyPreProcessSource_CLI4_AMD64
ApplyPreProcessSource_CLI4_ARM
ApplyPreProcessSource_CLI4_ARM64
ApplyPreProcessSource_CLI4_I386
ApplyPreProcessSource_I386
ApplyPreProcessSource_IA64
ApplyPreProcessSource_RAW
ApplyPreProcessSourcePe
ApplyPreProcessSourcePeCli4
ApplyPseudoLzxPatchTargetBufferProvided
as.,k{n?,
AsciiToT
AsciiToUnicode
Assembly
AssemblyOS
AssemblyProcessor
AssemblyRef
AssemblyRefOS
AssemblyRefProcessor
aUjR?
BaseRva
BitReadBuffer
BitReadCliMap
BitReadCliMetadata
BitReadCompositeFormat
BitReaderClose
BitReaderOpen
BitReadInt
BitReadPortableExecutableInfo
BitReadPortableExecutableInfoCli4
BitReadRiftTable
BitWriteBuffer
BitWriteCliMap
BitWriteCliMetadata
BitWriteCompositeFormat
BitWriteInt
BitWritePortableExecutableInfo
BitWritePortableExecutableInfoCli4
BitWriterClose
BitWriteRiftTable
BitWriterOpen
BlobStreamOffset
BlobStreamSize
Blocks
BSJBt
BufferListPopBack
BufferListPopFront
BufferListPushBack
BufferListPushFront
BufferSize
C Bf;
C8f9x 
C8f9x w
CalculateHash
CalculateNormalizedSourceHash
CalculatePeCheckSum
cCwD|k1
CD9Hp
CheckBuffersIdentity
CheckIntsIdentity
CheckRiftTablesIdentity
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
ClassLayout
ClearRelocations
CLI4_AMD64
CLI4_ARM
CLI4_ARM64
CLI4_I386
Cli4MapFromPes
CliMapFromPes
CliMetadata
CloseHandle
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfoCli4 ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfo ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];bitReader( PassBitReader ): input[ 3 ];targetBuffer( PassBuffer ): input[ 4 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): targetBuffer[ 0 ];preProcessBuffer( BitReadBuffer ): bitReader[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], preProcessBuffer[ 1 ], targetSize[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.apply.image", applyPreProcessSource[ 0 ];compressionRiftTable5( PassRiftTable ): applyPreProcessSource[ 1 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.apply.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.apply.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.apply.rift", compressionRiftTable8[ 0 ]; compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.apply.rift", compressionRiftTable9[ 0 ];patchBuffer( BitReadBuffer ): preProcessBuffer[ 0 ];target1( ApplyPseudoLzxPatchTargetBufferProvided ): applyPreProcessSource[ 0 ], patchBuffer[ 1 ], targetBuffer[ 0 ], compressionRiftTable9[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", target1[ 0 ];target( ApplyPostProcessTarget ): flagsInt[ 0 ], target1[ 0 ];output: patchBuffer[ 0 ], target[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfo ): targetPe[ 0 ];cliMap( CliMapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCliMap ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfo ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfoCli4 ): targetPe[ 0 ];cliMap( Cli4MapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCli4Map ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfoCli4 ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];bitWriter( PassBitWriter ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target[ 0 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];createPreProcessSourceName( Concat ): "CreatePreProcessSource_", codeMnemonic[ 0 ];createPreProcessSource( CreatePreProcessSource_RAW / createPreProcessSourceName[ 0 ] ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.create.image", createPreProcessSource[ 0 ];createPreProcessTarget( CreatePreProcessTarget ): flagsInt[ 0 ], target[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", createPreProcessTarget[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], createPreProcessSource[ 1 ], targetSize[ 0 ];checkPreProcessSourceIdentity( CheckBuffersIdentity ): createPreProcessSource[ 0 ], applyPreProcessSource[ 0 ], 0x041F04;checkCompressionRiftTableIdentity( CheckRiftTablesIdentity ): createPreProcessSource[ 2 ], applyPreProcessSource[ 1 ], 0x041F03;applyPostProcessTarget( ApplyPostProcessTarget ): flagsInt[ 0 ], createPreProcessTarget[ 0 ];checkPostProcessTargetIdentity( CheckBuffersIdentity ): target[ 0 ], applyPostProcessTarget[ 0 ], 0x041F01;writePreProcessBuffer( BitWriteBuffer ): bitWriter[ 0 ], createPreProcessSource[ 1 ];compressionRiftTable5( PassRiftTable ): createPreProcessSource[ 2 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.create.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.create.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.create.rift", compressionRiftTable8[ 0 ];compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.create.rift", compressionRiftTable9[ 0 ];create( CreatePseudoLzxPatch ): createPreProcessSource[ 0 ], createPreProcessTarget[ 0 ], flagsInt[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ], compressionRiftTable9[ 0 ];writePatch( BitWriteBuffer ): writePreProcessBuffer[ 0 ], create[ 0 ];output: writePatch[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainerCli4 / compareCodes[ 0 ] ? "TargetStubPeContainerCli4" : "TargetRealPeContainerCli4" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfoCli4 ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainer / compareCodes[ 0 ] ? "TargetStubPeContainer" : "TargetRealPeContainer" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfo ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];output( PassBuffer ): input[ 3 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearLocks( SmashLockPrefixesI386 ): clearBinding[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearLocks[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearBinding[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfo ):;cliMap( CreateEmptyCliMap ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfoCli4 ):;cliMap( CreateEmptyCli4Map ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flagsInt( InputSharedInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];preProcessBuffer( InputSharedBuffer ): input[ 3 ];targetSize( InputSharedInt ): input[ 4 ];riftTable( CreateEmptyRiftTable ):;compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], compressionRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];targetCode( InputSharedInt ): input[ 1 ];flagsInt( InputSharedInt): input[ 2 ];source( PassBuffer ): input[ 3 ];target( InputSharedBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], "", compressionRiftTable[ 0 ];
CompanyName
CompareInts
CompositeFormat
CompressionRiftTableFromCli4Map
CompressionRiftTableFromCliMap
Concat
Constant
ControlTraceW
CopyBitReader
CopyBuffer
CopyBufferList
CopyCliMap
CopyCliMetadata
CopyCompositeFormat
CopyIniReader
CopyInt
CopyPe
CopyPortableExecutableInfo
CopyRiftTable
CreateBasicBlockRiftTable
CreateBuffer
CreateCodeFlagsPatch
CreateCompressionRiftTable
CreateDefaultCompositeFormat
CreateDeltaA
CreateDeltaB
CreateDeltaW
CreateEmptyBufferList
CreateEmptyCli4Map
CreateEmptyCli4Metadata
CreateEmptyCliMap
CreateEmptyCliMetadata
CreateEmptyPortableExecutableInfo
CreateEmptyPortableExecutableInfoCli4
CreateEmptyRiftTable
CreateFileA
CreateFileW
CreateHintBuffer
CreateOptimalCompositeFormat
CreatePatch
CreatePayload
CreatePreProcessSource_AMD64
CreatePreProcessSource_CLI4_AMD64
CreatePreProcessSource_CLI4_ARM
CreatePreProcessSource_CLI4_ARM64
CreatePreProcessSource_CLI4_I386
CreatePreProcessSource_I386
CreatePreProcessSource_IA64
CreatePreProcessSource_RAW
CreatePreProcessSourcePe
CreatePreProcessSourcePeCli4
CreatePreProcessTarget
CreatePseudoLzxPatch
CreateRiftUsageBuffer
cRg!m
CryptAcquireContextA
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CustomAttribute
CustomAttributeType
D$ ;D$`
D$ 9\$
D$ PQ
D$ PS
D$ PV
D$ Qj
D$$9D$(
D$$PR
D$(;D$,
D$(PQ
D$(t"
D$(u2
D$,;\$,
D$,;D$0u
D$@;y
D$@PW
D$\PW
D$<Q@
D$0;D$,u@
D$4t/
D$4WP
D$8)D$,
D$8;D$
D$8;D$<
D$8;D$<u
D$8+T$@
D$8Q@
D$DPQ
D$DPWh
D$Hu[
D$PPQ
D$pSV
D7\_^[]
DebugWriteFile
DebugWriteFileCompositeFormat
DebugWriteFilePe
DebugWriteFileRiftTable
DeclSecurity
Decompress
DeleteCriticalSection
DeltaFree
DeltaNormalizeProvidedB
DestroyEmptyBufferList
DetermineFileType
DSVWj
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
emptyRiftTable( CreateEmptyRiftTable ):;riftTable0( RiftTableFromHeaders ): input[ 0 ], emptyRiftTable[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable0( DebugWriteFileRiftTable ): "pes0.create.rift", riftTable0[ 0 ];riftTable1( RiftTableFromImports ): input[ 0 ], riftTable0[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable1( DebugWriteFileRiftTable ): "pes1.create.rift", riftTable1[ 0 ];riftTable2( RiftTableFromExports ): input[ 0 ], riftTable1[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable2( DebugWriteFileRiftTable ): "pes2.create.rift", riftTable2[ 0 ];riftTable3( RiftTableFromResources ): input[ 0 ], riftTable2[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable3( DebugWriteFileRiftTable ): "pes3.create.rift", riftTable3[ 0 ];riftTable4( RiftTableFromPdatas ): input[ 0 ], riftTable3[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable4( DebugWriteFileRiftTable ): "pes4.create.rift", riftTable4[ 0 ];output: riftTable4[ 0 ];
ENCLog
ENCMap
EnterCriticalSection
Event
EventMap
EventPtr
ExportedType
ExtendBuffer
ExtractCli4Metadata
ExtractCliMetadata
ExtractImageOffsetToRva
ExtractRvaToImageOffset
F _^[
F(_^]
f9A v
f9A w(
f9F v
f9G vLk
f9H vi
f9J vl
F9w(w
f9X v@
fg:SM
Field
FieldLayout
FieldMarshal
FieldPtr
FieldRVA
FileDescription
fileName( InputSharedBuffer ): input[ 0 ];buffer( InputSharedBuffer ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];compositeFormat( InputSharedCompositeFormat ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];pe( InputSharedPe ): input[ 1 ]; 
fileName( InputSharedBuffer ): input[ 0 ];riftTable( InputSharedRiftTable ): input[ 1 ];
fileTypeSet( CopyInt ): input[ 0 ];flags( CopyInt ): input[ 1 ];options( IniReaderFromBuffer ): input[ 2 ];source( PassBuffer ): input[ 3 ];code( DetermineFileType ): fileTypeSet[ 0 ], source[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];normalizeCodeSourceName( Concat ): "NormalizeCodeSource_", codeMnemonic[ 0 ];normalizeCodeSource( NormalizeCodeSource_RAW / normalizeCodeSourceName[ 0 ] ): code[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];output: normalizeCodeSource[ 0 ];
FileVersion
FL+F0
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PostProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PreProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 11 ] ? "RiftTransformDisasmIa64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 12 ] ? "RiftTransformPdataIa64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 19 ] ? "RiftTransformDisasmARM" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 20 ] ? "RiftTransformPdataARM" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 23 ] ? "RiftTransformDisasmARM64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 24 ] ? "RiftTransformPdataARM64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flagsInt( InputSharedInt ): input[ 0 ];output( RiftTransform ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];
FreeLibrary
full( CopyBuffer ): input[ 0 ];asciiPatchSignature( TToAscii ): "PA30";asciiPatchSignatureSize( BufferSize ): asciiPatchSignature[ 0 ];signature( Unconcat ): full[ 0 ], asciiPatchSignatureSize[ 0 ];checkSignature( CheckBuffersIdentity ): signature[ 0 ], asciiPatchSignature[ 0 ], 0x044601;intFixedBuffer( IntToFixedBuffer ): 0;intFixedBufferSize( BufferSize ): intFixedBuffer[ 0 ];fileTimeBuffer( Unconcat ): signature[ 1 ], intFixedBufferSize[ 0 ];fileTime( IntFromFixedBuffer ): fileTimeBuffer[ 0 ];bitReader( BitReaderOpen ): fileTimeBuffer[ 1 ];version( BitReadInt ): bitReader[ 0 ];code( BitReadInt ): version[ 0 ];flagsInt( BitReadInt ): code[ 0 ];targetSize( BitReadInt ): flagsInt[ 0 ];hashAlgId( BitReadInt ): targetSize[ 0 ];hash( BitReadBuffer ): hashAlgId[ 0 ];output: hash[ 0 ], version[ 1 ], code[ 1 ], flagsInt[ 1 ], targetSize[ 1 ], fileTime[ 0 ], hashAlgId[ 1 ], hash[ 1 ];
G(_^]
G8f9H vTV
G8Ff9p w
G9|$,
GDC9Xpw
GenericParam
GenericParamConstraint
GetBits
GetCheckSum
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDeltaInfoA
GetDeltaInfoB
GetDeltaInfoW
GetDeltaSignatureA
GetDeltaSignatureB
GetDeltaSignatureW
GetFileSize
GetFileTime
GetFileTypeMnemonic
GetGlobalPointer
GetImageBase
GetLastError
GetPortableExecutableInfo
GetPortableExecutableInfoCli4
GetProcAddress
GetProcessHeap
GetSystemTime
GetSystemTimeAsFileTime
GetTimeStamp
GetTraceEnableFlags
GetTraceEnableLevel
GetTraceLoggerHandle
GlobalPointer
GuidStreamOffset
GuidStreamSize
H$+H 
H0S0x0
HasConstant
HasCustomAttribute
HasDeclSecurity
HasFieldMarshal
HasSemantic
HeapAlloc
HeapFree
HeapReAlloc
HEX( 
I0G1-0+
ImageBase
Implementation
ImplMap
IniReaderFromBuffer
InitializeCriticalSection
InitializeSListHead
input
InputExclusiveBitReader
InputExclusiveBitWriter
InputExclusiveBuffer
InputExclusiveBufferList
InputExclusiveCliMap
InputExclusiveCliMetadata
InputExclusiveCompositeFormat
InputExclusiveIniReader
InputExclusiveInt
InputExclusivePe
InputExclusivePortableExecutableInfo
InputExclusiveRiftTable
InputSharedBitReader
InputSharedBitWriter
InputSharedBuffer
InputSharedBufferList
InputSharedCliMap
InputSharedCliMetadata
InputSharedCompositeFormat
InputSharedIniReader
InputSharedInt
InputSharedPe
InputSharedPortableExecutableInfo
InputSharedRiftTable
InterfaceImpl
InternalName
IntFromFixedBuffer
IntToFixedBuffer
IsDebuggerPresent
IsProcessorFeaturePresent
IX+t$
j Z9V(rE
j!h,M
j"hPu
j%hpM
j&hTQ
J>f;O
jphxN
jXYj@3
K$WPWV
L$ 99
L$ 9X
L$ SW
L$$^3
L$$9F
L$$tG
L$(9L$
L$(QWR
L$,+Q
L$|_^[3
L$<^3
L$0;r
L3Du+;
LeaveCriticalSection
LegalCopyright
LoadLibraryExA
LongBlobStream
LongGuidStream
LongStringsStream
m<&8cx
M0K0I
ManifestResource
MarkNonExe
MarkNonExeCli4
MemberForwarded
MemberRef
MemberRefParent
memcmp
memcpy
memmove
memset
Method
MethodDefOrRef
MethodImpl
MethodPtr
MethodSemantics
MethodSpec
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1)0'
Microsoft Corporation1.0,
Microsoft Corporation1200
Microsoft Patch Engine
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
MinBuffer
Module
ModuleRef
msdelta.dll
msdelta.pdb
mspatcha.dll
MultiplyRiftTables
N0L0J
NestedClass
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
NL+N0
NormalizeCodeSource_AMD64
NormalizeCodeSource_CLI4_AMD64
NormalizeCodeSource_CLI4_ARM
NormalizeCodeSource_CLI4_ARM64
NormalizeCodeSource_CLI4_I386
NormalizeCodeSource_I386
NormalizeCodeSource_IA64
NormalizeCodeSource_RAW
NormalizeSource
O0M0K
oc  t
OL+O0
OptimalSegments
OR!D?
OriginalFilename
output
OutputBitReader
OutputBitWriter
OutputBuffer
OutputBufferList
OutputCompositeFormat
OutputIniReader
OutputInt
OutputPe
OutputPortableExecutableInfo
OutputRiftTable
Param
ParamPtr
PassBitReader
PassBitWriter
PassBuffer
PassBufferList
PassCliMap
PassCliMetadata
PassCompositeFormat
PassIniReader
PassInt
PassPe
PassPortableExecutableInfo
PassRiftTable
pe( PassPe ): input[ 0 ];hintMap( PassBuffer ): input[ 1 ];riftTable( InputSharedRiftTable ): input[ 2 ];riftUsage( PassBuffer ): input[ 3 ];cliMap( InputSharedCliMap ): input[ 4 ];targetInfo( InputSharedPortableExecutableInfo ): input[ 5 ];transformFlag( InputSharedInt ): input[ 6 ];relative( PassRiftTable ): input[ 7 ];output: pe[ 0 ], hintMap[ 0 ], riftUsage[ 0 ], relative[ 0 ];
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
PortableExecutableFromBuffer
PortableExecutableInfo
PortableExecutableInfoFromBuffer
PortableExecutableToBuffer
PostProcessI386E8
PQQSVW
PQSVW
PreProcessI386E8
ProductName
ProductVersion
Property
PropertyMap
PropertyPtr
PseudoLzxCompress
PseudoLzxCompressStatisticsOnly
q\Q17
Qkkbal
QQj Z
QQSVW
QQSVW3
QQVWj
QSVW3
QSVWj
QSVWj=
QueryPerformanceCounter
QVWj0
QVWj8
R!s4Z
r(+Z(
ReadFile
Redmond1
ReduceRiftTable
RegisterTraceGuidsW
RemoveUnusedRiftEntries
ResetCompositeFormatStatistics
ResolutionScope
ReverseRiftTable
RiftTable
RiftTableFromExports
RiftTableFromHeaders
RiftTableFromImports
RiftTableFromIniSection
RiftTableFromPdatas
RiftTableFromPes
RiftTableFromPsyms
RiftTableFromResources
RiftTableMap
RiftTransform
RiftTransform_AMD64
RiftTransform_CLI4_AMD64
RiftTransform_CLI4_ARM
RiftTransform_CLI4_ARM64
RiftTransform_CLI4_I386
RiftTransform_I386
RiftTransform_IA64
RiftTransformCli4Disasm
RiftTransformCli4Metadata
RiftTransformCliDisasm
RiftTransformCliMetadata
RiftTransformDisasmAmd64
RiftTransformDisasmARM
RiftTransformDisasmARM64
RiftTransformDisasmIa64
RiftTransformExports
RiftTransformHeaders
RiftTransformImports
RiftTransformPdataAmd64
RiftTransformPdataARM
RiftTransformPdataARM64
RiftTransformPdataIa64
RiftTransformRelativeCallsI386
RiftTransformRelativeJmpsI386
RiftTransformRelocations
RiftTransformRelocationsI386
RiftTransformResources
RiftTransformTemplate
RvaToImageOffset
Segments
SetCheckSum
SetEndOfFile
SetFilePointer
SetFileTime
SetGlobalPointer
SetImageBase
SetLastError
SetTimeStamp
SetUnhandledExceptionFilter
SkipUnused
SmashLockPrefixesI386
source( PassBuffer ): input[ 0 ];bitReader( BitReaderOpen ): input[ 1 ];target0( PassBuffer ): input[ 2 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target0[ 0 ];baseRiftTable( BitReadRiftTable ): bitReader[ 0 ];riftTable( SumRiftTables ): baseRiftTable[ 1 ], input[ 3 ], 0;format( BitReadCompositeFormat ): baseRiftTable[ 0 ];debugWriteCompositeFormat( DebugWriteFileCompositeFormat ): "compositeFormat.apply.txt", format[ 1 ];bufferList0( CreateEmptyBufferList ):;bufferList1( BufferListPushBack ): bufferList0[ 0 ], source[ 0 ];bufferList2( BufferListPushBack ): bufferList1[ 0 ], target0[ 0 ];decompress( Decompress ): format[ 0 ], format[ 1 ], bufferList2[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], -1;target1( BufferListPopBack ): decompress[ 1 ];closeBitReader( BitReaderClose ): decompress[ 0 ], 1;output: target1[ 1 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ];bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];targetBuffer( PassBuffer ): input[ 2 ];split( SplitPatchHeader ): patch[ 0 ];targetBufferSize( BufferSize ): targetBuffer[ 0 ];checkTargetSize( CheckIntsIdentity ): split[ 4 ], targetBufferSize[ 0 ], 0x040303;apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ];bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
sourceSize( BufferSize ): input[ 0 ];targetSize( BufferSize ): input[ 1 ];fullBuffer( Concat ): input[ 0 ], input[ 1 ];baseRiftTable( CreateCompressionRiftTable ): fullBuffer[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ];riftTable( SumRiftTables ): baseRiftTable[ 0 ], input[ 6 ], 0;defaultFormat( CreateDefaultCompositeFormat ):;defaultBitWriter( BitWriterOpen ):;writeBaseRiftTableDefault( BitWriteRiftTable ): defaultBitWriter[ 0 ], baseRiftTable[ 0 ];writeDefaultFormat( BitWriteCompositeFormat ): writeBaseRiftTableDefault[ 0 ], defaultFormat[ 0 ];defaultFormatWithStatistics( ResetCompositeFormatStatistics ): defaultFormat[ 0 ], 1;defaultCompress( PseudoLzxCompress ): defaultFormatWithStatistics[ 0 ], fullBuffer[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], writeDefaultFormat[ 0 ];defaultBuffer( BitWriterClose ): defaultCompress[ 2 ];optimalFormat( CreateOptimalCompositeFormat ): defaultCompress[ 0 ];optimalBitWriter( BitWriterOpen ):;writeBaseRiftTableOptimal( BitWriteRiftTable ): optimalBitWriter[ 0 ], baseRiftTable[ 0 ];writeOptimalFormat( BitWriteCompositeFormat ): writeBaseRiftTableOptimal[ 0 ], optimalFormat[ 1 ];defaultBitReader( BitReaderOpen ): defaultBuffer[ 0 ];copyBaseRiftTable( BitReadRiftTable ): defaultBitReader[ 0 ];copyDefaultFormat( BitReadCompositeFormat ): copyBaseRiftTable[ 0 ];optimalTranslate( TranslateCompression ): copyDefaultFormat[ 0 ], writeOptimalFormat[ 0 ], copyDefaultFormat[ 1 ], optimalFormat[ 1 ], sourceSize[ 0 ], defaultCompress[ 1 ];closeDefaultBitReader( BitReaderClose ): optimalTranslate[ 0 ], 1;optimalBuffer( BitWriterClose ): optimalTranslate[ 1 ];output( MinBuffer ): defaultBuffer[ 0 ], optimalBuffer[ 0 ];
SplitPatchHeader
SplitPortableExecutableInfo
StandAloneSig
StreamHeadersOffset
StreamsNumber
StringFileInfo
StringsStreamOffset
StringsStreamSize
SumRiftTables
Symbols
SystemTimeToFileTime
t$ ;D$0t)QQQ
t$ 9\$
T$ 9Z$
T$ j@
t$$90uL
t$(9^
t$(9p
T$<;B
T$<RQ
T$<Wh
T$49P$
T$49QX
t$L;~
t,97u(
t@<@u<
t+j Z
t1SVH
Table0x2D
Table0x2E
Table0x2F
Table0x30
Table0x31
Table0x32
Table0x33
Table0x34
Table0x35
Table0x36
Table0x37
Table0x38
Table0x39
Table0x3A
Table0x3B
Table0x3C
Table0x3D
Table0x3E
Table0x3F
TablesStreamOffset
TablesStreamSize
TargetRealPeContainer
TargetRealPeContainerCli4
TargetStubPeContainer
TargetStubPeContainerCli4
tBFA;
TerminateProcess
TestApplyPatchToFileByBuffers
Thales TSS ESN:F87A-E374-D7B91%0#
TimeStamp
TlP0X
TraceEvent
TranslateCompression
Translation
tT9D$8vN
TToAscii
TToUnicode
tyB@;
TypeDef
TypeDefOrRef
TypeOrMethodDef
TypeRef
TypeSpec
tYSVj)
u$@;E
u(F;u
u)9Q4u$9QPu
u,9Y$tT
u/9O(
u/9Y,tW
u/9Y<tW
u/9Y4tW
u/9YDtG
u{;|$
U0S0Q
u6jdY
u9hX@
uA95\@
ub9Q u]9Q$uX9Q(uS9Q,uN9Q0uI9Q4uD9Q8u?9Q<u:9Q@u59QDu08QHu+8QIu&8QJu!9QPu
uF9C8
uGjdY
uI9F8
UnbindPortableExecutable
Unconcat
UnhandledExceptionFilter
UnicodeToAscii
UnicodeToT
UnregisterTraceGuids
uS95T@
UsStreamOffset
UsStreamSize
uyL7j
V;P(w#
v~Bpd
VarFileInfo
version( CopyInt ): input[ 0 ];code( CopyInt ): input[ 1 ];targetCode( CopyInt ): input[ 2 ];flagsInt( CopyInt ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];fileTime( CopyInt ): input[ 9 ];hashAlgId( CopyInt ): input[ 10 ];asciiPatchSignature( TToAscii ): "PA30";fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], target[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];targetSize( BufferSize ): target[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeTargetSize( BitWriteInt ): writeFlagsInt[ 0 ], targetSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeTargetSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], hash[ 0 ];create( CreatePayload ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], writeHash[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];created( BitWriterClose ): create[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];apply( ApplyPatch ): source[ 0 ], patch[ 0 ];testApply( CheckBuffersIdentity ): target[ 0 ], apply[ 0 ], 0x041B01;output: patch[ 0 ];
version( CopyInt ): input[ 0 ];hashAlgId( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];flags( CopyInt ): 0;options( PassBuffer ): "";normalized( NormalizeSource ): version[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], normalized[ 0 ];output: hash[ 0 ];
VS_VERSION_INFO
w#_^3
W,_^[
W93t3
Washington1
Wj h0
Wj h0N
Wj h0Q
Wj!h`
Wj$h0
wn>Jj
wPj@XP
wrap( ApplyPreProcessSourcePe ):;
wrap( ApplyPreProcessSourcePeCli4 ):;
wrap( AsciiToUnicode ):;
wrap( CopyBuffer ):;
wrap( CreatePreProcessSourcePe ):;
wrap( CreatePreProcessSourcePeCli4 ):;
wrap( NormalizeCodeSource_AMD64 ):;
wrap( NormalizeCodeSource_I386 ):;
wrap( UnicodeToAscii ):;
WRich
WriteFile
WWPSR
WXj@^
X0V0T
xSu$W
y#'>K
Y__^[
z, rK3
Z9SDs
Z9V(s
ZnmCDS
