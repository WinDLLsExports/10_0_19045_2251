        H
 ;T$Lu
 A^_^
 A^A\_
 A^A\_H
 A_A]A\_^
 A_A^^
 A_A^_
 A_A^_^]
 A_A^A\
 A_A^A\_^
 A_A^A]
 A_A^A]A\_
 A_A^A]A\_^]
 A_A^A]A\_H
 H3E H3E
 http://www.microsoft.com/windows0
 L9}Pw
 L9eHw
 Microsoft Corporation. All rights reserved.
 Microsoft Operations Puerto Rico1&0$
 Operating System
 Windows
!t$ L
!This program cannot be run in DOS mode.
"Microsoft Window
#Blob
#Blou
#GUID
#GUIu
#Strings
#StringsH+
$`2X`F
$Microsoft Ireland Operations Limited1
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
(|$PI
(D$@f
)D$0L
)Microsoft Root Certificate Authority 20100
,XJ/AF4H/APSeApDaxIuu8TFZyYJiGTwiK1txFZaUf60=0Z
.?AVException@cdp@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$r$brc
.edata
.gehcont
.gfids
.idata  H
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zzzdbg
.reloc  H;
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$mn
.text$mn$00
.text$x
.xdata
.xdata$x
:NULLuTH
;~hs-H
@.data
@.reloc
@.rsrc
@8<0u
@8q(u*A
@A\_[
@A^_]
@A^_^
@A^_^][
@A_A]A\_^][
@A_A^_
@A_A^_^]
@A_A^A\
@A_A^A\_^
@A_A^A]A\_^[
@A_A^A]A\_^]
@H9y(w
@SAVAWH
@SUVWATAUAVAWH
@SUVWAVH
@SVWATAUAVAWH
@SVWATAUAWH
@SVWAVAWH
@SVWH
@SWATH
@UATH
@UAWH
@uiL9
@USVWATAUAVAWH
@UVAUAWH
@UVWATAUAVAWH
@UVWAUAVH
@UVWAVAWH
@UVWH
@UWAVH
@VWATAUAVH
@VWATAVAWH
@VWAUAVAWH
@VWAVH
@w@E3
@wAE3
@WAVAWH
\$ A;
\$ UH
\$(H;
\$@D;
\$@E3
\$`L;
\$0H;
\$pL;
\$TD;
]`+|$`
__C_specific_handler
__CxxFrameHandler3
_CxxThrowException
_initterm
_initterm_e
_o___std_type_info_destroy_list
_o__cexit
_o__configure_narrow_argv
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__purecall
_o__seh_filter_dll
_o_free
_o_log
_o_malloc
_o_terminate
`.rdata
`2Dk\
`A^_^
`A_A^A]A\_^]
{#vb{
{@D8c9
|$ ATAVAWA
|$ AVH
|$ E3
|$ H;
|$ M+
|$ UATAUAVAWH
|$ UAVAWH
|$ UH
|$(A^
|$@A_A^A]A\
|$8A_A^A\
|$HD;
|$PD;
|hK,_
+T$ t
<,t(A
<,t)A
<,t*A
<,u+I
<,ulH
<@u&D
<@u[A
<6BSJB
<9weI
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>NULLu
0123456789abcdefStartOffset
040904B0
0A^_^
0A^A\_^]
0A^A]_^]
0A^A]A\_^
0A_A]A\_^
0A_A^_
0A_A^_^]
0A_A^A\
0A_A^A\_^
0A_A^A]
0A_A^A]_^
0A_A^A]A\]
0A_A^A]A\_
0A_A^A]A\_^]
1(0&0
1/0-0
1<"t <&~
100701213655Z
111019184142Z
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
201215212914Z
20211013204018Z
20211014034359.654Z0
20211014204018Z0w0=
210114190220Z
211202212914Z0p1
220411190220Z0
229879+4633440
250701214655Z0|1
261019185142Z0
3D+s@L
5.00 (WinBuild.160101.0800)
5x/<C
6"cN"
7A+B +
8A t)A
8A^_^[
8A_A^A]A\_^][
8H9Q(v
8H9QPv
8I;6taH
8PA19
9{4ujD
9{Du:D
9{DuRD
9{HrEL
9Alt8D
9D>tr
9GXs(A
9OXs(A
9Q(rcE3
A f;P(
A fD;@(u
A#A0M
A(f9B(u
A(L;B(u"H
A@H9A8u
A^_^[
A_A\[
A_A^[
A_A^]
A_A^]H
A_A^_
A_A^_^[
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
A+A<A
A8wLD
A8wMD
A8wND
A97v.
A9HDs
A9XDs
AccumulateStatistics
AddRiftEntry
AMD64
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-classicprovider-l1-1-0.dll
api-ms-win-eventing-controller-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
ApplyDeltaA
ApplyDeltaB
ApplyDeltaProvidedB
ApplyDeltaW
ApplyPatch
ApplyPatchTargetBufferProvided
ApplyPatchToFileByBuffers
ApplyPayload
ApplyPostProcessTarget
ApplyPreProcessSource_AMD64
ApplyPreProcessSource_CLI4_AMD64
ApplyPreProcessSource_CLI4_ARM
ApplyPreProcessSource_CLI4_ARM64
ApplyPreProcessSource_CLI4_I386
ApplyPreProcessSource_I386
ApplyPreProcessSource_IA64
ApplyPreProcessSource_RAW
ApplyPreProcessSourcePe
ApplyPreProcessSourcePeCli4
ApplyPseudoLzxPatchTargetBufferProvided
AsciiToT
AsciiToUnicode
Assembly
AssemblyOS
AssemblyProcessor
AssemblyRef
AssemblyRefOS
AssemblyRefProcessor
ATAVAWH
AUAVAWH
B fD9p8
B9t18L
BaseRva
BitReadBuffer
BitReadCliMap
BitReadCliMetadata
BitReadCompositeFormat
BitReaderClose
BitReaderOpen
BitReadInt
BitReadPortableExecutableInfo
BitReadPortableExecutableInfoCli4
BitReadRiftTable
BitWriteBuffer
BitWriteCliMap
BitWriteCliMetadata
BitWriteCompositeFormat
BitWriteInt
BitWritePortableExecutableInfo
BitWritePortableExecutableInfoCli4
BitWriterClose
BitWriteRiftTable
BitWriterOpen
BlobStreamOffset
BlobStreamSize
Blocks
BufferListPopBack
BufferListPopFront
BufferListPushBack
BufferListPushFront
BufferSize
C @8p8
C H9C
C L9c
C@H9C8t*A
C@I9C8tDH
C0H9{(v
C0u9H
C8H+C(H
C94(t
CalculateHash
CalculateNormalizedSourceHash
CalculatePeCheckSum
CheckBuffersIdentity
CheckIntsIdentity
CheckRiftTablesIdentity
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
ClassLayout
ClearRelocations
CLI4_AMD64
CLI4_ARM
CLI4_ARM64
CLI4_I386
Cli4MapFromPes
CliMapFromPes
CliMetadata
CloseHandle
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfoCli4 ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfo ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];bitReader( PassBitReader ): input[ 3 ];targetBuffer( PassBuffer ): input[ 4 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): targetBuffer[ 0 ];preProcessBuffer( BitReadBuffer ): bitReader[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], preProcessBuffer[ 1 ], targetSize[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.apply.image", applyPreProcessSource[ 0 ];compressionRiftTable5( PassRiftTable ): applyPreProcessSource[ 1 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.apply.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.apply.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.apply.rift", compressionRiftTable8[ 0 ]; compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.apply.rift", compressionRiftTable9[ 0 ];patchBuffer( BitReadBuffer ): preProcessBuffer[ 0 ];target1( ApplyPseudoLzxPatchTargetBufferProvided ): applyPreProcessSource[ 0 ], patchBuffer[ 1 ], targetBuffer[ 0 ], compressionRiftTable9[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", target1[ 0 ];target( ApplyPostProcessTarget ): flagsInt[ 0 ], target1[ 0 ];output: patchBuffer[ 0 ], target[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfo ): targetPe[ 0 ];cliMap( CliMapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCliMap ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfo ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfoCli4 ): targetPe[ 0 ];cliMap( Cli4MapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCli4Map ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfoCli4 ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];bitWriter( PassBitWriter ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target[ 0 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];createPreProcessSourceName( Concat ): "CreatePreProcessSource_", codeMnemonic[ 0 ];createPreProcessSource( CreatePreProcessSource_RAW / createPreProcessSourceName[ 0 ] ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.create.image", createPreProcessSource[ 0 ];createPreProcessTarget( CreatePreProcessTarget ): flagsInt[ 0 ], target[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", createPreProcessTarget[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], createPreProcessSource[ 1 ], targetSize[ 0 ];checkPreProcessSourceIdentity( CheckBuffersIdentity ): createPreProcessSource[ 0 ], applyPreProcessSource[ 0 ], 0x041F04;checkCompressionRiftTableIdentity( CheckRiftTablesIdentity ): createPreProcessSource[ 2 ], applyPreProcessSource[ 1 ], 0x041F03;applyPostProcessTarget( ApplyPostProcessTarget ): flagsInt[ 0 ], createPreProcessTarget[ 0 ];checkPostProcessTargetIdentity( CheckBuffersIdentity ): target[ 0 ], applyPostProcessTarget[ 0 ], 0x041F01;writePreProcessBuffer( BitWriteBuffer ): bitWriter[ 0 ], createPreProcessSource[ 1 ];compressionRiftTable5( PassRiftTable ): createPreProcessSource[ 2 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.create.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.create.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.create.rift", compressionRiftTable8[ 0 ];compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.create.rift", compressionRiftTable9[ 0 ];create( CreatePseudoLzxPatch ): createPreProcessSource[ 0 ], createPreProcessTarget[ 0 ], flagsInt[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ], compressionRiftTable9[ 0 ];writePatch( BitWriteBuffer ): writePreProcessBuffer[ 0 ], create[ 0 ];output: writePatch[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainerCli4 / compareCodes[ 0 ] ? "TargetStubPeContainerCli4" : "TargetRealPeContainerCli4" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfoCli4 ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainer / compareCodes[ 0 ] ? "TargetStubPeContainer" : "TargetRealPeContainer" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfo ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];output( PassBuffer ): input[ 3 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearLocks( SmashLockPrefixesI386 ): clearBinding[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearLocks[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearBinding[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfo ):;cliMap( CreateEmptyCliMap ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfoCli4 ):;cliMap( CreateEmptyCli4Map ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flagsInt( InputSharedInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];preProcessBuffer( InputSharedBuffer ): input[ 3 ];targetSize( InputSharedInt ): input[ 4 ];riftTable( CreateEmptyRiftTable ):;compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], compressionRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];targetCode( InputSharedInt ): input[ 1 ];flagsInt( InputSharedInt): input[ 2 ];source( PassBuffer ): input[ 3 ];target( InputSharedBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], "", compressionRiftTable[ 0 ];
CompanyName
CompareInts
CompositeFormat
CompressionRiftTableFromCli4Map
CompressionRiftTableFromCliMap
Concat
Constant
ControlTraceW
CopyBitReader
CopyBuffer
CopyBufferList
CopyCliMap
CopyCliMetadata
CopyCompositeFormat
CopyIniReader
CopyInt
CopyPe
CopyPortableExecutableInfo
CopyRiftTable
CPH9p
CreateBasicBlockRiftTable
CreateBuffer
CreateCodeFlagsPatch
CreateCompressionRiftTable
CreateDefaultCompositeFormat
CreateDeltaA
CreateDeltaB
CreateDeltaW
CreateEmptyBufferList
CreateEmptyCli4Map
CreateEmptyCli4Metadata
CreateEmptyCliMap
CreateEmptyCliMetadata
CreateEmptyPortableExecutableInfo
CreateEmptyPortableExecutableInfoCli4
CreateEmptyRiftTable
CreateFileA
CreateFileW
CreateHintBuffer
CreateOptimalCompositeFormat
CreatePatch
CreatePayload
CreatePreProcessSource_AMD64
CreatePreProcessSource_CLI4_AMD64
CreatePreProcessSource_CLI4_ARM
CreatePreProcessSource_CLI4_ARM64
CreatePreProcessSource_CLI4_I386
CreatePreProcessSource_I386
CreatePreProcessSource_IA64
CreatePreProcessSource_RAW
CreatePreProcessSourcePe
CreatePreProcessSourcePeCli4
CreatePreProcessTarget
CreatePseudoLzxPatch
CreateRiftUsageBuffer
CryptAcquireContextA
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CustomAttribute
CustomAttributeType
Cx@8q
D#K0L
D$ E3
d$ E3
D$ M+
D$@E+
D$@E3
D$@H+
D$@H9
d$`L9g
D$0!T$8
D$0D;
D$0E3
D$0H;
D$0M;
D$8E3
D$8H9=T
D$8H9P
D$AL+
D$AM+
D$h8P
D$HD9L$Pv
D$HE3
D$HH9D$@
D$HH9D$@t
D$HH9D$@u*A
D$hH9X
D$HL;<
D$hL9P
D$P;D$Xu
D$PE3
D$pE3
D$PE3
D$pH9D$h
D$PH9D$HtnL
D$PH9D$HtPH
D$XE3
D$XH9D$`
D$xL!l$xH
D$XL;
D;egt(A
D;eot(A
D;uPv>A
D;uPw
D+\$8E
D+I@H
D9{pvv
D98tPH
D98tyH
D9L$Lv)
D9xpvIH
D9YXtO
DebugWriteFile
DebugWriteFileCompositeFormat
DebugWriteFilePe
DebugWriteFileRiftTable
DeclSecurity
Decompress
DeleteCriticalSection
DeltaFree
DeltaNormalizeProvidedB
DestroyEmptyBufferList
DetermineFileType
E+H A+
E+H D+
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
emptyRiftTable( CreateEmptyRiftTable ):;riftTable0( RiftTableFromHeaders ): input[ 0 ], emptyRiftTable[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable0( DebugWriteFileRiftTable ): "pes0.create.rift", riftTable0[ 0 ];riftTable1( RiftTableFromImports ): input[ 0 ], riftTable0[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable1( DebugWriteFileRiftTable ): "pes1.create.rift", riftTable1[ 0 ];riftTable2( RiftTableFromExports ): input[ 0 ], riftTable1[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable2( DebugWriteFileRiftTable ): "pes2.create.rift", riftTable2[ 0 ];riftTable3( RiftTableFromResources ): input[ 0 ], riftTable2[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable3( DebugWriteFileRiftTable ): "pes3.create.rift", riftTable3[ 0 ];riftTable4( RiftTableFromPdatas ): input[ 0 ], riftTable3[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable4( DebugWriteFileRiftTable ): "pes4.create.rift", riftTable4[ 0 ];output: riftTable4[ 0 ];
ENCLog
ENCMap
EnterCriticalSection
ET9MH
Event
EventMap
EventPtr
ExportedType
ExtendBuffer
ExtractCli4Metadata
ExtractCliMetadata
ExtractImageOffsetToRva
ExtractRvaToImageOffset
F D8x
F L9d
f;A(t*A
f;H(t-
f;H(t(A
f;H(t*A
f;H(t:E3
f;H(t;
f;H(u
f;P(u
f9_8v/
f9~8v)
f9G8v
f9G8vT
f9p8vQH
f9Q8v
f9Q8v.
f9Q8w1H
f9X8w
fA;L@
fD3D$
fD9@8v_H
fD9`8vlH
fD9p8vc
fD9p8w
fD9x8
fD9x8w
Field
FieldLayout
FieldMarshal
FieldPtr
FieldRVA
FileDescription
fileName( InputSharedBuffer ): input[ 0 ];buffer( InputSharedBuffer ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];compositeFormat( InputSharedCompositeFormat ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];pe( InputSharedPe ): input[ 1 ]; 
fileName( InputSharedBuffer ): input[ 0 ];riftTable( InputSharedRiftTable ): input[ 1 ];
fileTypeSet( CopyInt ): input[ 0 ];flags( CopyInt ): input[ 1 ];options( IniReaderFromBuffer ): input[ 2 ];source( PassBuffer ): input[ 3 ];code( DetermineFileType ): fileTypeSet[ 0 ], source[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];normalizeCodeSourceName( Concat ): "NormalizeCodeSource_", codeMnemonic[ 0 ];normalizeCodeSource( NormalizeCodeSource_RAW / normalizeCodeSourceName[ 0 ] ): code[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];output: normalizeCodeSource[ 0 ];
FileVersion
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PostProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PreProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 11 ] ? "RiftTransformDisasmIa64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 12 ] ? "RiftTransformPdataIa64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 19 ] ? "RiftTransformDisasmARM" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 20 ] ? "RiftTransformPdataARM" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 23 ] ? "RiftTransformDisasmARM64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 24 ] ? "RiftTransformPdataARM64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flagsInt( InputSharedInt ): input[ 0 ];output( RiftTransform ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];
FreeLibrary
full( CopyBuffer ): input[ 0 ];asciiPatchSignature( TToAscii ): "PA30";asciiPatchSignatureSize( BufferSize ): asciiPatchSignature[ 0 ];signature( Unconcat ): full[ 0 ], asciiPatchSignatureSize[ 0 ];checkSignature( CheckBuffersIdentity ): signature[ 0 ], asciiPatchSignature[ 0 ], 0x044601;intFixedBuffer( IntToFixedBuffer ): 0;intFixedBufferSize( BufferSize ): intFixedBuffer[ 0 ];fileTimeBuffer( Unconcat ): signature[ 1 ], intFixedBufferSize[ 0 ];fileTime( IntFromFixedBuffer ): fileTimeBuffer[ 0 ];bitReader( BitReaderOpen ): fileTimeBuffer[ 1 ];version( BitReadInt ): bitReader[ 0 ];code( BitReadInt ): version[ 0 ];flagsInt( BitReadInt ): code[ 0 ];targetSize( BitReadInt ): flagsInt[ 0 ];hashAlgId( BitReadInt ): targetSize[ 0 ];hash( BitReadBuffer ): hashAlgId[ 0 ];output: hash[ 0 ], version[ 1 ], code[ 1 ], flagsInt[ 1 ], targetSize[ 1 ], fileTime[ 0 ], hashAlgId[ 1 ], hash[ 1 ];
G@@8s9tCL
G@H9G8
GenericParam
GenericParamConstraint
GenuD
GetBits
GetCheckSum
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDeltaInfoA
GetDeltaInfoB
GetDeltaInfoW
GetDeltaSignatureA
GetDeltaSignatureB
GetDeltaSignatureW
GetFileSize
GetFileTime
GetFileTypeMnemonic
GetGlobalPointer
GetImageBase
GetLastError
GetPortableExecutableInfo
GetPortableExecutableInfoCli4
GetProcAddress
GetProcessHeap
GetSystemTime
GetSystemTimeAsFileTime
GetTimeStamp
GetTraceEnableFlags
GetTraceEnableLevel
GetTraceLoggerHandle
gfffffff
gfffffffy;I
GlobalPointer
GuidStreamOffset
GuidStreamSize
H AVH
H f9i8vmH
H WATAUAVAWH
H!.H9k(
H!}`H
H!k(H
H!t$ E3
H!t$ L
H(H9O0t*A
H(L9M
H;P(w
H;Q(t*A
H;t$`
H@H+H8H
H@H+H8I
H+^0H
H+_0H
H+|$ H
H+K`D
H+t$(t
H+W H
H9\$Hu
H9{(w
H9{@v(H
H9{Pv(H
H9{Pw
H9|$ u
H9|$(u
H9|$Hu
H9~0w
H9A(v
H9D$`
H9H(v0A
H9l$P
H9NPu
H9O0v
H9p(reL
H9P(v
H9P(v0A
H9Q(v
H9Q(vYH
H9Q8t L
H9s(L
H9S(u
H9s(v7L9g
H9t$PL
H9w@v'H
H9w@w
H9x(v7H
H9X(v'H
H9x(w
H9y uZH9yPuTH9
HA_A]A\_^[
HA_A^A]A\_^[]
hA_A^A]A\_^][
HA_A^A]A\_^][
HasConstant
HasCustomAttribute
HasDeclSecurity
HasFieldMarshal
HasSemantic
HeapAlloc
HeapFree
HeapReAlloc
HEX( 
I D8y
I;(|S3
I0G1-0+
I0H9J(u*A
I8H+K(H
I9C8u
I9JPv
I9QPv-I
ImageBase
Implementation
ImplMap
IniReaderFromBuffer
InitializeCriticalSection
InitializeSListHead
input
InputExclusiveBitReader
InputExclusiveBitWriter
InputExclusiveBuffer
InputExclusiveBufferList
InputExclusiveCliMap
InputExclusiveCliMetadata
InputExclusiveCompositeFormat
InputExclusiveIniReader
InputExclusiveInt
InputExclusivePe
InputExclusivePortableExecutableInfo
InputExclusiveRiftTable
InputSharedBitReader
InputSharedBitWriter
InputSharedBuffer
InputSharedBufferList
InputSharedCliMap
InputSharedCliMetadata
InputSharedCompositeFormat
InputSharedIniReader
InputSharedInt
InputSharedPe
InputSharedPortableExecutableInfo
InputSharedRiftTable
InterfaceImpl
InternalName
IntFromFixedBuffer
IntToFixedBuffer
IsDebuggerPresent
IsProcessorFeaturePresent
K(H+K H
K8H;K0tk
K8H;K0u
L$ D;
l$ E3
L$ E3
l$ E3
L$ E3
l$ VH
l$ VWATAVAWH
L$(E3
L$@H3
l$@u<H
L$0H9
L$hD;
L$HH3
L$HL9
L$ht0A
L$pA;
L$PH3
L$pH3
l$XE3
L$XH3
L;;|YE3
L;@(w
L;A(t(A
L;x(t*A
L;yxA
L9@(v
L9@(v?
L9}PvCI
L9APu
L9g0u
L9q(v@H
L9q(w
L9s@v.H
L9sPv1H
LeaveCriticalSection
Legal_Policy_Statement
LegalCopyright
LoadLibraryExA
LongBlobStream
LongGuidStream
LongStringsStream
M H1E
M0K0I
M9ZPv
ManifestResource
MarkNonExe
MarkNonExeCli4
MemberForwarded
MemberRef
MemberRefParent
memcmp
memcpy
memmove
memset
Method
MethodDefOrRef
MethodImpl
MethodPtr
MethodSemantics
MethodSpec
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1)0'
Microsoft Corporation1.0,
Microsoft Corporation1200
Microsoft Patch Engine
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
MinBuffer
Module
ModuleRef
msdelta.dll
msdelta.pdb
mspatcha.dll
MultiplyRiftTables
N D8y$
N0L0J
NestedClass
NormalizeCodeSource_AMD64
NormalizeCodeSource_CLI4_AMD64
NormalizeCodeSource_CLI4_ARM
NormalizeCodeSource_CLI4_ARM64
NormalizeCodeSource_CLI4_I386
NormalizeCodeSource_I386
NormalizeCodeSource_IA64
NormalizeCodeSource_RAW
NormalizeSource
Npf9Y8vGL
ntelA
O(H+O 
O(H+O H
O0M0K
oK0D$"<
OptimalSegments
OriginalFilename
output
OutputBitReader
OutputBitWriter
OutputBuffer
OutputBufferList
OutputCompositeFormat
OutputIniReader
OutputInt
OutputPe
OutputPortableExecutableInfo
OutputRiftTable
P fD;B(u
PA_A^_
PA_A^_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
Param
ParamPtr
PassBitReader
PassBitWriter
PassBuffer
PassBufferList
PassCliMap
PassCliMetadata
PassCompositeFormat
PassIniReader
PassInt
PassPe
PassPortableExecutableInfo
PassRiftTable
pe( PassPe ): input[ 0 ];hintMap( PassBuffer ): input[ 1 ];riftTable( InputSharedRiftTable ): input[ 2 ];riftUsage( PassBuffer ): input[ 3 ];cliMap( InputSharedCliMap ): input[ 4 ];targetInfo( InputSharedPortableExecutableInfo ): input[ 5 ];transformFlag( InputSharedInt ): input[ 6 ];relative( PassRiftTable ): input[ 7 ];output: pe[ 0 ], hintMap[ 0 ], riftUsage[ 0 ], relative[ 0 ];
PE;HLw
PortableExecutableFromBuffer
PortableExecutableInfo
PortableExecutableInfoFromBuffer
PortableExecutableToBuffer
PostProcessI386E8
PreProcessI386E8
ProductName
ProductVersion
Property
PropertyMap
PropertyPtr
PseudoLzxCompress
PseudoLzxCompressStatisticsOnly
PuK;UH
PuO'a
q t3H
Qkkbal
QueryPerformanceCounter
R!s4Z
r~akow
ReadFile
Redmond1
ReduceRiftTable
RegisterTraceGuidsW
RemoveUnusedRiftEntries
ResetCompositeFormatStatistics
ResolutionScope
ReverseRiftTable
RiftTable
RiftTableFromExports
RiftTableFromHeaders
RiftTableFromImports
RiftTableFromIniSection
RiftTableFromPdatas
RiftTableFromPes
RiftTableFromPsyms
RiftTableFromResources
RiftTableMap
RiftTransform
RiftTransform_AMD64
RiftTransform_CLI4_AMD64
RiftTransform_CLI4_ARM
RiftTransform_CLI4_ARM64
RiftTransform_CLI4_I386
RiftTransform_I386
RiftTransform_IA64
RiftTransformCli4Disasm
RiftTransformCli4Metadata
RiftTransformCliDisasm
RiftTransformCliMetadata
RiftTransformDisasmAmd64
RiftTransformDisasmARM
RiftTransformDisasmARM64
RiftTransformDisasmIa64
RiftTransformExports
RiftTransformHeaders
RiftTransformImports
RiftTransformPdataAmd64
RiftTransformPdataARM
RiftTransformPdataARM64
RiftTransformPdataIa64
RiftTransformRelativeCallsI386
RiftTransformRelativeJmpsI386
RiftTransformRelocations
RiftTransformRelocationsI386
RiftTransformResources
RiftTransformTemplate
Rl1Uz
RSDS6
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
RvaToImageOffset
S(H+S0H
s@@8s
SATAWH
Segments
SetCheckSum
SetEndOfFile
SetFilePointer
SetFileTime
SetGlobalPointer
SetImageBase
SetLastError
SetTimeStamp
SetUnhandledExceptionFilter
sHH9{@v(H
SkipUnused
SmashLockPrefixesI386
source( PassBuffer ): input[ 0 ];bitReader( BitReaderOpen ): input[ 1 ];target0( PassBuffer ): input[ 2 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target0[ 0 ];baseRiftTable( BitReadRiftTable ): bitReader[ 0 ];riftTable( SumRiftTables ): baseRiftTable[ 1 ], input[ 3 ], 0;format( BitReadCompositeFormat ): baseRiftTable[ 0 ];debugWriteCompositeFormat( DebugWriteFileCompositeFormat ): "compositeFormat.apply.txt", format[ 1 ];bufferList0( CreateEmptyBufferList ):;bufferList1( BufferListPushBack ): bufferList0[ 0 ], source[ 0 ];bufferList2( BufferListPushBack ): bufferList1[ 0 ], target0[ 0 ];decompress( Decompress ): format[ 0 ], format[ 1 ], bufferList2[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], -1;target1( BufferListPopBack ): decompress[ 1 ];closeBitReader( BitReaderClose ): decompress[ 0 ], 1;output: target1[ 1 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ];bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];targetBuffer( PassBuffer ): input[ 2 ];split( SplitPatchHeader ): patch[ 0 ];targetBufferSize( BufferSize ): targetBuffer[ 0 ];checkTargetSize( CheckIntsIdentity ): split[ 4 ], targetBufferSize[ 0 ], 0x040303;apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ];bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
sourceSize( BufferSize ): input[ 0 ];targetSize( BufferSize ): input[ 1 ];fullBuffer( Concat ): input[ 0 ], input[ 1 ];baseRiftTable( CreateCompressionRiftTable ): fullBuffer[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ];riftTable( SumRiftTables ): baseRiftTable[ 0 ], input[ 6 ], 0;defaultFormat( CreateDefaultCompositeFormat ):;defaultBitWriter( BitWriterOpen ):;writeBaseRiftTableDefault( BitWriteRiftTable ): defaultBitWriter[ 0 ], baseRiftTable[ 0 ];writeDefaultFormat( BitWriteCompositeFormat ): writeBaseRiftTableDefault[ 0 ], defaultFormat[ 0 ];defaultFormatWithStatistics( ResetCompositeFormatStatistics ): defaultFormat[ 0 ], 1;defaultCompress( PseudoLzxCompress ): defaultFormatWithStatistics[ 0 ], fullBuffer[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], writeDefaultFormat[ 0 ];defaultBuffer( BitWriterClose ): defaultCompress[ 2 ];optimalFormat( CreateOptimalCompositeFormat ): defaultCompress[ 0 ];optimalBitWriter( BitWriterOpen ):;writeBaseRiftTableOptimal( BitWriteRiftTable ): optimalBitWriter[ 0 ], baseRiftTable[ 0 ];writeOptimalFormat( BitWriteCompositeFormat ): writeBaseRiftTableOptimal[ 0 ], optimalFormat[ 1 ];defaultBitReader( BitReaderOpen ): defaultBuffer[ 0 ];copyBaseRiftTable( BitReadRiftTable ): defaultBitReader[ 0 ];copyDefaultFormat( BitReadCompositeFormat ): copyBaseRiftTable[ 0 ];optimalTranslate( TranslateCompression ): copyDefaultFormat[ 0 ], writeOptimalFormat[ 0 ], copyDefaultFormat[ 1 ], optimalFormat[ 1 ], sourceSize[ 0 ], defaultCompress[ 1 ];closeDefaultBitReader( BitReaderClose ): optimalTranslate[ 0 ], 1;optimalBuffer( BitWriterClose ): optimalTranslate[ 1 ];output( MinBuffer ): defaultBuffer[ 0 ], optimalBuffer[ 0 ];
SplitPatchHeader
SplitPortableExecutableInfo
StandAloneSig
StreamHeadersOffset
StreamsNumber
StringFileInfo
StringsStreamOffset
StringsStreamSize
SumRiftTables
SUVWATAUAVAWH
SUVWATAUAWH
SUVWAVAWH
SUVWAVH
SUVWH
SVWATAUAVAWH
SVWAVH
Symbols
SystemTimeToFileTime
t!H;w(t
t$ E3
T$ E3
t$ E3
T$ H;
t$ WATAUAVAWH
t$ WATAVH
t$ WH
t$(E2
T$0L+
t$4D;
t$8A;
t$8E3
t$8H9L$(t19>vy9{H
t$HH;
t$HH93
t$Pfff
t$XI#
t<F9d
t2H9H
t3fff
t5H9A
t7H;Q
t7x.I
t8fff
t9x0I
Table0x2D
Table0x2E
Table0x2F
Table0x30
Table0x31
Table0x32
Table0x33
Table0x34
Table0x35
Table0x36
Table0x37
Table0x38
Table0x39
Table0x3A
Table0x3B
Table0x3C
Table0x3D
Table0x3E
Table0x3F
TablesStreamOffset
TablesStreamSize
taH;\$XuZ
TargetRealPeContainer
TargetRealPeContainerCli4
TargetStubPeContainer
TargetStubPeContainerCli4
TerminateProcess
TestApplyPatchToFileByBuffers
Thales TSS ESN:897A-E356-17011%0#
TimeStamp
tkD8Q 
tKI9_
tLF9|
TlP0X
TraceEvent
TranslateCompression
Translation
TToAscii
TToUnicode
TypeDef
TypeDefOrRef
TypeOrMethodDef
TypeRef
TypeSpec
u/H9A
u<9{<urD
u0H!D$(
U0S0Q
u59}0u
UATAUAVAWH
UAVAWH
UnbindPortableExecutable
Unconcat
UnhandledExceptionFilter
UnicodeToAscii
UnicodeToT
UnregisterTraceGuids
uoH9u
usD9A umD9A$ugD9A(uaD9A,u[D9A0uUD9A4uOD9A8uID9A<uCD9A@u=D9ADu7D9AHu1D8ALu+D8AMu%D8ANu
UsStreamOffset
UsStreamSize
USVWATAUAVAWH
UVWATAUAVAWH
UVWATAVH
UVWAVAWH
UWATAVAWH
UWAVH
UWAWH
uxfA+
uyD9A
v fff
v*fA;
v1I9I
v2L9n
VarFileInfo
VAVAWH
vb{Rich
vc{Erb{
version( CopyInt ): input[ 0 ];code( CopyInt ): input[ 1 ];targetCode( CopyInt ): input[ 2 ];flagsInt( CopyInt ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];fileTime( CopyInt ): input[ 9 ];hashAlgId( CopyInt ): input[ 10 ];asciiPatchSignature( TToAscii ): "PA30";fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], target[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];targetSize( BufferSize ): target[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeTargetSize( BitWriteInt ): writeFlagsInt[ 0 ], targetSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeTargetSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], hash[ 0 ];create( CreatePayload ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], writeHash[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];created( BitWriterClose ): create[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];apply( ApplyPatch ): source[ 0 ], patch[ 0 ];testApply( CheckBuffersIdentity ): target[ 0 ], apply[ 0 ], 0x041B01;output: patch[ 0 ];
version( CopyInt ): input[ 0 ];hashAlgId( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];flags( CopyInt ): 0;options( PassBuffer ): "";normalized( NormalizeSource ): version[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], normalized[ 0 ];output: hash[ 0 ];
vqD9T$PvJA
VS_VERSION_INFO
VWATAUAWH
VWAVH
W H+P H
W(H+W0H
W(H9W tjL
w=9Q,vb;
W0H+W
Washington1
WATAUAVAWH
WATAVH
WAVAWH
wm9{D
wn>Jj
WpE9B<
wrap( ApplyPreProcessSourcePe ):;
wrap( ApplyPreProcessSourcePeCli4 ):;
wrap( AsciiToUnicode ):;
wrap( CopyBuffer ):;
wrap( CreatePreProcessSourcePe ):;
wrap( CreatePreProcessSourcePeCli4 ):;
wrap( NormalizeCodeSource_AMD64 ):;
wrap( NormalizeCodeSource_I386 ):;
wrap( UnicodeToAscii ):;
WriteFile
x ATAUAVAW
x ATAUAVAWD
x ATAVAWH
x AUAVAWH
x AVH
x UATAUAVAWH
x UAVAWH
XA_A]^]
xA_A^A]A\_^[]
xA_A^A]A\_^][
y tfH
Y(M;Y(
Y*30T
YGy-I
z.9Wv
