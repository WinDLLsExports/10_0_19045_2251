 `J0L
 A^_^
 A__^
 A_A^^
 A_A^_
 A_A^A\
 A_A^A]_^
 A_A^A]A\_
 d"0$
 d&0(
 d*0,
 d.00
 d>0@
 d204
 dB0D
 dF0H
 dN0P
 dR0T
 dV0X
 exceeding max number of microphones
 H3E H3E
 invalid index
 invalid mic array specifier
 unknown spec
 unsupported beamformer name
 unsupported params
 unsupported specifier
 unsupported WPE params
!This program cannot be run in DOS mode.
" ""*$D&
",D.V,
"0T2H0
$Z&^$
%s %s %s: %s vs. %s, %s
&$$$"$
&N($*@,
(((m_options & Option_OutputSelectorFeatures) ? 2U : 1U))
((_fseeki64(fp, 0, 2)))
((_fseeki64(fp, 4, 0)))
((_fseeki64(fp, 40, 0)))
((_fseeki64(fp, begin_byte, 1)))
((_fwrite_nolock(&x1, n, 1, fp)))
((0))
((0U))
((1))
((-1))
((16000))
((1U))
((2U))
((3U))
((4U))
((5U))
((8U))
(('A'))
((bit % 8U))
((buf[0]))
((buf[1]))
((buf[2]))
((buf[3]))
((channelCnt))
((chunkSize))
((cnt*shiftLen))
((dataSize))
(('E'))
(('F'))
((false))
((fmt.AudioFormat))
((fmt.BitsPerSample % 8U))
((fmt.NumChannels))
((fopen_s(&fp, path, "rb")))
((fopen_s(&fp, path, "wb")))
((found))
((fread_s(&chunkSize, sizeof(chunkSize), 1, sizeof(chunkSize), fp)))
((fread_s(&r, sizeof(r), 1, sizeof(r), fp)))
((fread_s(buf, sizeof(buf), 1, 4, fp)))
((fread_s(temp.get(), chunkSize, 1, chunkSize, fp)))
((fseek(fp, 0, 0)))
((fwrite(&bitsPerSample, sizeof(short), 1, fp)))
((fwrite(&blockAlign, sizeof(short), 1, fp)))
((fwrite(&byteRate, sizeof(int), 1, fp)))
((fwrite(&channels, sizeof(short), 1, fp)))
((fwrite(&chunkSize, sizeof(unsigned int), 1, fp)))
((fwrite(&fmtCode, sizeof(short), 1, fp)))
((fwrite(&sampleRate, sizeof(int), 1, fp)))
((fwrite(&subChunk1Size, sizeof(unsigned int), 1, fp)))
((fwrite(&subChunk2Size, sizeof(unsigned int), 1, fp)))
((fwrite(data, 4, 1, fp)))
((fwrite(fmt, 4, 1, fp)))
((fwrite(RIFF, 4, 1, fp)))
((fwrite(WAVE, 4, 1, fp)))
((Hop))
(('I'))
((InCnt * K * sizeof(transform_table[0])))
((ir))
((k))
((kp))
((kp_16))
((L / 4))
((L')'))
((len))
((m_aec.GetInputPortCount()))
((m_aec.GetOutputPortCount()))
((m_agc.GetInputPortCount()))
((m_agc.GetOutputPortCount()))
((m_bandPassFir.GetOutputPortCount()))
((m_bank.GetOutputPortCount()))
((m_beam_bank.GetOutputPortCount()))
((m_bf_wpe->GetInputPortCount()))
((m_bf_wpe->GetOutputPortCount()))
((m_buf.empty()))
((m_buf.size()))
((m_decFir.GetInputPortCount()))
((m_eos))
((m_es.GetInputPortCount()))
((m_es.GetOutputPortCount()))
((m_filter->GetOutputPort(i)->GetSampleRate()))
((m_freq_filter->GetInputPortCount()))
((m_freq_filter->GetOutputPortCount()))
((m_init))
((m_inputChannelCnts[index]))
((m_inputPorts[index].get()))
((m_mask.GetOutputPortCount()))
((m_mic_bank.GetOutputPortCount()))
((m_Nr))
((m_ns.GetInputPortCount()))
((m_ns.GetOutputPortCount()))
((m_readers.empty()))
((m_readers.size()))
((m_readers[0]->Format().SampleRate))
((m_readers[0]->SampleCount()))
((m_readers[i]->Format().AudioFormat))
((m_readers[i]->Format().NumChannels))
((m_readers[i]->Format().SampleRate))
((m_readers[i]->SampleCount()))
((m_ref_bank.GetOutputPortCount()))
((m_res.GetInputPortCount()))
((m_res.GetOutputPortCount()))
((m_selector.GetInputPortCount()))
((m_selector.GetOutputPortCount()))
((m_synth.GetInputPortCount()))
((m_wpe.GetInputPortCount()))
((m_wpe.GetOutputPortCount()))
((m_writers.empty()))
((m_writers.size()))
((nullptr))
((options & Option_OutputSelectorFeatures ? 2U : 1U))
(('R'))
((r_in))
((r_ref))
((ReadInput(0, (float*)m_sample)))
((ReadInput(0, in_buf.get())))
((rev(kp_16, m)))
((sizeof(r)))
((sizeof_transform_table))
((source->GetChannelCount()))
((spec[spec.size() - 1]))
((std::isnan(x)))
((subChunk2Size))
((test == 0 || test == -1))
((tokens.size()))
((true))
(('V'))
(('W'))
(\$@D
(\$PH
(|$ I
(|$`D
(|$`I
(|$pB
(|$pD
(|$pL
(|$PL
(062\0
(08@HP^@Y
(466N4
(bit % 8 + fmt.BitsPerSample)
(byte)
(chanCnt)
(chanCnt1)
(chanCnt2)
(cnt)
(coef)
(D$ A
(D$@A
(d$@A
(D$0H
(D$PH
(D$pL
(dataSize)
(delay)
(fHigh)
(fLow)
(fmt.BitsPerSample)
(GetInputPortCount())
(GetOutputPortCount())
(index)
(initDelay)
(ipc)
(L % Hop == 0)
(L$`D
(L$0D
(l$pA
(LL1)
(LL2)
(m_in_chanCnt)
(m_inputPorts.size())
(m_maxDelay)
(m_ndx)
(m_Nr)
(m_read + m_delay)
(m_read)
(m_ref_T2)
(m_write)
(maxDelay)
(Np / 4)
(open_paren_cnt)
(OutCnt)
(ports.size())
(pos + 2)
(R) %s
(scale - 1)
(-scale)
(spec.size())
(T$ D
(t$@H
(t$`H
(T$`L
(t$0D
(t$0H
(t$0L
(T$PD
(t$PH
(t$pL
(tokens.size())
(W) %s
)\$PD
)\$PH
)|$@D
)|$`D
)|$pD
)|$PL
)4$E3
)D$ D
)D$@D
)d$@D
)D$0D
)D$pH
)D$PL
)L$ H
)l$@D
)L$`D
)L$0A
)l$pD
)L$pH
)t$`L
)t$0D
)t$0H
)t$0I
)T$PD
)t$PE
)t$PH
.(DVFHD
.(DVFHDx.,H
.(RVTHR
.(RVTTR
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVruntime_error@std@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$r$brc
.edata
.gehcont
.gfids
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zzzdbg
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$mn
.text$mn$00
.text$x
.xdata
.xdata$x
?_Xinvalid_argument@std@@YAXPEBD@Z
?_Xlength_error@std@@YAXPEBD@Z
?_Xout_of_range@std@@YAXPEBD@Z
?333?
@.data
@.reloc
@A^_^
@A_A^_^]
@A_A^A]A\_^]
@SUATAUH
@SUVWAVH
@SUWH
@SVWATAUAVAWH
@SVWH
@USVWATAUAVAWH
@USVWATAVAWH
@USVWAVH
@USWH
@UVWATAUAVAWH
\$ UH
\$ UVWATAUAVAWH
\$ UVWAVAWH
\$ WH
\$(H;
\$@H;
\$@L;
\$`H;
\$0H;
\$hH+
\$PH;
\$PL+
\$xL;wpL
__C_specific_handler
__CxxFrameHandler4
_CxxThrowException
_fdtest
_FDtest
_initterm
_initterm_e
_o___acrt_iob_func
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vfprintf
_o___stdio_common_vsprintf
_o___stdio_common_vsprintf_s
_o__aligned_free
_o__aligned_malloc
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__errno
_o__execute_onexit_table
_o__fgetc_nolock
_o__fseeki64
_o__fwrite_nolock
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__seh_filter_dll
_o_cos
_o_fclose
_o_fgetc
_o_fopen_s
_o_fread_s
_o_free
_o_fseek
_o_fwrite
_o_malloc
_o_sin
_o_terminate
_o_wcstof
_o_wcstol
_o_wcstoul
`.rdata
`?fff?
`A_A^_^]
`A_A^A]A\_^]
|"8&>(
|$ ATAVAWH
|$ ATAVAWL
|$ AVH
|$ UATAUAVAWH
|$ UAVAWH
|$@H+
|$`E3
|$`H;
|$8A_A^A\
|$hff
|$Pdu
|$Pfu
|$pL+
|$PLi
|$Qau
|$Qmu
|$Rtu
|$S E
|$SaE
|$Xfff
|$xH;
|$XH9yp
|$XI+
}HIiUh
>$<$:$8$
>,6.Z,
0A^_^
0A_A^_
0A_A^_^[
0A_A^A\_^
0A_A^A]A\_^[
0A_A^A]A\_^]
33s?H
4$2$0$.$
6(N*\(
648F6
8_^][
8A^_^[
8z<u:A
A]A\][
A^_^[]
A^_^][
A_A^]
A_A^_
A_A^_^]
A_A^A\_]
A_A^A\_^[]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^[
A_A^A]A\_^[]
A_A^A]A\_^]
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-crt-math-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
auto_ref_delay_aec
avcore\audioprocessing\capture\core\mas\apps\CAGCFilterTest.h
avcore\audioprocessing\capture\core\mas\apps\CFFTFilterBankTest.h
avcore\audioprocessing\capture\core\mas\apps\CNoiseSuppressionFilterTest.h
avcore\audioprocessing\capture\core\mas\apps\CPMAFilter.h
avcore\audioprocessing\capture\core\mas\apps\CResidualEchoSuppressionFilterTest.h
avcore\audioprocessing\capture\core\mas\apps\CWPEFilterTest.h
avcore\audioprocessing\capture\core\mas\basics\CAbstractBufferedOutputFilter.h
avcore\audioprocessing\capture\core\mas\basics\CAbstractCompositeFilter.h
avcore\audioprocessing\capture\core\mas\basics\CAbstractDirectOutputFilter.h
avcore\audioprocessing\capture\core\mas\basics\CComplex_simd_sse.h
avcore\audioprocessing\capture\core\mas\basics\CFFTFilterBank.h
avcore\audioprocessing\capture\core\mas\basics\CFFTSynthBank.h
avcore\audioprocessing\capture\core\mas\basics\CRadix4FFT_float.h
avcore\audioprocessing\capture\core\mas\basics\CSplitWaveSink.h
avcore\audioprocessing\capture\core\mas\basics\CSplitWaveSource.h
avcore\audioprocessing\capture\core\mas\basics\CUnimicBuffer.h
avcore\audioprocessing\capture\core\mas\basics\CUnimicProcessor.h
avcore\audioprocessing\capture\core\mas\basics\CWaveReader.h
avcore\audioprocessing\capture\core\mas\basics\CWaveWriter.h
avcore\audioprocessing\capture\core\mas\filters\CAGCMaskEstimator.h
avcore\audioprocessing\capture\core\mas\filters\CAutoRefDelayAECFilter.h
avcore\audioprocessing\capture\core\mas\filters\CBandPassFIRFilter.h
avcore\audioprocessing\capture\core\mas\filters\CCorrelationEstimator.h
avcore\audioprocessing\capture\core\mas\filters\CDelayFilter.h
avcore\audioprocessing\capture\core\mas\filters\CDownSampleFilter.h
avcore\audioprocessing\capture\core\mas\filters\CErleEstimator.h
avcore\audioprocessing\capture\core\mas\filters\CFBeamFormer.h
avcore\audioprocessing\capture\core\mas\filters\CFDAFAECFilter_float.h
avcore\audioprocessing\capture\core\mas\filters\CForkFilter.h
avcore\audioprocessing\capture\core\mas\filters\CFResidualEchoSuppressor_float.h
avcore\audioprocessing\capture\core\mas\filters\CFWPEFilter.h
avcore\audioprocessing\capture\core\mas\filters\CLogLoopAGCFilter.h
avcore\audioprocessing\capture\core\mas\unimic_runtime.cpp
bad allocation
bad array new length
band_pass_fir
BD$hH
C8H9CHs
CD$XD
CD$XH
CD$xH
ChH+C`H
coremas.dll
COREMAS.pdb
CreateCustomUnimicSource
CreateUnimicFilter
CreateUnimicProcessor
CreateUnimicSinkToSplitChannelWaveFiles
CreateUnimicSinkToWaveFile
CreateUnimicSourceFromSplitChannelWaveFiles
CreateUnimicSourceFromWaveFile
CT$XH
D$ H9U0t
D$(L;
D$@H+
D$`L;
D$0H+
D$EL;
D$EM+
D$hH;
D$HH+
D$hH+
D$hL;
D$PH+
D$pI9V0t
D$pL;
D$PL;
D$XL;
D$xL;
DeleteUnimicFilter
DeleteUnimicProcessor
DeleteUnimicSink
DeleteUnimicSource
deque<T> too long
down_sample
F@H;FPv
fdaf_aec
fF9$Au
Fh33s?
FOR_TEST_ONLY:agcmasktest
FOR_TEST_ONLY:agctest
FOR_TEST_ONLY:beamformer
FOR_TEST_ONLY:corrtest
FOR_TEST_ONLY:delay
FOR_TEST_ONLY:erletest
FOR_TEST_ONLY:estest
FOR_TEST_ONLY:fft_filter_bank
FOR_TEST_ONLY:fork
FOR_TEST_ONLY:nltest
FOR_TEST_ONLY:nstest
FOR_TEST_ONLY:sum
FOR_TEST_ONLY:wpetest
GenuD
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetSystemTimeAsFileTime
GetUnimicFilterInputPortCount
GetUnimicFilterOutputPort
GetUnimicFilterOutputPortCount
GetUnimicProcessorDelay
GetUnimicProcessorInputChannelCount
GetUnimicProcessorOutputChannelCount
GetUnimicSinkChannelCount
GetUnimicSourceChannelCount
GetUnimicSourceSampleRate
H SVWH
H SWH
H;\$8u
H;_pr
H;{(r
H;{`r
H;{hL
H;{pr
H;~0r
H;CXr
H;Ghr
H;GXr
H;Khr
H;khr
H;Khr
H;Opr
H;Oxr
H;S r
H;s(r
H;Shr
H;shr
H;Shr
H;shr
H;uhr
H;V8r
H;V8s#H
H;Wpr
H;WXr
H;wxs%H
H;wxs&E3
H;wxs.H
H+ApH
H+C`H
H+CxH
H+D$(L
H9\$hL
H9_pvXM
H9{`v*H
H9F r
H9F0w
H9Ghv4H
H9GXv.H
H9Khv
H9Khv.L
H9S vcf
H9S0t
H9Shv6L
H9Wpv?L
H9Wpv>L
H9WXv9L
HA_A^A]A\_^[]
I(H+H H
I;WpM
InitializeSListHead
invalid stof argument
invalid stoi argument
invalid stoul argument
invalid string position
IsDebuggerPresent
IsProcessorFeaturePresent
L$ E3
L$ H3
L$ SUVWH
l$ VWAVH
L$(E3
L$@H3
L$`I+
L$hE3
L$HH3
L$PL+
l$xH;
l$XL;
L;C(r
L;chD
L;Chr
L;Cpr
L;Gpr
L;gxs%H
L;gxs&E3
L;gxs.H
L;opr
L;Spr
L;sps]H
L+D$PL
L9{pvn
L9opvEM
L9SHt{L
L9uhvEA
log10f
M H1E
M;Wpr
memcpy
memmove
memset
msvcp_win.dll
non-integer oversample
ntelA
PA_A^_^]
PA_A^A\_^[]
PA_A^A]A\_^]
QueryPerformanceCounter
rassert_op (line %d of %s):
ReadUnimicSource
rfail (line %d of %s):
Rich4#
RtlCaptureContext
RtlLookupFunctionEntry
RtlVirtualUnwind
RunUnimicProcessor
SetUnhandledExceptionFilter
SetUnimicFilterInputPort
split
sqrtf
stof argument out of range
stoi argument out of range
stoul argument out of range
string too long
SUVWAVH
SVWATAUAVAWH
SVWAVAWH
SVWAVH
t"LcE
t$ UWATAVAWH
t$ WATAUAVAWH
t$ WAVAWH
t$ WH
T$`H;
T$`H+
T$`H+T$XH
T$`I+
T$`M+
T$0H+
t$hH+
t$hIi
T$Pff
t$PHi
T$PI;
T$XH+
t$XL;sp
TerminateProcess
UnhandledExceptionFilter
unimic_runtime error
Unknown exception
USVWATAUAVAWH
USVWATAVAWH
UVWATAUAVAW
UVWATAUAVAWH
UVWAVAWH
UWATAVAWH
VAVAWH
vector<T> too long
VWATAVAWH
VWAUAVAWH
VWAVH
VWAWH
WATAUAVAWH
WAVAWH
WriteUnimicSink
x AVH
x UATAUAVAWH
X UVWH
X$ZHX
X$ZTX
Y\$PA
YD$`D
YD$0D
YD$PD
YL$@A
YL$PA
YT$`E
YT$0E
