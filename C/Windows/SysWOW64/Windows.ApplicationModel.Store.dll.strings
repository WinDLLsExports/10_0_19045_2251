     
                        "__tag": true,
                        "key": "availabilityId",
                        "key": "devOfferId",
                        "key": "parentProductId",
                        "key": "productId",
                        "key": "skuId",
                        "type": "string"
                    "__tag": true,
                    "availabilityId": {
                    "devOfferId": {
                    "key": "deviceFamily",
                    "key": "deviceMoid",
                    "key": "deviceOemid",
                    "key": "deviceScmid",
                    "key": "languages",
                    "key": "market",
                    "productId": {
                    "quantity": "1",
                    "skuId": {
                    "type": "string"
                    }
                    },
                "__tag": true,
                "client": "UniversalStoreInApp",
                "defaultValue": 25
                "deviceFamily": {
                "deviceMoId": {
                "deviceOemId": {
                "deviceScmId": {
                "isOptional": true
                "key": "AppServiceName",
                "key": "bidRequest",
                "key": "consumableProductId",
                "key": "continuationToken",
                "key": "customDeveloperString",
                "key": "data",
                "key": "deviceFamily",
                "key": "DeviceId",
                "key": "deviceMoid",
                "key": "deviceOemid",
                "key": "deviceScmid",
                "key": "entitlementFilters",
                "key": "includeRelationship",
                "key": "locale",
                "key": "market",
                "key": "maxPageSize",
                "key": "Offer",
                "key": "optionalData",
                "key": "orderId",
                "key": "parameters",
                "key": "parentProductId",
                "key": "PFN",
                "key": "ProductId",
                "key": "productSkuIds",
                "key": "publisherUserId",
                "key": "quantity",
                "key": "relatedProductIds",
                "key": "serviceTicket",
                "key": "SkuId",
                "key": "StoreId",
                "key": "trackingId",
                "key": "type",
                "languages": {
                "market": {
                "type": "array",
                "type": "beneficiaryArray"
                "type": "goldenBeneficiary",
                "type": "goldenBeneficiaryArray"
                "type": "number",
                "type": "object"
                "type": "string"
                "type": "string",
                {
                }
                },
            "__tag": true,
            "alwaysEnforceDoublePurchasePolicy": true
            "applicationId": {
            "AppServiceName": {
            "beneficiaries": {
            "beneficiary": {
            "bidRequest": {
            "clientContext": {
            "continuationToken": {
            "customDeveloperString": {
            "data": {
            "deviceFamily": {
            "DeviceId": {
            "deviceMoid": {
            "deviceOemid": {
            "deviceScmid": {
            "enforceSellableBy": true,
            "entitlementFilters": {
            "includeRelationship": {
            "items": [
            "key": "attachRecordId",
            "key": "hostType",
            "key": "StoreId",
            "language": {
            "locale": {
            "market": {
            "maxPageSize": {
            "ModalFlow": "redeem",
            "ModalFlow": "smartInstall",
            "ModalFlow": "writeRatingsAndReview",
            "Offer": {
            "OptionalData": {
            "orderId": {
            "orderState": "Purchased",
            "parameters": {
            "parentProductId": {
            "ParentProductId": {
            "PFN": {
            "productId": {
            "ProductId": {
            "productSkuIds": [
            "productSkuIds": {
            "publisherUserId": {
            "relatedProductIds": {
            "removeQuantity": {
            "serviceTicket": {
            "SkuId": {
            "StoreId": {
            "storeSdkAttributes": {
            "trackingId": {
            "type": "string"
            "type": {
            "validityType": "Valid",
            ]
            ],
            }
            },
          "attachRecordId": {
          "hostType": {
          "isDigitalAttachment": true,
          "StoreId": {
          }
          },
        "__COMMENT__": "#0 - Get Parent Product",
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "__COMMENT__": "#1 invoke background task",
        "__COMMENT__": "#10 StoreList Query",
        "__COMMENT__": "#11 Search for products by query",
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "__COMMENT__": "#2 - Get User Collection for Products",
        "__COMMENT__": "#2 TVOD",
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "__COMMENT__": "#21 Push product to device",
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "__COMMENT__": "#29 - Digital attach redeem",
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "__COMMENT__": "#6 - Consume Consumable",
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "__COMMENT__": "#8 Store User token based monetization apis",
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "AnonymousRequest": true,
        "AuthType": 1,
        "AuthType": 2,
        "AuthType": 4
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyBufferMaxSize": 1024,
        "BodyBufferMaxSize": 20000,
        "BodyBufferMaxSize": 300,
        "BodyTemplate": {
        "DoPost": true,
        "FallbackToDeviceAuth": true
        "ForceRetailSandbox": true,
        "Height": 384
        "Height": 560
        "Index": 0,
        "Index": 1,
        "Index": 10,
        "Index": 11,
        "Index": 12,
        "Index": 13,
        "Index": 14,
        "Index": 15,
        "Index": 16,
        "Index": 17,
        "Index": 18,
        "Index": 19,
        "Index": 2,
        "Index": 20,
        "Index": 21,
        "Index": 22,
        "Index": 23,
        "Index": 24,
        "Index": 25,
        "Index": 26,
        "Index": 27,
        "Index": 28,
        "Index": 29,
        "Index": 3,
        "Index": 4,
        "Index": 5,
        "Index": 6,
        "Index": 7,
        "Index": 8,
        "Index": 9,
        "InvokePurchaseFlow": true,
        "OmitAuthTokenPrefix": true
        "RefreshLicenses": true
        "RefreshLicenses": true,
        "RequiresCapability": "previewStore",
        "RequiresCapability": "storeAppInstallation",
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false
        "RequireValidLicense": false,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "URIBufferMaxSize": 1024,
        "UseAuthIfAvailable": true
        "UseBackgroundTask": true,
        "UserTokenTypes": 3,
        "Width": 456,
        "Width": 640,
        }
        },
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
      }
      <no sku data>
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "smartInstall": {
    "writeRatingsAndReview": {
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    {
    }
    },
    <empty list>
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  <empty list>
  <missing list>
  AppId: %s, Name: %s
  Description: %s%hs
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  InAppOfferArray: %hs
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
  IsOnSale: false
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  LicenseInstance: %hs
  LicenseManager: %hs
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  Ticks until next check: %u
  UnfulfilledList: %hs
 !"#$%&'()*+,-./0123
 0$0(0,00080<0@0D0L0P0X0\0t0|0
 1J1t1
 7J7n7
 9>t#Sh$h
 ChkAlloc(m_spStoreCommerceFactory)
 http://www.microsoft.com/windows0
 info
 Microsoft Corporation. All rights reserved.
 Microsoft Operations Puerto Rico1&0$
 MR^o
 Operating System
 QWh4v
 SVW3
 WARN
 Windows
!(storeId && packageFamilyName)
!*!N!r!
!*WPq
!\$ h
!\$(j
!]_0t
!_hInternet
!_pszServer
!~X9>u
!0.0=0M0S0Z0d0}0
!00050=0x0
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
!This program cannot be run in DOS mode.
!TkjE
!Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
"&"J"t"
"0.0C0H0M0l0v0
"020@0n0
"Microsoft Window
"XkU-
"z}!M
####-##-##T##:##:##S
##:##
#(#L#p#
#0B0r0
#L$4P
#Vx"&6
$$$H$l$&"J"
$0.040D0O0f0
$Microsoft Ireland Operations Limited1
$onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
$SVW3
$SVWj
% moa
%0,01080G0M0V0]0d0k0}0
%016llX
%04u-%02u-%02u%s%02u:%02u:%02u%s
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%localappdata%\Microsoft\Windows\WER\ReportArchive
%localappdata%\Microsoft\Windows\WER\ReportQueue
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
%s export "%s" "%s" /y
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
%s%hs:%ws
%s-%s-%d-%s
%s:%s
%s:%s:%s
%windir%\Logs\dosvc
%windir%\Logs\SIH
%windir%\Logs\WindowsUpdate
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\SoftwareDistribution\ReportingEvents.log
%WINDIR%\System32\reg.exe
%ws&$skip=%u
&_*q<|
&0_0s0x0
&080F0R0^0
&2-2n2u2
&OL0O
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.Windows8x
&platformDependencyName=Windows.WindowsPhone8x
&PWSV
&S|9a
(((HRESULT)(hr)) < 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
(0/040>0j0
(0x%08x)
(8_(t
(caller: %p) 
(invalid)
(PeOC
(QD)Qj
(QShl+
).)R)
)0.060y0
)Microsoft Root Certificate Authority 20100
*.etl
*0@0R0t0
*0O0s0
,0\0t0~0
,0<0G0n0
,a$Cs
,ET/KmM6kidqRyWJOlaGtatDN4mJMAZzyPvO4+PuMig4=0Z
,L,|,
.00cfg
.0y0~0
.2.\.
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.orpc
.pcQhhA{
.QWh`
.rdata
.rdata$brc
.rdata$sxdata
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.report.wer.txt
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata$x
//ServiceEnvironment/Authentication
//ServiceEnvironment/StoreSDK
/+I}j
/tlf;E
/Z*Px
/Z/y<
/Z-[E
/Z{I<
/Z}7F
-/Z3l
/Z7i*
/Z8@b
/ZeOC
/ZhM{
/ZsOg
/ZsOg<
/ZUo~9@D
/ZW^6
/ZxqL
: :$:(:,:0:4:@:D:H:L:P:T:X:\:`:d:h:l:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:d:h:l:p:t:x:|:
: :$:(:,:0:8:<:@:D:H:L:P:T:X:\:`:h:l:p:t:x:|:
: :(:,:4:8:L:T:X:p:t:x:|:
: :(:0:4:8:<:P:X:`:h:l:t:x:
: :(:0:8:<:@:D:X:\:`:d:t:|:
: :+:=:\:
: :+:6:<:B:L:`:f:r:
: :8:@:D:L:P:d:h:l:|:
: :Q:[:`:
: ;q;
:!:&:.:N:W:j:o:
:!:&:B:O:
:!:&:M:c:
:!:(:/:6:H:
:!:.:<:X:~:
:!:.:5:;:M:U:^:e:z:
:!:h:m:w:
:!:o:
:":2:B:R:b:r:
:":8:c:j:q:
:":9:K:l:r:
:";);U;`;e;
:#:):0:
:#:F:^:n:
:#;+;2;9;?;
:$:(:.:4:::@:g:
:$:):/:M:W:\:q:
:$:):T:h:
:$:):X:n:
:$:-:;:A:M:T:^:h:o:y:
:$:>:t:
:$:0:T:
:$:1:6:@:Z:
:$:K:m:r:z:
:$;);
:$;);H;T;y;
:$;3;S;f;
:%:,:3:X:j:|:
:%:@:J:O:
:%:+:n:u:{:
:%:T:^:d:t:
:&:+:3:k:q:|:
:&:2:
:&:8:F:
:&;,;8;[;q;|;
:(:,:4:8:<:@:D:H:L:P:T:X:\:`:d:l:p:t:x:|:
:(:@:E:W:a:f:
:(:[:i:
:(:0:4:H:P:T:h:l:p:t:|:
:(:6:
:(:6:@:E:Z:h:v:{:
:(;?;Y;^;|;
:(;G;T;e;
:):>:N:U:_:t:y:~:
:):B:`:
:);P;
:*:?:O:Y:^:v:
:*:X:n:
:*:Y:
:,:4:8:P:X:`:d:l:p:
:,:C:H:~:
:,:D:N:V:b:g:l:s:}:
:,:O:
:,;1;P;U;];
:,;5;};
:.:::E:^:j:o:y:
:.:8:=:j:
:/:4:B:G:R:W:_:u:
:/:9:>:
:/:I:Y:a:
:/;<;C;J;\;v;~;
:::A:H:O:V:]:d:k:r:
::;A;G;N;p;x;
:':9:C:N:[:b:i:p:
:':9:F:g:l:v:
:':L:i:m:q:u:y:}:
::wcslen(_pszStringData) == _cchStringData
::WindowsDuplicateString(_availabilityId.Get(), pValue)
::WindowsDuplicateString(_campaignId.Get(), pValue)
::WindowsDuplicateString(_Caption.Get(), pValue)
::WindowsDuplicateString(_currencyCode.Get(), pValue)
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
::WindowsDuplicateString(_description.Get(), pValue)
::WindowsDuplicateString(_devOfferId.Get(), pValue)
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
::WindowsDuplicateString(_language.Get(), pValue)
::WindowsDuplicateString(_name.Get(), pValue)
::WindowsDuplicateString(_packageFamilyName.Get(), value)
::WindowsDuplicateString(_productId.Get(), pValue)
::WindowsDuplicateString(_productKind.Get(), pValue)
::WindowsDuplicateString(_Purpose.Get(), pValue)
::WindowsDuplicateString(_response.Get(), value)
::WindowsDuplicateString(_skuId.Get(), pValue)
::WindowsDuplicateString(_storeId.Get(), pValue)
::WindowsDuplicateString(_title.Get(), pValue)
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
:-;_;
:?:D:N:
:?:F:M:T:j:
:^;y;
:+:`:{:
:<:K:P:Z:
:<;t;~;
:=:M:h:m:u:
:>;^;
:>;g;
:>;V;$<<<
:0:[:
:0:4:8:H:P:T:l:t:|:
:0;4;8;<;@;H;P;l;p;t;x;|;
:0;7;<;F;r;
:1:@:W:~:
:1;M;x;
:2:?:Z:a:
:2:8:]:d:k:
:2:8:U:m:|:
:3:@:G:Y:d:k:
:4:;:@:G:V:\:e:l:s:z:
:4:9:S:_:m:{:
:4:9:T:Y:a:
:4:E:^:c:h:
:4:P:Z:t:y:
:4:x:
:4;9;G;L;T;i;u;
:5;D;I;Q;
:6:F:P:U:n:
:6:U:
:6;e;
:7:b:i:
:7;G;U;
:7;u;
:8:=:E:j:
:8;D;M;
:8;U;\;n;y;
:9;D;V;
:9;P;
:A:H:p:
:a:l:
:b:r:
:B:S:X:^:x:
:C:e:
:C;a;v;
:D:N:T:d:o:
:D:T:b:
:D;_;
:h:m:
:I:Z:t:
:i;p;
:K;k;
:M:T:[:b:
:N:w:
:O:x:
:o;{;
:O;n;
:P:_:i:n:
:Q;V;`;
:q;z;
:R;l;|;
:U:\:c:
:U;b;o;v;};
:W:x:
:W;|;
:X;_;
:X;m;r;
:Z/0T
:Z:a:g:n:
:Z;{;
; ;$;(;,;@;H;L;T;X;l;p;t;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;L;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;8;<;@;X;\;d;h;l;p;t;x;
; ;$;,;0;4;8;<;@;D;H;L;P;T;X;\;d;h;l;p;t;x;|;
; ;%;-;
; ;(;h;o;t;|;
; ;8;@;D;H;L;\;d;h;|;
; ;G;
; ;h;
; ;J;Q;X;_;f;m;t;{;
;!;&;0;S;b;g;q;
;!;&;E;R;
;!;;;b;r;
;!;2;9;X;~;
;!;I;
;!;O;^;k;
;!<*<X<^<v<
;!<<<E<`<j<
;";(;-;?;T;b;l;q;
;";(;2;F;\;h;
;";/;l;w;|;
;";2;B;R;b;r;
;"<N<
;#;;;H;O;U;h;s;
;#;-;2;Q;w;
;#;=;W;a;x;};
;#;5;O;Y;
;#;J;s;
;#;O;Z;f;
;$;(;.;4;:;>;D;H;M;R;X;\;b;f;k;p;v;z;
;$;(;0;4;8;T;X;\;`;d;l;p;t;
;$;);1;I;h;
;$;6;
;$;L<U<v<
;$<~<
;%;/;4;P;
;%;+;
;%;+;0;6;>;F;R;X;^;d;m;v;~;
;%;4;
;%;E;\;k;
;%;H;S;d;k;
;%<9<t<~<
;&;_;{;
;&;+;5;G;L;T;j;
;&<~<S=^=o=v=
;&<6<O<^<h<m<
;(;,;0;4;H;T;X;`;d;h;
;(;6;B;
;(;7;<;F;];
;(;8;A;z;
;(;P;
;(;Q;u;
;(</<4<><
;);.;8;[;g;y;
;);.;U;k;
;);:;\;b;l;
;);4;;;P;
;)<\<t<
;)<u<
;*;9;w;
;*;R;W;h;
;*</<4<
;,;;;E;J;_;
;,;<;^;k;s;{;
;,;B;
;,<3<:<A<e<r<
;';,;1;8;B;
;;;B;I;];
;;<A<W<^<h<m<
;-;2;<;F;P;Z;d;n;x;
;-;K;X;_;{;
;-;R;z;
;?;D;t;
;?<x<
;@;Z;k;
;[;a;l;q;v;
;[;w;
;`;z;
;+;<;A;K;g;|;
;<;E;];d;k;
;<;l;
;<<A<X<
;<<b<
;'<N<
;>;E;P;f;
;>;R;d;v;
;>;s;
;><u<~<
;0;<;A;K;];b;
;0;5;?;W;e;s;};
;0;7;G;a;w;
;0;d;
;1;`;
;2;<;A;i;
;2;7;<;C;M;k;
;2;A;i;
;2<><P<V<[<
;4;^;
;5;:;D;Z;
;5;>;v;
;5<B<U<r<
;6;f;x;
;6;H;V;
;6<;<E<
;6<I<N<X<
;6<J<r<
;8;D;
;8;G;o;~;
;8;H;M;W;
;8<?<D<L<
;8=y=O>
;9<@<
;A;F;K;R;\;
;B;X;y;
;c<k</>x>
;D;\;
;E<d<
;E<U<Z<b<
;F;K;U;|;
;F;X;f;
;G;L;V;
;G;Y;_;f;p;
;H;M;U;l;
;H@t-
;H@t&
;H@t?
;H0t-
;H0t&
;H0t?
;H0tES
;J;U;f;m;
;J0t>
;K@t(
;K@t<
;K0t(
;K0t<
;L;Q;[;
;L;U;
;L;w;
;l<}<
;l<u<
;M;];g;l;
;N;T;[;e;
;N<c<
;P;q;v;
;P;Z;
;Q;W;\;d;
;Q@t;
;Q@t4
;Q@tZ
;Q<e<
;Q0t;
;Q0t3
;Q0t4
;Q0tES
;Q0tQS
;Q0tZ
;r<|<
;S;h;s;
;V<h<v<
;w(s/
;W;{;
;W<\<|<
;X<i<s<x<
;Z;a;f;p;
;Z;e;v;};
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?x?|?
? ?$?(?,?0?4?8?<?@?D?H?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?%?;?r?
? ?.?\?r?
? ?'?-?D?J?c?j?q?
? ?2?=?D?K?`?
? ?2?7?O?
? ?j?
? ?X?g?l?t?
?!?&?<?U?x?
?!?)?_?
?!?-?=?a?y?
?!?@?E?p?u?
?!?<?h?o?
?!?C?
?!?X?k?x?
?"?/?
?"?'?/?G?L?W?\?d?|?
?"?0?^?t?
?"?2?B?R?b?r?
?"?2?I?N?j?s?
?"?8?C?
?"?k?q?~?
?"?P?f?
?#?(?2?b?k?p?z?
?#?-?g?l?v?
?#?9?
?$?(?.?2?7?=?A?F?K?P?U?Z?
?$?(?@?H?P?X?`?h?l?p?t?x?
?$?(?0?4?H?P?T?h?l?p?
?$?,?0?4?8?L?T?X?`?d?|?
?$?,?z?
?$?.?v?
?$?/?K?g?w?
?$?:?b?g?q?
?$?+?5?P?W?y?
?$?+?A?I?P?W?]?t?z?
?$?D?]?|?
?$?F?v?
?%?*?4?E?J?T?e?j?t?
?%?4?8?>?B?H?N?R?X?^?d?j?p?
?%?A?M?Y?e?q?
?%?S?[?|?
?%?T?^?d?t?
?&?>?M?u?
?&?2?7?<?C?M?_?
?&?2?B?F?M?Q?V?\?`?e?j?o?t?y?
?&?8?E?d?n?s?
?(?,?0?4?8?@?D?H?L?\?d?h?|?
?(?/?
?(?=?H?M?R?_?
?(?1?=?E?T?e?n?z?
?(?3?:?g?
?(?Y?^?h?
?)?:?
?)?:?A?`?
?)?@?g?
?)?=?N?_?
?)?A?R?W?a?
?)?p?
?*?1?7?J?U?j?x?
?,?7?>?E?k?s?z?
?.?5?;?B?
?.?8?=?~?
?/?>?z?
?:?A?H?^?
?;?`?
???D?p?
???O?]?
??_V@YAXPAX@Z
?-?2?<?T?q?
?'?8?=?G?
?-?9?A?b?
?'?c?
?'?O?~?
?@?u?|?
?[?g?n?x?
?\?i?p?w?~?
?+?\?i?
?+?<?d?k?q?~?
?+?0?:?P?
?+?E?O?|?
?<?L?Q?[?
?<?V?`?e?
?=?W?d?i?s?
?0?:???m?|?
?0?5???c?m?r?
?0?5?Q?V?^?|?
?0?5?U?Z?z?
?0?8?@?D?H?L?\?`?d?t?x?|?
?0?J?O?W?
?0?U?b?i?{?
?0D0N0}0
?1?:?F?M?T?[?e?o?
?2?H?|?
?3?c?
?3?N?S?]?}?
?4?8?<?@?D?H?L?P?T?X?\?`?d?l?p?x?|?
?4?h?o?t?~?
?4?N?w?|?
?456789:;<=
?6?;?Q?`?e?{?
?6?F?T?
?6?H?V?
?8?N?]?s?
?8?S?
?9?F?M?S?f?q?
?9?I?W?
?9?X?k?
?A?`?
?B?i?
?B?q?w?|?
?B?S?X?^?x?
?D?I?S?
?f?m?r?
?H?M?U?
?H?M?W?
?h?o?t?|?
?I?]?
?i?s?x?
?K?P?Z?
?R?q?{?
?U?`?
?V?w?
?Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
@.didat
@.reloc
@9D$,
@d;A(t
[%hs(%hs)]
[%hs]
[CV:%2]
[Z7fw
\$ PSSj
\$ t)
\$$RQ
\$(9L$<
\$09\$8vu
\$88Y9uES
\\?\T:\Windows\System32\LogFiles\DOSvc
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
^V*]TjY
^Wh,e
^Wh@Z
^WhPZ
^xh3B
_%.chYm
_\bnTO
_^[Y]
__CxxFrameHandler3
__dllonexit
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationProgressHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgress_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterable_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterable_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterable_1_Windows__CServices__CStore__CStoreAvailability
__FIIterable_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterable_1_Windows__CServices__CStore__CStoreImage
__FIIterable_1_Windows__CServices__CStore__CStoreLicense
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterable_1_Windows__CServices__CStore__CStoreSku
__FIIterable_1_Windows__CServices__CStore__CStoreVideo
__FIIterator_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterator_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterator_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterator_1_Windows__CServices__CStore__CStoreAvailability
__FIIterator_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterator_1_Windows__CServices__CStore__CStoreImage
__FIIterator_1_Windows__CServices__CStore__CStoreLicense
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterator_1_Windows__CServices__CStore__CStoreSku
__FIIterator_1_Windows__CServices__CStore__CStoreVideo
__FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMap_2_HSTRING_EventRegistrationToken
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMap_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMap_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMapView_2_HSTRING_EventRegistrationToken
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMapView_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreContext_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStorePackageLicense_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_Windows__CServices__CStore__CStoreQueueItemCompletedEventArgs
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVector_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVector_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVector_1_Windows__CServices__CStore__CStoreAvailability
__FIVector_1_Windows__CServices__CStore__CStoreCollectionData
__FIVector_1_Windows__CServices__CStore__CStoreImage
__FIVector_1_Windows__CServices__CStore__CStoreLicense
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVector_1_Windows__CServices__CStore__CStoreProduct
__FIVector_1_Windows__CServices__CStore__CStoreQueueItem
__FIVector_1_Windows__CServices__CStore__CStoreSku
__FIVector_1_Windows__CServices__CStore__CStoreVideo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVectorView_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVectorView_1_Windows__CServices__CStore__CStoreAvailability
__FIVectorView_1_Windows__CServices__CStore__CStoreCollectionData
__FIVectorView_1_Windows__CServices__CStore__CStoreImage
__FIVectorView_1_Windows__CServices__CStore__CStoreLicense
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVectorView_1_Windows__CServices__CStore__CStoreProduct
__FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIVectorView_1_Windows__CServices__CStore__CStoreSku
__FIVectorView_1_Windows__CServices__CStore__CStoreVideo
__tag
__TlgCV__
__x_Windows_CApplicationModel_CStore_CICurrentApp
__x_Windows_CApplicationModel_CStore_CICurrentApp2Statics
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulator
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CICurrentAppStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppWithConsumables
__x_Windows_CApplicationModel_CStore_CILicenseChangedEventHandler
__x_Windows_CApplicationModel_CStore_CILicenseInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation2
__x_Windows_CApplicationModel_CStore_CInternal_CIAuthenticationExtension
__x_Windows_CApplicationModel_CStore_CInternal_CIConsumableProduct
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper2
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIProductListingPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce2
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommercePreview
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulator
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkState
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkStateChangedEventHandler
__x_Windows_CApplicationModel_CStore_CIProductLicense
__x_Windows_CApplicationModel_CStore_CIProductLicenseWithFulfillment
__x_Windows_CApplicationModel_CStore_CIProductListing
__x_Windows_CApplicationModel_CStore_CIProductListing2
__x_Windows_CApplicationModel_CStore_CIProductListingWithConsumables
__x_Windows_CApplicationModel_CStore_CIProductListingWithMetadata
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayProperties
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayPropertiesFactory
__x_Windows_CApplicationModel_CStore_CIPurchaseResults
__x_Windows_CApplicationModel_CStore_CIUnfulfilledConsumable
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics2
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionInfo
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionResult
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics2
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics3
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics4
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics5
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreHardwareManufacturerInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreview
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewProductInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewPurchaseResults
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewSkuInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIWebAuthenticationCoreManagerHelper
__x_Windows_CServices_CStore_CInternal_CIGetNextStoreProductOperation
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdItem
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdResponse
__x_Windows_CServices_CStore_CInternal_CIStoreContextCallerData
__x_Windows_CServices_CStore_CInternal_CIStoreContextLicensesChangedCallback
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer2
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer3
__x_Windows_CServices_CStore_CInternal_CIStorePackageLicenseLostCallback
__x_Windows_CServices_CStore_CInternal_CIStorePackageUpdatePrivate
__x_Windows_CServices_CStore_CIStoreAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreAppLicense
__x_Windows_CServices_CStore_CIStoreAppLicense2
__x_Windows_CServices_CStore_CIStoreAvailability
__x_Windows_CServices_CStore_CIStoreCanAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreCollectionData
__x_Windows_CServices_CStore_CIStoreConsumableResult
__x_Windows_CServices_CStore_CIStoreContext
__x_Windows_CServices_CStore_CIStoreContext2
__x_Windows_CServices_CStore_CIStoreContext3
__x_Windows_CServices_CStore_CIStoreContext4
__x_Windows_CServices_CStore_CIStoreContextStatics
__x_Windows_CServices_CStore_CIStoreImage
__x_Windows_CServices_CStore_CIStoreLicense
__x_Windows_CServices_CStore_CIStorePackageInstallOptions
__x_Windows_CServices_CStore_CIStorePackageLicense
__x_Windows_CServices_CStore_CIStorePackageUpdate
__x_Windows_CServices_CStore_CIStorePackageUpdateResult
__x_Windows_CServices_CStore_CIStorePackageUpdateResult2
__x_Windows_CServices_CStore_CIStorePrice
__x_Windows_CServices_CStore_CIStoreProduct
__x_Windows_CServices_CStore_CIStoreProductOptions
__x_Windows_CServices_CStore_CIStoreProductPagedQueryResult
__x_Windows_CServices_CStore_CIStoreProductQueryResult
__x_Windows_CServices_CStore_CIStoreProductResult
__x_Windows_CServices_CStore_CIStorePurchaseProperties
__x_Windows_CServices_CStore_CIStorePurchasePropertiesFactory
__x_Windows_CServices_CStore_CIStorePurchaseResult
__x_Windows_CServices_CStore_CIStoreQueueItem
__x_Windows_CServices_CStore_CIStoreQueueItem2
__x_Windows_CServices_CStore_CIStoreQueueItemCompletedEventArgs
__x_Windows_CServices_CStore_CIStoreQueueItemStatus
__x_Windows_CServices_CStore_CIStoreRateAndReviewResult
__x_Windows_CServices_CStore_CIStoreRequestHelperStatics
__x_Windows_CServices_CStore_CIStoreSendRequestResult
__x_Windows_CServices_CStore_CIStoreSendRequestResult2
__x_Windows_CServices_CStore_CIStoreSku
__x_Windows_CServices_CStore_CIStoreSubscriptionInfo
__x_Windows_CServices_CStore_CIStoreUninstallStorePackageResult
__x_Windows_CServices_CStore_CIStoreVideo
_amsg_exit
_AppendToDataBuffer failed
_AreAllDownloadsComplete
_availabilities->GetView(ppValue)
_BuildBeneficiaryArrayJSON
_BuildBeneficiaryJSON
_BuildGoldenBeneficiaryArrayJSON
_BuildGoldenBeneficiaryJSON
_callnewh
_CheckOptionalPackageIsValid
_ConstructRequestBody
_contentIds->GetView(value)
_ConvertAppInstallState
_ConvertStoreQueueState
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
_DownloadData()
_errno
_except_handler4_common
_extendedJsonData.Set(value)
_FilterProductsJson
_fInitialized
_ftol2
_ftol2_sse
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
_hCancelInternal
_hRequest
_hRequest == 0
_hRequest == hRequest
_images->GetView(ppValue)
_initterm
_IsNetworkMetered
_items->GetView(value)
_itow_s
_keyIds->GetView(value)
_keywords->GetView(ppValue)
_licenseLostEvent.Add(pHandler, pToken)
_licenseLostEvent.Remove(token)
_lock
_mapView.CopyTo(ppValue)
_modalManager != nullptr
_name.Set(name)
_name.Set(value)
_onexit
_ParseGetProductsByKinds
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
_pConnection == nullptr
_pPackage.CopyTo(ppPackage)
_pPackage->get_Id(packageId.GetAddressOf())
_pPackageLicense.CopyTo(ppValue)
_productId.CopyTo(value)
_productStoreId.Set(productStoreId)
_pszStringData == nullptr
_purchaseStatus == ProductPurchaseStatus_NotPurchased
_purecall
_ReceiveResponse failed
_request.CopyTo(json)
_response.CopyTo(json)
_response.Set(json)
_s/Z{I<
_SendJsonToURLWithHttpClientForStringResponse
_set_errno
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
_ShouldFilterByRelationship
_skus->GetView(ppValue)
_snwprintf_s
_spPreviewImage.CopyTo(ppValue)
_spStoreContextServer.As(&result)
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
_transactionId.IsValid()
_unlock
_videos->GetView(ppValue)
_vsnprintf
_vsnwprintf
_WaitForLastAsyncCompletion failed
_wcsdup
_wcsicmp
_wcstoi64
_wcstoui64
_wcsupr
_WinStoreSDK_Receipt_Cache
_wtof
_wtoi
_wtol
_XcptFilter
`.data
`/ZQl
``PJn
`+C%PZZ
`0^0\
`QWh 
`tW3#W
{"status": "aborted"}
{268761a2-03f3-40df-8a8b-c3db24145b6b}
{Boxg
{client}
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
{featureName}
{idType}
{installedPublisherId}
{lang}
{languages}
{market}
{marketCode}
{parentProductId}
{platformDependencyNameParam}
{productId}
{receiptType}
{RlGX
|$$Pj
|$<9L$<
|F*b}
|jyd&1
|nq\r
} QVh
}3NANU3
}7QWh
~,T+J
~/ZxqL
+>+b+
< <$<(<,<@<D<L<P<d<l<p<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<|<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<4<8<<<@<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<8<<<@<D<H<L<P<T<X<\<`<d<h<p<t<x<|<
< <$<(<,<0<8<<<@<D<L<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <%<-<g<l<|<
< <%<2<J<l<v<
< <&<*<0<4<:<><D<H<Z<a<v<
< <*<t<
< <,<H<L<P<T<`<h<p<x<
< <<<W<m<r<|<
< <8<@<D<H<L<\<d<h<
< <h<
< =6=\=c=j=q=
< =f=
<!<&<+<0<
<!<&<O<
<!<)<N<`<e<
<!<*<?<D<N<d<
<!<@<H<M<W<
<!<S<
<!=&=+=2=<=u=
<!=&=+=X=y=
<!=&=I=N=n=s=
<!=S=d=(>]>
<"<*<=<S<
<"<,<A<K<P<h<v<{<
<"<'</<V<x<}<
<"<7<G<U<_<d<|<
<"<b<
<"<T<d<n<s<
<#<_<
<#<-<?<h<w<
<#<-<^<h<m<
<#<1<_<u<
<#<5<=<F<M<b<
<#<B<R<b<r<
<#<D<
<#<F<R<d<v<
<#=*=4=9=V=k=v=
<#=-=:=N=T=a=t=
<#=3=A=o=
<$<(<,<<<D<H<\<d<h<|<
<$<(<<<@<D<\<`<h<l<p<t<|<
<$<*<I<P<W<k<
<$<`<
<$<+<5<a<g<q<
<%<,<3<:<A<S<l<x<
<%<+<2<<<
<%<2<Y<
<%<m<
<%=+=0=G=Z=`=j=~=
<%=r=z=
<&<-<4<;<B<I<P<i<m<q<u<y<}<
<&<8<F<R<
<&<C<
<&=+=3=X=_=d=l=
<&=-=4=;=L=j=}=
<&=-=4=J=R=Y=`=f=}=
<(<-<2<?<]<d<o<
<(<3<B<L<Q<|<
<(<I<S<X<r<
<(<U<_<l<
<(=/=4=>=
<)<.<8<f<q<
<)<.<8<M<R<\<t<
<)<.<Z<_<
<)<><K<P<X<n<
<*<G<
<*<I<W<l<~<
<,<0<@<D<H<L<\<d<h<
<,<3<P<k<
<,<6<;<a<g<
<.<<<H<T<
<.<<<j<
<.<C<H<P<
<.=8===
<.=o=y=
</<6<;<B<Q<W<`<g<n<u<
</<C<j<
</<D<I<[<|<
<:<\<k<x<
<:=@=
<??YzU
<@=U=
<\<|<
<\<g<l<q<{<
<]<b<l<
<^<m<w<|<
<_<d<l<
<`=0>
<|</=
<+<=<[<d<s<
<+<5<:<}<
<+<h<o<t<|<
<+<L<
<+=^=h=u=
<'<?<y<
<-<[<q<
<-<<<O<
<<<l<
<<=E=V=p=
<-<4<;<
<-<4<m<t<{<
<'=a=v=
<'=y=
<0<7<x<
<0<b<
<0=C=o={=
<0=W=
<1<h<
<1<J<W<n<
<1=6=I=o=
<2<9<@<]<q<
<2<9<L<Q<f<m<
<3<><o<{<
<3<B<_<o<y<~<
<3<I<o<
<3<M<_<t<
<3=;=T=\=o=t=z=
<4<><K<a<
<4<><K<x<
<4<9<><{<
<4<l<u<
<4<q<
<4<V<e<
<4<Y<
<5<:<K<^<l<
<5=N=i=
<6<;<E<
<6=T=j=
<7<M<
<7=S=
<8<e<o<|<
<9<A<K<P<e<
<A<P<
<A<v<|<
<b<g<q<
<B=L=^=
<B=r=
<B=R=`=
<b=w=
<C=n=s=x=
<E=`=i=
<F<M<T<[<l<
<F<U<
<H<i<
<H<x<
<H=U=_=d=
<hRU!
<I<`<
<J<e<}<
<J<Z<u<
<L<g<
<l<u<
<N<X<h<m<w<
<N<Y<d<o<z<
<O<U<[<
<O=T=
<Q<q<{<
<R=\=a=
<R=b=p=
<T<`<l<x<
<unknown>
<V<[<e<|<
<v<{<
<V<h<v<
<V<s<~<
<W=a=f=
<W=u=
<Z<a<g<n<
<Z=m=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=D=H=L=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=D=H=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=
= =$=(=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=<=D=L=T=X=`=d=|=
= =%=2=H=^=
= =(=,=0=4=8=<=@=D=H=L=P=T=X=`=d=h=l=p=t=x=|=
= =(=,=0=8=<=D=H=`=h=
= =<=@=D=H=L=T=X=\=p=x=
= =<=A=F=L=V=
= =h=
= =N=d=
= >->:>A>G>Y>a>j>q>
=!=&=.=g=n=s={=
=!=(=:=E=L=a=
=!=,=W=\=
=!=/===B=L=d=n=s=
=!=\=
=!=-=n=
="=*=/=R=n=
="=/=u=z=
="='=1=m=
="=1=5=;=?=E=L=R=V=\=`=f=m=s=w=}=
="=2=B=R=b=r=
="=8=T=w=
=">(>B>H>b>t>
=">'>G>V>[>
=#=*=1=D=M=Y=`=g=n=x=
=#=0=7=I=T=[=p=
=#=O=U=_=i=
=$=(=,=0=D=L=X=\=d=h=l=p=t=x=
=$=.=T=i=
=$=+=0=:=c=h=r=
=$=+=1=
=$=a=
=$=I=w=~=
=$=X=_=d=l=
=$>.>3>[>{>
=%=*=4=E=J=T=e=j=t=
=%=,=[=
=%=/=4=V=e=
=%=S=i=
=%>,>
=&=/=<=o=t=|=
=&=?=M=[=i=y=
=&=0=K=w=~=
=&=1=G=f=
=&=L=k=v=
=&>+>3>m>r>z>
=&>c>s>
=(=-=5=K=d=t=y=
=(=-=S=b=
=(=6=
=(=7=f=
=(>/>4><>
=)=@=
=)=@=E=J=z=
=)=[=k=u=z=
=)=7=<=F=
=)=8=L=]=f=v=
=)=a=
=)=J=
=)=j=
=*=:=>=D=I=N=S=
=*>:>U>c>
=*>1>;>@>_>n>
=*>1>6>=>L>R>[>b>i>p>
=*>M>{>
=,=`=m=t={=
=,=4=8=L=P=T=d=h=l=|=
=,=A=K=P=e=~=
=,>1>;>e>
=,>5>P>
=,>7>n>
=,>D>N>V>b>g>l>s>}>
=.=D=
=.=G=
=.=R=a=t=
=/=4=9=T=i=x=}=
=/>4>Q>V>^>
=:=`=
=;>\>o>u>
=;>`>
=@=V=q=
=@>U>f>
=\=k=u=z=
=\>f>
=+=0=:=a=
=+=g=t=~=
='=.=3=;=
=-=?=L=q={=
='=<=
=-=<=`=
='=-=4=:=g={=
==>n>~>
=-=8=K=c=n=
=-=B=j=w=~=
='=I=T=i={=
=-=o=t=~=
='>.>3>;>e>j>
=>=\=
=>=R=
=->s>
=->y>
=0=5=?=U=z=
=0=J=T=
=1=7=A=M=l=
=1>7>E>Z>
=2=7=A=W=
=2=7=B=G=R=W=b=r=
=2=H=d=
=3=V=|=
=3>_>
=4={=
=4=9=^=
=4>9>k>p>x>
=5>J>|>
=6=;=@=G=O=h=z=
=6>E>J>T>
=7=<=e=
=7=F={=
=8=R=p=
=9=A=K=P=e=
=9=J=O=Y=o=
=9>@>d>o>v>
=A=H=u=
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
=B=R=W=j=r=
=b=s=x=~=
=C=Y=
=E=[=
=E=\=s=~=)>0>:>?>]>b>g>n>x>
=E>L>V>
=F=U={=
=F=X=f=
=F>S>Z>a>s>~>
=g=m=z=
=G=N=S=[=
=H?n?u?
=I=V=]=o=z=
=K=Z=_=
=L=Q=[=
=l=u=
=P>W>\>f>
=Q=_={=
=R=c=h=n=
=R>Y>
=T=}=
=U=j=y=~=
=V>h>v>
=W=^=c=k=
=W>q>v>~>
=X=_=d=l=
=X>m>r>z>
=X>w>
> ?1?
> ?F?c?o?
> >$>(>,>@>D>H>L>P>X>`>h>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>d>h>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>T>X>\>`>d>h>l>p>t>x>|>
> >%>*>/>P>]>i>
> >&>F>K>U>
> >3>:>[>
> >4>8><>P>X>\>d>h>
> >4>X>_>f>z>
> >7>v>
> >F>Z>t>
> >G>V>z>
>!?(?
>!?'?,?4?a?g?l?t?
>!?'?,?6?
>!?<?J?W?h?z?
>!?3?>?C?j?
>!>&>M>b>
>!>,>9>@>R>
>!>'>->7>\>k>p>z>
>!>7><>H>Y>j>
>"?5?=?M?q?w?~?
>"?n?
>">)><>E>Q>X>_>f>p>z>
>">,>1>W>p>
>">=>B>J>
>">'>/>f>m>r>
>">2>B>R>b>r>
>">O>\>i>n>x>
>">t>
>#?[?
>#>(>G>W>
>#>,>;>{>
>#>.>O>j>
>#>+>r>w>
>#>D>I>Q>i>u>
>#>L>d>p>
>#>w>}>
>$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
>$>0>4><>@>D>L>P>X>\>t>|>
>$>B>J>e>|>
>$>N>h>
>$>P>]>f>k>s>
>$>X>_>d>l>
>%?,?G?m?
>%?G?L?b?j?p?
>%>*>/>S>n>}>
>%>*>4>E>J>T>e>j>t>
>%>*>4>O>
>%>,>>>H>T>\>c>i>u>
>%>;>
>%>>>L>X>d>
>%>S>i>
>&???O?T?\?s?
>&>+>Y>~>
>&>2>
>&>3>:>A>H>O>V>]>,?`?f?l?q?
>&>3>h>o>t>~>
>&>8>k>p>z>
>&>9>L>_>m>t>
>&>9>O>X>g>~>
>(?/?4?<?f?k?
>(>\>f>k>
>(>6>=>C>
>(>6>B>
>(>7>A>F>\>a>~>
>)>@>E>t>
>)>5>H>O>Y>
>)>H>R>W>s>
>*?4?9?e?
>*>/>G>L>T>
>*>7><>W>\>d>
>*>9>P>
>*>Q>`>
>,?7?W?\?f?
>,?k?
>,?L?Q?[?
>,>L>]>w>
>.><>J>X>b>g>
>.>3>;>
>.>W>
>/>I>p>
>:?Y?^?h?
>:>t>
>;?@?\?a?y?
>'?A?L?q?
>@>*?~?
>@>V>|>
>[?g?
>\?c?j?q?
>+>0>:>f>u>
>+>2>8>K>V>h>o>
><?C?O?
><>K>t>
>=?H?Y?c?
>=?S?l?
>'>.>5>N>\>h>t>
>>?T?[?`?j?
>'>1>E>\>q>{>
>'>1>F>K>P>r>|>
>->7>O>n>
>'>8>Y>a>k>p>
>'>9>>>F>\>j>x>
>'>A>W>
>'>G>Q>V>l>
>->L>S>Z>a>
>->S>
>'>X>x>
>0>?>D>N>c>r>
>0>?>I>N>
>0>4>8><>@>H>L>P>`>d>h>|>
>0>7>W>
>0>B>U>d>
>1>:>F>M>T>[>e>o>
>1>S>r>
>2?h?
>2>=>H>M>r>z>
>2>7>>>D>J>R>{>
>2>S>z>
>3?:?A?I?c?|?
>3>=>G>m>
>4>>>C>
>4>9>C>y>
>4>A>f>}>
>4>Z>w>}>
>5>J>
>6>X>b>g>
>7>J>i>s>x>
>7>M>s>
>7>S>|>
>8>G>X>y>
>9?>?F?m?r?
>A>n>}>
>B?V?c?l?u?
>b>g>l>s>z>
>B>G>L>S>Z>
>B>Q>f>
>B>S>X>^>x>
>C?K?P?[?|?
>c>r>
>D?b?x?
>D>Z>
>E?L?^?
>E?r?w?
>E>[>
>E>j>z>
>F?X?f?
>G>|>
>H>L>P>T>X>\>l>t>x>
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>I>V>]>d>j>}>
>L?U?p?
>M>z>
>NGdx
>o>v>
>P?W?^?e?p?
>p?y?
>Q?V?^?
>T?r?
>U?g?r?w?
>X>o>t>
>Y?`?j?
0 0$0(0,00040<0@0D0H0L0P0T0X0\0`0d0h0l0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0l0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0d0h0l0p0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,0004080<0@0D0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,00080@0D0\0d0h0p0t0
0 0$0(0,080@0D0H0L0P0X0\0d0h0|0
0 0$0*0/04090T0}0
0 0%0*070_0q0
0 0.0F0X0e0
0 0/090>0a0p0
0 0F0V0d0
0 0H0l0
0 1%1*1G1i1v1{1
0 1&1<1C1M1R1w1~1
0!0&070u0}0
0!0&0L0[0k0
0!0/0>0Y0{0
0!030>0E0L0a0
0!0B0G0g0l0
0!1A1K1P1
0"0/0=0G0R0b0r0
0"0~0
0"0'0,030=0O0x0
0"0'0/0E0T0
0"191C1H1x1
0#0(020]0z0
0#090_0f0
0#0J0m0x0
0#1H1X1f1
0$0(0,00080@0H0P0X0\0d0h0
0$0)0?0O0]0{0
0$0)0~0
0$0)0Z0i0
0$0,04080<0@0T0\0`0d0h0x0|0
0$0;0
0$0+070X0
0$010;0@0g0
0$04090A0h0{0
0%0*0?0x0
0%0*040E0J0T0e0j0t0
0%0,030=0G0t0
0%0.070@0I0R0
0%0<0V0
0%02070B0G0O0_0d0o0t0
0%0F0P0U0t0
0%131:1D1c1
0&0/0<0
0&0-040N0k0
0&0-0N0U0[0
0&020
0&0G0V0k0
0&0h0z0
0&0Q0
0&1D1K1R1h1{1
0(0#1I1P1W1
0(0.060<0B0H0N0S0Z0`0f0l0r0w0~0
0(0]0
0(00040L0T0X0`0d0|0
0(1=1H1^1z1
0(171V1[1`1
0)0.060Y0^0u0
0)0J0W0]0p0|0
0)1.181j1z1
0)131J1
0*0]0
0*00040:0>0D0J0P0T0Z0`0f0l0|0
0*090G0U0c0t0
0*0K0Z0
0*1@1f1v1
0*151F1M1l1
0,010?0Q0V0
0,050|0
0,050<0t0
0,1;1@1J1p1
0.0@0R0
0.0^0
0.0=0[0q0
0/0G0Q0V0
0:0@0J0V0u0
0:0C0R0
0;1_1d1z1
0;1G1W1[1a1f1k1p1
0?1H1i1
0?1P1
0@0E0z0
0@1E1M1
0\0e0
0_0|0
0_0i0
0+020<0A0m0t0
0+0Q0V0`0
0+0Y0o0
0<1E1d1t1
0<1K1P1X1t1
0<1V1g1
0=0D0[0r0
0=0S0_0~0
0'0,060H0M0p0u0
0'0>0
00040<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
00050j0z0
00090@0]0g0r0
00090>0I0k0v0
000O0n0
000T0b0q0v0}0
00151:1A1K1n1
00171C1H1P1j1o1
001P1
0-0l0
0-0R0b0p0
0'1,1<1`1e1
010;0@0g0s0
010?0I0S0}0
010M0j0t0y0
010r0
010Y0f0s0z0
0'1S1a1h1u1z1
0'1T1m1|1
020_0
02070?0W0i0n0
020f0v0
020N0`0v0{0
020O0
020o0
021T1i1
031I1o1v1
031Q1`1j1o1
040@0H0t0x0
040904B0
041:1A1K1
041u1t2
050@0G0~0
050j0
051W1
060;0@0U0j0
061;1Q1
061C1
070<0F0
070K0e0r0
071<1W1c1v1
080=0E0e0
081E1L1_1h1y1
081q1
090q0v0~0
091C1q1
091t(P
0a0{0
0B0f0
0b1w1
0d0i0q0
0D0Z0}0
0D1b1x1
0D1U1y1
0f0p0u0
0F0S0`0g0m0
0F0V0[0c0
0F0X0f0r0~0
0f1k1
0F1K1
0F1X1f1r1
0H0O0V0
0H1O1T1\1
'0I0k0
0J0O0Y0y0
0J0Q0V0]0l0r0{0
0J1T1
0k1s1'2
0l0u0
0L1U1v1
0M0c0
0m0r0|0
0N0S0[0
0N0v0{0
0o0v0
0QWh,
0R1a1k1p1
0SVW3
0T0n0
0T1e1o1t1
0U0\0c0
0V0y0
0xABBACAB
0Y0n0
0Yh"C
0Z0e0v0}0
0Z1e1v1}1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1x1|1
1 1$1(1,1014181<1@1D1H1L1P1X1\1`1d1h1l1p1t1x1|1
1 1$1(181<1@1T1X1`1d1x1
1 1$1,10141<1@1H1P1X1\1`1d1h1p1t1x1|1
1 1$1,101H1P1T1X1\1p1x1
1 1(1,1@1H1L1`1h1l1
1 1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1)121J1r1
1 1*101J1U1d1i1t1
1 121G1M1R1Y1p1
1 1F1Z1t1
1 2%2v2{2
1 2&2,212@2F2[2m2
1 2&2.2@2E2M2g2m2
1 2C2
1 2E2
1!1&1.1_1
1!1&1J1Q1b1o1
1!1'1.1
1!1l1s1z1
1!2/2M2j2
1"1(1.12181<1B1I1O1S1Y1]1c1j1p1t1z1~1
1"1?1O1Y1^1s1
1"141?1F1M1b1
1"141?1F1M1T1i1
1"171f1t1
1"181=1I1o1
1"1P1f1
1"222@2n2
1"23282>2X2p2Z3
1"2L2|2
1#1*11181?1E1
1#1:1I1N1X1n1
1#1+1X1]1x1
1#131N1]1
1#1B1a1
1#1X1
1#23282@2j2u2
1#2H2m2
1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1$1(1014181<1@1D1X1`1d1h1l1|1
1$1(10141H1L1P1`1d1h1l1t1x1
1$1,141<1D1L1T1p1t1x1|1
1$1+12191@1G1N1a1
1$141?1V1y1
1$1E1J1O1
1$282s2~2
1$2B2a2
1%1*141E1J1T1e1j1t1
1%1*141J1_1f1r1
1%1*151:1B1W1d1
1%1,13191L1U1^1e1l1
1%1\1e1
1%1+1/15191?1E1K1O1U1[1a1g1w1
1%1+1i1
1%171B1
1&282F2R2
1&2B2N2Z2b2
1(0&0
1(1,101D1H1P1T1h1l1p1
1(151<1C1J1\1g1n1u1|1
1(1A1H1T1
1(1M1d1
1(2/242<2
1(2B2
1(2F2L3
1)1/161@1S1X1b1w1
1)111;1@1U1
1)131=1G1Q1[1e1o1y1
1)1A1S1`1
1)23282h2
1*1/1O1T1o1t1|1
1*11181J1U1\1c1x1
1*191>1H1
1,1D1a1
1,252V2h2v2
1.1=1m1
1.151l1s1z1
1.181=1]1b1l1
1.2;2y2
1.232=2y2
1/0-0
1/1:1X1o1
1/171<1F1f1
1/1P1
1/2:2P2q2~2
1/2U2v2
1/Zfj
1:1F1Z1k1
1:2\2}2
1:2f2
1;1@1J1r1w1|1
1;1T1h1m1w1
1;2E2
1?1o1
1?1O1T1^1{1
1@1a1o1t1
1^1h1m1
1^2v2D3\3
1+1[1
1+121;1
1<1G1L1Q1^1~1
1<1V1g1
1<2E2
1<2E2f2x2
1<2G2L2Q2^2~2
1=1B1L1
1=2f2
1>2C2J2a2q2y2
10.0.19041.2075
10.0.19041.2075 (WinBuild.160101.0800)
100706204017Z
101F1l1|1
101V1f1t1
101w1
102]2j2t2z2
10252?2_2e2
102C2
1'1>1D1X1y1
1'101=1D1]1
111C1H1Q1
1-141;1}1
1-1U1i1
121>1d1
1'2E2O2T2
131<1A1L1n1y1
131<1B1O1m1
131o1{1
132:2D2K2w2|2
132E2n2
141B1d1
141Y1v1
142:2
151t1y1
161M1\1a1k1
162H2V2b2
181?1[1
181e1o1|1
181E1O1T1k1
182D2
192@2G2|2
1B1f1k1
1B1f1x1
1b1i1o1v1
1C1J1Q1
1c1n1}1
1D1I1S1
1D2L2Q2[2
1e'%WR
1E1j1
1F1`1u1
1f1x1
1F1X1f1
1F2M2S2Z2
1f2m2w2|2
1G1\1a1k1
1H1i1
1H1M1U1k1
1h1o1t1|1
1H1u1
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
1I1`1
1i1n1x1
1I1S1i1
1i2n2
1L1[1l1
1L1b1g1
1l1q1v1
1L2U2j2
1N2[2b2n2|2
1O2v2}2:4V4
1P1_1M2V2e2
'1P2]2d2v2
1T1n1~1
1V1a1s1
1Y2`2
1Z2j2
2 2$2(2,2<2D2H2`2h2l2p2t2
2 2$2(2,20242@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,20242<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2x2|2
2 2$2(2,2024282<2@2D2H2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$282@2D2X2\2`2t2|2
2 2$282<2@2P2T2X2l2p2t2x2
2 2%2E2J2R2v2
2 2&2,222B2M2Z2`2d2j2n2t2{2
2 2*242>2H2R2\2f2p2z2
2 2*2S2X2b2
2 2[2a2l2q2v2
2 242=2F2O2^2g2p2y2
2 272W2\2d2
2 2C2R2^2c2m2
2!2&2A2F2N2
2!2&2B2O2
2!2+2i2y2~2
2!262L2e2
2!282d2p2
2!2F2]2w2
2!3)3
2!30353?3
2"2)20272=2P2[2
2"2)232H2q2
2"2*2G2K2O2S2
2"2>2
2#2S2
2$2)2N2m2
2$2,20282<2P2X2\2p2t2x2
2$2,20282<2P2X2\2p2x2|2
2$2,2x2
2$2+222v2
2$222`2v2
2$383\3o3
2%262=2\2
2%2L2U2|2
2%3*3V3[3p3y3
2%3/3<3
2&282F2R2
2&383F3R3
2(252D2I2Q2f2}2
2(262
2(2B2P2
2(2J2d2s2x2
2(353Z3q3
2)2.232a2|2
2)2.2C2S2^2q2
2)2.2H2X2i2w2
2)23282`2o2
2)242;2P2
2)383=3E3
2*2/292U2Z2d2u2z2
2*2m2
2*313;3Q3]3i3u3
2,212;2p2u2
2,353
2,353V3h3v3
2,363A3N3U3\3c3u3
2.2K2h2
2.4>4K4R4Y4k4u4
2/252K2]2s2
2/262=2D2P2n2
2/3}3
2/3L3d3
2/3L3i3
2:2D2I2p2
2:2P2v2
2;2@2T2d2i2{2
2;2^2e2o2
2;2Q2l2
2;2x2
2;3W3m3
2?2a2p2
2?3E3R3m3
2@2E2S2X2c2h2p2
2@2U2
2@2V2|2
2@3L3a3f3n3
2[2c2t2
2]3f3k3s3
2+2:2?2[2s2x2
2+2_2j2w2
2+2X2a2h2{2
2<3E3f3x3
2<3Z3_3g3
2=2E2
2=2m2u2
2>2E2V2[2`2g2q2
2>2N2X2]2
20220910010351.943Z0
20220910042831Z
20220911042831Z0w0=
210930182225Z
212;2@2V2u2
212>2E2L2S2Z2a2h2n2
212>2P2X2
21262@2z2
212a2p2
212C2P2r2|2
213>3D3K3R3Y3s3|3
2'2,242a2l2
220302185121Z
220512204706Z
22272E2W2\2t2y2
222H2d2
222O2e2j2t2
22373I3N3u3z3
223C3H3N3h3
2-242;2}2
2'252W2^2e2l2s2|2
2-282?2F2l2t2{2
2'2N2
2'3.3
230511185121Z0
230511204706Z0t1
230865+4705630
232@2
23282@2
233e3
233o3
2-3J3
242K2a2
242W2y2
243C3M3R3
243w3
250706205017Z0~1
252?2L2
252c2h2r2
252K2
253F3y3
263H3V3b3
282=2E2
282e2o2|2
282K2R2\2y2
283?3D3L3
283D3L3d3l3y3
292G2\2n2{2
293r3w3
2A2F2P2
2B2[2h2
2C2^2y2
2c2~2
2C2~2
2C2I2S2m2t2~2
2C3j3
2D2N2S2
2D2Z2f2
2d3x3
2E2[2
2e2l2s2
2E2L2V2
2f2x2
2G2x2}2
2H2c2
2h2p2
2H3M3W3
2I2V2
2K2X2
2M2]2b2
2p2}2
2P3W3
2Q2\2x2
2Q2_2
2Q2W2\2d2
2Q3q3
2R2Y2
2r3|3
2sSo=
2V2{2
2V3h3v3
2W3w3
2X2b2t2
2Z2a2f2p2
3 3$3(3,3034383@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,30383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(34383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3,30343<3D3H3P3T3l3t3|3
3 3(3,30383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3(3,3D3H3P3T3
3 3*3/3a3
3 3*3O3y3
3 3.3F3X3e3
3 30383<3P3T3X3l3t3
3 30383<3T3X3\3`3p3t3x3
3 3'3.353G394h4
3 3L4U4v4
3 3P3
3 3T3
3 4'41464c4
3!3%3+3/353;3A3E3K3O3U3[3a3e3k3q3w3}3
3!3(3/3A3Z3g3n3u3|3
3!3,31363R3_3
3!3.3K3e3|3
3!3@3_3~3
3!3+303W3^3~3
3!393>3E3R3W3a3
3!4.484e4o4t4
3!4+404a4
3!414<4
3"3.3\3
3"343;3T3a3h3o3u3
3"3F3^3p3
3"3P3f3
3"4r4
3#3(3X3g3v3
3#3.3?3O3Z3
3#3-323O3^3
3#3-323r3~3
3#4^4y4
3#404U4l4
3$3.333H3V3
3$3:3X3
3$3+3:3@3I3P3W3^3p3
3$3+32393L3
3$353:3D3U3Z3d3u3z3
3$3A3J3P3q3y3
3$3g3
3$3l3u3
3$454C4Q4_4m4
3%31393H3[3d3p3x3
3%373I3S3^3k3r3y3
3%3U3[3`3x3}3
3%3z3
3%4N4_4
3&3,3z3
3&323
3&444@4L4L6U6v6
3&4-474y4
3&484F4R4
3(4/444<4v4
3(494R4
3)303
3)30363I3R3_3f3
3)3-33393?3E3w3
3)4@4p4
3*31383?3F3M3T3[3m3w3
3*4/4
3*41464@4n4
3*494>4H4|4
3*4P4U4Z4m4
3,31363Q3n3
3,31393q3
3,34383P3X3d3h3p3t3x3
3,3O3\3l3
3,454V4h4v4
3.333F3U3p3|3
3.353?3D3c3j3
3.353]3e3r3
3.3r3
3/3<3`3j3o3
3/393>3^3p3
3/3G3Z3}3
3:3G3N3U3g3q3|3
3:4J4T4Y4
3;3@3b3g3o3
3;3D3S3
3;3S3_3q3
3?3^3
3@3E3O3
3@3X3n3
3@4K4Y4]4c4g4m4s4y4}4
3@4p4
3[4`4
3]4h4~4
3^rtxb
3_3~3
3`3v3Q4q4
3+363L3h3
3+404C4P4U4]4
3+414G4N4S4]4
3<3A3
3<3A3K3z3
3<3U3j3
3<4m4
3=3b3
3=4D4K4R4
3=4S4k4|4
3>3E3K3
300930183225Z0|1
303:3E3L3
303t3
304q4
30C0\0
30G0Y0k0
32383?3I3h3m3
323C3k3|3
323H3d3
3-3:3o3|3
3-3;3@3J3
3-3?3M3]3m3
3-323<3Y3
333M3Z3g3m3
334Y4
3-363B3I3P3W3a3k3|4
3-3H3d3o3
3-3M3f3o3
3'4.455<5|5
343>3C3X3q3
343V3i3p3u3
343W3
344H4e4w4
344Q4V4`4
344w4
3'4d4
353D3y3
363K3e3}3
363U3
364J4T4Y4
373b3
373V3b3i3v3{3
374>4K4P4Z4{4
374D4a4
383<3D3H3L3P3X3\3t3|3
383u3
393D3S3X3b3
393T3Z3d3
394>4H4s4}4
39w\u,Q
3a3w3
3b3r3
3D3j3o3y3
3D3l3
3D3m3t3{3
3D4b4x4
3D4T4b4
3e3w3
3F4K4
3G3e3x3
3G3L3Q3p3|3
3G3N3i3
3H3W3p3
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3I4X4]4g4
3J3`3
3K3s3
3L3R3
3l3u3
3L3U3
3l4u4
3l4v4{4
3N4g4l4z4
3N4w4
3n4z4
3O3\3i3p3w3~3
3P3W3n3
3q3v3
3QVh|
3R3[3`3
3R4y4
3S3]3r3
3S4^4p4
3S4Z4a4
3SVmn
3T4k4
3V4h4v4
3W3f3p3u3
3X3a3}3
3X4d4x4
3Z4|4
4 4$4(4,4<4D4H4\4`4d4t4|4
4 4$4(4,40444@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4(4,40444<4@4D4H4L4P4T4X4\4`4d4h4l4t4x4|4
4 4$4(4,4044484@4H4P4X4p4x4
4 4$4(4,4044484<4@4D4H4L4`4t4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4(4,40484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$484<4@4X4\4d4h4l4
4 4&4,42464<4@4F4M4S4W4]4a4g4m4q4w4}4
4 4/4N4U4Z4b4}4
4 424G4t4{4
4 454k4
4 5%5C5c5
4 505>5l5
4!4&4.4|4
4!4,41464Z4a4~4
4!5'5,565j5r5w5
4!5R5_5
4"4*4?4D4I4s4
4"4.4?4G4Z4f4n4
4"4/4D4[4
4"4/4p4
4"4'4H4`4
4"5,515g5z5
4#4*4\4
4#464?4L4S4d4q4~4
4#5(5K5
4$4(4,4@4D4H4L4\4`4d4x4
4$4,4q4w4|4
4$4,4w4
4$424`4v4
4$474X4
4$4G4
4$4i4v4}4
4$545B5p5
4$5j5z5
4%4*4
4%4*444E4J4T4e4j4t4
4%424m4
4%4D4T4b4
4%4I4N4X4
4&4@4s4}4
4&414>4E4L4S4e4o4{4
4&4-434F4R4b4h4u4
4&4l4u4
4&4N4u4
4&515V5^5c5
4&545@5L5}5
4&555:5D5
4&5A5F5P5w5
4&5I5N5e5n5t5
4(4,4044484H4L4P4`4h4l4
4(4-424b4l4q4
4(4m4}4
4(5/545<5`5w5
4(5J5Z5h5
4)4@4i4
4)4C4X4a4j4z4
4*4/4T4Y4~4
4*494X4g4
4*4A4F4P4
4*52575?5j5r5w5
4*585?5L5Q5[5
4,4m4
4,4X4
4,51595t5
4,5J5\5r5
4.4@4c4v4
4.4@4N4f4x4
4.4e4~4
4/4:4G4U4_4i4v4
4/5E5O5T5z5
4:5?5G5f5
4:5M5
4;4Y4p4
4;5A5L5Q5V5r5
4?5W5t5
4?6H6i6
4@5E5M5
4@5r5
4[4e4r4
4]5d5
4^6e6
4_4d4n4
4+4;4@4K4P4[4`4h4}4
4+42494J4_4j4|4
4+454:4d4r4
4+4F4K4P4e4v4{4
4<4E4
4=4^4
4=4B4L4k4s4x4
4>5N5\5
4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
404I4{4
414;4@4
414<4K4P4x4
415`5z5
41585v5
415d5z5
425<5N5
434:4A4Y4f4m4t4z4
434@6
434=4B4G4N4S4v4
43484@4q4
434I4v4
435T5^5c5
444A4G4N4h4t4z4
444l4{4
4'4-4X4i4u4
445]5d5
445H5l5x5
445N5_5
4-4D4x4
4'4F4
464H4V4
484@4D4L4P4d4l4p4
484x4}4
494?4H4T4s4
494h4
4A4e4
4A4G4L4V4
4A4j4
4A5F5~5
4b5l5~5
4c5h5m5
4d4k4
4d4s4z4
4E4[4t4
4E4]4d4
4es`O
4F4i4x4
4F4K4P4W4a4x4~4
4H4o4}4
4H5u5|5
4i4p4w4
4l4u4
4O6Q7q7
4-RZKD[
4T4^4c4~4
4T4o4
4T5k5
4V4\4c4m4
4X4]4g4
5 5$5(5,5054585@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5D5H5L5P5p5t5x5|5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5P5X5\5d5h5p5t5|5
5 5$5(5,50585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5054585<5@5D5H5L5P5T5X5\5`5h5l5p5t5x5|5
5 5(5,5D5L5P5T5X5h5p5t5
5 5(50585@5H5P5X5`5h5p5x5
5 5(50585<5D5H5\5d5h5
5 5.5:5F5R5^5j5v5
5 565F5]5v5
5 5U5o5
5 6%6@6E6M6
5!5(5>5
5!5;5A5G5T5Y5c5
5!5+505
5!5h5n5
5!5Z5d5q5
5!6&606[6o6
5!6'6.686
5"5,5B5U5t5
5"545R5i5p5
5"5P5f5
5"6R6
5#5(525g5
5#5)5
5#5)505A5F5N5
5#5)5-53595?5E5U5a5p5t5z5~5
5#5@5S5p5
5#5+5I5b5
5#5>5L5T5`5o5
5#535@5Z5s5x5
5#5-525I5[5z5
5#5'5-53595=5C5G5M5S5Y5]5c5g5m5s5y5}5
5#585U5h5x5
5#5H5O5g5n5
5#5h5r5
5#6O6
5$5(5,5<5@5D5T5\5`5t5|5
5$5(5,5054585<5@5D5H5L5P5T5`5d5h5l5p5t5x5|5
5$5(5<5D5H5\5`5d5t5|5
5$5*515S5b5g5t5
5$5.5G5L5
5$5;5a5
5$515>5D5W5j5q5
5$5M5h5
5$5Q5W5\5d5
5$6)616F6j6z6
5%5*545E5J5T5e5j5t5
5%5,535:5L5e5q5~5
5%5D5^5c5k5
5&5@5Q5
5&505{5
5&525
5&666;6E6
5&686F6
5&6D6Z6
5(5@5
5(525C5I5]5
5(555<5
5(565
5(6>6d6t6
5(6-6H6Y6^6j6u6
5(6Y6g6q6v6
5)565C5~5
5)595F5Q5f5z5
5)5D5K5a5
5)5U5i5
5*51585?5E5X5d5l5s5z5
5*5J5j5~5
5*5L5Q5V5|5
5*5Q5[5`5
5,5;5E5J5
5,5G5_5
5.535=5i5{5
5.595>5e5{5
5.5T5d5r5
5/6:6H6R6^6e6o6
5/6o6t6|6
5:5D5e5
5:5T5~5
5;5X5k5{5
5?5D5N5p5
5?5d5s5x5
5?5F5M5K6q6x6
5?5O5]5
5\5g5m5
5\6e6
5]5u5z5
5`6t6d7t7~7
5})}4]
5+5V5h5v5
5<5A5p5
5<6B6I6
5<6E6c6}6
5<6L6n6
5=6D6[6
5>5F5K5h5
5>5p5
505?5V5
505^5c5
505`5
50555=5x5
506=6C6J6
50676>6_6f6k6s6
506G6W6\6f6|6
50Q0[0`0
515=5K5P5Z5o5t5~5
515I5S5X5
515U6m6
516;6[6w6
525?5{5
525H5|5
53585~5
535q5
545>5F5R5W5\5c5m5
545L5w5
5'5,5b5
5'505E5a5l5s5
5'545B5L5V5`5j5w5
555a5
5'565X5g5
5-585h5q5v5
5'5j5
56586=6K6P6X6
565A5O5T5^5
565M5S5t5
566_6
566H6V6b6
5-6a6
576>6
585H5s5
585O5q5
585S5n5
586j6|6
595@5[5
596@6E6O6
5A5G5M5R5a5g5|5
5a5v5
5B5T5`5g5
5b6l6~6
5b6l6~6!7}7
5C5H5d5i5
5c5r5|5
5C6H6N6e6l6q6{6
5c6n6
5C6Z6_6i6
5d6o6
5E5T5
5F5V5d5
5F5X5f5r5
5F6d6z6
5H5O5[5
5I5N5
5I5N5V5
5i6p6
5j6G7
5k5u5
5L5V5[5
5L6U6v6
5M5c5
5N5l5r5w5
5N6Y6h6m6u6
5O5\5
5Q5p5{5
5sHEV
5T5n5
5T6l6
5W5^5c5k5
5Y6`6
6 6$6(6,6064686<6@6D6H6L6P6T6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6d6h6|6
6 6$6(6,6064686<6@6D6H6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,60686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,64686<6@6D6H6L6P6T6X6\6`6d6l6p6t6x6|6
6 6$64686<6L6P6T6d6l6p6
6 6&696B6S6Z6a6|6
6 6(606<6@6H6L6P6X6`6h6p6x6|6
6 6*6G6]6
6 626@6P6n6
6 656G6T6g6l6q6
6 6R6
6 7%7-7P7e7
6 7+727?7d7t7
6 7>7
6 7R7d7o7t7
6 8_8
6!6(6/666=6
6!6/6`6e6o6
6!6v6
6"6'63686J6O6x6}6
6"6C6H6h6m6
6"6P6V6
6"727@7n7
6"7G7d7
6#6(6-63676=6A6F6K6Q6U6[6_6e6k6q6u6{6
6#6+6_6
6#6+6F6T6c6h6
6#666?6L6S6d6q6~6
6#6'6-63696=6C6G6M6S6Y6]6c6g6m6s6y6}6
6#6B6a6
6#7{7
6#7C7V7f7
6$6(6,6<6@6D6T6\6`6x6
6$6(6,606@6D6H6X6\6`6d6h6l6p6t6x6|6
6$6?6J6X6
6$6=6h6
6$646?6V6
6$646D6
6$7:7H7b7p7
6$7t7
6%6*626X6g6l6
6%6*646E6J6T6e6j6t6
6%6;6
6%6>6b6g6q6
6%64696]6b6j6
6%6E6R6
6%6F6X6f6r6
6%727u7
6%8H8
6&6>6C6N6S6[6
6&616C6J6e6l6s6
6&6I6
6&6Z6a6f6p6
6(6\6
6(61686
6(666
6(666i6
6(6N6g6
6(6N6S6]6
6(6V6l6
6(7X7
6)6<6
6)606O6
6*61666@6t6
6*656[6
6*6V6a6
6*Z*~*J(
6,62696@6Z6c6l6s6z6
6,6K6P6_6l6q6y6
6,7J7T7Y7o7
6.6f6x6
6/6A6F6N6|6
6/6E6b6
6/6N6e6u6
6/6u6z6
6/7D7O7e7
6:6?6G6q6w6|6
6;6[6v6
6;6I6W6e6s6x6
6?6Q6
6?7`7u7
6@7T7_7
6^6i6{6
6+6M6Y6
6<6V6
6<7E7f7x7
6=6D6I6P6_6e6n6u6|6
6=6I6P6]6g6l6
6=6S6
6>6V6
6>6X6
606`6
60676C6
60686<6P6T6X6h6l6p6
606H6L6P6T6X6\6d6h6l6p6t6x6|6
607f7
61686Y6v6
61777=7B7Q7W7l7p>L?U?h?
617A7
626?6{6
626<6Q6^6s6x6}6
626f6m6r6
626H6u6|6
62797?7F7
63686^6
646A6H6O6a6k6v6}6
646m6z6
656C6J6W6\6f6
657I7O7U7b7g7q7
6'6`6
6'6=6B6d6
6'666T6Y6^6
666H6V6b6
666H6V6b6n6
667d7z7
6'717
676>6^6j6q6v6
676B6W6i6n6v6
676c6
6-7N7
6-7Q7i7
686G6X6y6
686L6f6
686X6x6
687?7D7L7
688y8O9
696p6u6z6
697@7G7N7U7\7e7s7
6a6t6|6
6A7F7r7
6C6S6~6
6D6I6V6c6r6w6
6D6N6T6d6o6
6D7I7Q7
6D7Y7o7t7y7
6E7L7
6e7o7t7
6f6p6u6
6F6X6f6
6F6X6f6r6
6G6^6
6g7w7|7
6I6^6c6m6
6I7`7
6K6a6
6K6P6Z6
6K6W6\6i6s6z6
6L6d6n6v6
6l6q6
6L6W6\6a6n6
6L7V7[7
6N7f748L8
6N7w7
6O6^6
6O6_6o6
6O6T6\6v6
6P6e6z6
6P6o6
6Q6V6`6
6Q6Y6^6i6
6T6_6
6W6c6u6
6W6r6x6
6W6v6
6X6_6d6l6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7@7D7H7L7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7@7D7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7,7074787@7D7H7L7T7X7\7`7h7l7p7t7|7
7 7$787<7@7D7H7P7T7X7\7l7t7x7
7 7%7*7/7E7J7T7e7j7t7
7 7%7+7/74797>7C7l7
7 7%7T7p7|7
7 7(7,7@7D7H7\7`7d7h7x7|7
7 7(707<7@7T7X7`7d7h7p7x7
7 7/747C7H7q7
7 7<7@7H7L7P7T7\7`7t7|7
7 70757?7
7 787S7^7j7
7 7N7d7
7 8+878l8q8
7!7)7
7!7)7`7
7!7,7Q7_7}7
7!7:7E7M7T7[7b7i7o7u7
7!7]7
7!7+707E7t7~7
7!70767K7:;D;Q;l;
7!8+8q8
7!888H8h8
7"7(7,72787>7B7H7L7R7X7^7b7h7l7r7x7~7
7"7*7/797
7"717S7X7]7b7r7
7"7-7g7w7
7"8G8
7#7*71787K7
7#72777?7
7#7M7R7\7
7#7Z7e7x7
7#8(828T8w8
7#8H8R8W8l8
7$7)717
7$7,7074787L7P7T7X7h7l7p7
7$777>7_7
7$8.838f8
7%7*7<7N7S7e7
7%7*767I7N7`7f7z7
7%7,767_7z7
7%7@7
7%7+71757:7?7D7I7w7
7%707l7w7|7
7%71767@7R7W7n7
7%7F7X7f7r7
7%7Z7o7
7%8;8z8
7&7+7
7&7d7~7
7&7U7
7&888F8
7&8-8H8R8W8
7(70787@7H7L7P7T7d7h7l7|7
7(7W7s7
7(81868A8c8n8
7(82878O8c8u8
7)737
7)747;7B7i7
7)7s7
7)8@8t8
7)8<8M8^8o8
7)8y8
7*7>7n7
7,7@7K7y7
7,71797
7,737:7M7_7l7s7
7,7L7V7[7y7
7,7X7z7
7.737;7g7
7.787=7j7
7/7=7^7
7/7N7
7/888Y8
7/8x8
7:7N7
7;7@7J7l7
7;7v7
7?7L7
7]7k7
7^7n7x7}7
7_7f7
7`7o7t7|7
7|7/8
7+70757h7m7r7
7+7f7
7=7D7]7g7l7
7=7W7g7s7~7
7=8C8M8g8n8s8}8
7>8E8p8w8
70757:7Y7
717>7E7L7R7Y7`7g7n7
71787S7y7
717h7
718X8]8b8u8
727<7A7_7u7
72787L7V7[7~7
727H7|7
737A7e7j7t7
737C7H7R7
737F7K7S7
737q7
73898@8F8
738w8
747C7H7f7
747C7H7R7
747f7
747I7
748K8i8
757:7B7m7
757D7I7n7s7
757M7Z7b7q7
758F8U8f8t8
758P8
767H7V7b7
768?8p8
7-727<7k7
7-747>7w7
7-767`7
777<7D7v7}7
777<7F7o7z7
777F7K7U7k7
777J7h7r7w7
777O7d7n7
7'787Y7a7k7p7
7'7Z7
7'84898?8E8K8T8[8_8f8j8}8
787=7E7
787N7t7
788Z8
797|7
797B7Q7
797I7W7
797P7
797S7d7
797Z7l7
798>8C8l8
79s\u)Q
79stu)Q
79sTu'Q
7D7K7f7
7E7J7T7
7e8{8
7f7|7
7F7U7i7
7f7x7
7I7`7
7J7U7f7m7
7J8'9
7k8w8
7l7u7
7L8U8j8
7N8x8
7O8a8k8r8
7P7`7n7
7P7V7[7y7
7P8U8
7R8[8a8i8o8}8
7R8c8h8n8
7T7|7
7U7m7t7
7U7p7
7V7]7b7l7
7Z>@B1
8 8$8(8,80848<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,80848<8@8D8H8L8P8T8X8\8`8d8h8l8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8d8h8l8p8t8x8
8 8$8(8,8084888<8@8D8H8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(80888<8@8D8\8`8h8l8p8t8|8
8 8$8(84888<8@8D8H8L8P8T8X8\8`8h8l8p8t8x8|8
8 8$84888<8d8l8p8t8x8
8 8(808<8@8H8L8P8X8`8h8p8x8
8 8.888=8R8p8y8
8 8;8A8L8b8r8
8 8+80878>8R8W8^8e8}8
8 8Y8^8h8~8
8 9%9/9_9
8 9:9b9
8 9^9
8 9N9
8!8&8B8O8
8!8)8@8L8{8
8!8:8I8N8V8k8
8!8+808E8Q8h8v8
8!868}8
8!868B8P8^8c8m8
8"808^8t8
8"808B8o8
8"888l8
8"898e8
8"8L8Q8n8s8
8"9(9G9M9
8"9)939u9
8"929p9x9
8"93989>9X9
8"9A9G9L9
8"9b9s9x9~9
8#8(828
8#8*808C8N8c8j8
8#8M8Y8
8#8o8
8$8(8.848:8>8C8H8M8R8
8$8,848<8D8H8L8P8`8h8l8
8$858:8D8U8Z8d8u8z8
8$878L8V8k8
8$8D8I8a8f8n8
8%8,82888V8`8}8
8%8}8
8%80878>8S8~8
8%848>8C8
8%868P8y8
8%8B8U8a8o8y8~8
8%8C8]8n8
8%8F8X8f8
8%9,939I9^9i9{9
8&8,8
8&8?8D8N8`8y8
8&8H8Y8s8
8&90959J9V9z9
8&919M9V9
8&989F9
8&9D9Z9
8(8>8a8g8n8x8
8(868
8(8J8Y8_8d8j8o8
8(8T8[8v8
8(8U8_8l8
8(979H9i9q9{9
8(9I9^9h9m9v9
8)878e8{8
8)8F8f8s8z8
8)8O8g8m8t8~8
8)9=9Z9i9
8*8c8n8s8
8*8d8x8
8*9/979
8,8H8V8a8p8z8
8,8Q8a8k8p8
8,9D9N9V9b9g9l9s9}9
8,9P9
8.838Z8q8v8
8.848@8g8{8
8.8d8~8
8.8O8T8b8w8|8
8.9>9L9z9
8.939=9o9
8/8?8D8O8T8
8/868P8g8l8
8/888I8N8X8
8/898>8r8x8
8/8O8T8\8t8
8/9w9
8:8H8M8f8t8z8
8:9D9J9
8?8D8I8
8@8{8
8@8D8H8L8P8\8d8h8p8t8
8@8N8v8
8\$ u
8\$(u
8^)uY
8_hte
8+8A8J8O8Z8|8
8+909>9J9u9
8<9E9]9
8<9I9P9W9]9p9y9
8=8D8W8d8
8=8X8p8
8>8E8V8[8`8g8q8
8>8u8
8>9g9
8>9K9
8>9N9\9
808=8W8
808d8
808K8S8
808W8\8f8
80969?9U9\9f9k9
818<8W8d8k8r8
818G8
828<8A8Y8s8|8
828H8q8
838?8D8N8`8e8
838\8c8j8
83888g8
83989a9
848L8
848L8]8b8l8
858;8O8g8m8
868?8F8
869u9
878Q8\8
8'8,8E8K8_8d8
8-858<8C8I8`8w8
8'858=8F8T8h8
8-888G8R8
888G8X8y8
888P8
889?9D9N9
8'8C8
898P8
898t8
8-9R9~9
8'9Y9
8A)u(P
8A8c8
8A8H8u8
8A8O8m8
8A8U8\8a8z8
8a9g9y9
8B8G8O8
8B9L9^9
8b9l9~9L:U:v:
8C8d8t8y8
8c8l8w8~8
8C9H9
8C9O9u9z9
8D$(u
8D$?Q
8D$8u
8D8I8Q8
8E9X9
8F8\8
8F8u8
8F9X9f9[:
8FXtU
8G(u:
8g8n8s8{8
8Ght(
8GhtB
8GhtO
8GXt(
8GXtB
8GXtd
8H8^8
8h8}8
8H8M8n8~8
8h8o8t8|8
8h9p9x9
8I8\8a8i8
8I8_8
8L9U9p9
8L9U9v9
8N8w8
8N9U9Z9b9
8P8i8s8
8QVhP/
8r9|9
8T$ u
8T$(u
8T$`u
8T$0u
8T$Pu
8T8n8
8U8_8d8
8X!t9
8X1t9
8Y)u"S
8Y9u%S
8Y9u3S
8Y9u5S
9 :':,:4:`:g:l:t:
9 :8:u:
9 9$9(9,9@9H9T9X9d9h9l9
9 9$9(9,90949<9@9D9H9L9P9T9X9\9`9d9h9l9t9x9|9
9 9$9(9,9094989@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$949<9@9l9p9t9x9|9
9 9&9*959:9D9U9Z9d9u9z9
9 91969@9e9
9 959t9~9
9 9-9C9N9T9a9{9
9!9&9B9O9
9!9+9;9K9Q9\9b9n9~9
9!9'9>9T9^9
9":):
9":':k:p:x:
9":0:Q:X:b:
9":H:R:W:o:
9"9*9I9T9_9g9m9z9
9"9`9g9
9"9{9
9"929B9R9b9r9
9"989T9w9
9"9'9.959
9"9I9
9"9K9
9#:C:R:q:v:{:
9#9*9=9F9R9Y9`9j9t9
9#9*9=9J9W9^9d9w9
9#9`9
9#9-9
9#9-929
9#9-959h9|9
9#9a9w9
9#9g9n9s9{9
9$:s:
9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9$9(9,949<9D9H9P9T9h9p9t9
9$9(90949H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9$9)9h9o9
9$9,9x9
9$9.9=9s9
9$9.9g9
9%:F:r:
9%9*9R9\9v9{9
9%9>9J9O9Y9
9%979Q9W9k9
9%9k9
9&939:9A9G9Y9d9m9u9{9
9(: ;';
9(:-:7:N:m:
9(:^:|:
9(:=:V:Z:_:e:k:q:w:}:
9(9>9H9M9l9
9(9F9S9
9):9:C:H:s:
9)9_9f9m9t9
9)959
9*91989?9F9M9T9[9b9u9
9*989=9L9Q9\9a9k9
9,:6:;:S:]:b:
9,:K:V:]:d:
9,9:9W9c9t9~9
9,9=9y9
9,91999O9o9
9,94989P9X9\9d9h9|9
9.9;9H9N9a9t9{9.:5:;:~:
9.959;9~9
9.u1h
9/:9:F:
9/959;9]9r9
9/9X9g9x9
9':,:6:K:U:Z:z:
9':=:H:j:s:}:
9':0:?:
9-:2:<:m:
9-:2:P:j:w:~:
9':7:A:F:
9:9B9G9Q9z9
9:9E9
9:9E9^9n9x9
9':c:t:
9;:x:}:
9;9^9u9{9
9?:O:^:h:s:
9?9I9]9c9h9{9
9?9s9
9?NP,
9\$$t
9\$pu&Q
9\$Pw&Q
9\9e9u9z9
9^,t&h@S
9^0u;
9_;o;};
9_<tM
9_9u9
9{4uv
9{8u#j
9{Huv
9~(s,j
9+:3:9:F:K:U:
9+909]9b9
9+9K9
9<:E:f:x:
9<9E9]9d9k9
9<9E9f9x9
9<9H9^9c9
9=:G:L:
9=9C9W9\9l9r9x9
9>:O:^:|:
9>9T9
90:6:L:S:]:b:
9094989<9L9P9T9|9
90979C9
909v9
91969@9X9l9x9
919L9Y9
92;q;
929A9
93:n:
93999^9d9
939B9_9o9y9~9
939E9
939N9f9k9u9
94:K:i:
94:R:h:
949>9F9R9W9\9c9m9
949o9
959:9H9Z9_9g9
959E9O9T9
96:=:[:j:t:y:
969F9K9S9~9
969L9r9
969O9i9
97:Y:
979J9e9v9
979M9q9
98:=:L:e:j:
989G9
9'9:9X9
99:b:x:
99:I:S:X:
9-9[9q9
9'949X9w9
999>9H9s9
999I9W9
999s9]:o:y:
9A:k:
9a:q:v:~:h;m;
9a9f9}9
9B9Y9c9h9
9C:K:d:p:u:
9C9S9p9
9D$ t#R
9D$Dv1P
9d:o:
9D9\9k9u9z9
9D9M9\9
9E9]9d9
9E9J9g9l9t9
9E9l9w9
9F:X:f:r:
9F9g9
9f9x9
9G9a9l9
9G9Q9V9
9I9Q9X9^9
9J<X<z<
9K:Z:d:i:
9K9[9`9h9
9K9P9e9z9
9k9z9
9L:^:
9L:U:v:
9l9v9
9l9y9
9P$v*
9P9]9
9R:Y:o<
9s@u,Q
9s\u)Q
9sTu)Q
9stu)Q
9T9Z9p9w9
9v:#;-;d;
9V75+
9wlu&h
9X$v.
9X,tb
9Z9n9s9
A ;B0t
A0;B@t
A0PRQ
AADAuthority
AADResource
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
aborted
Accept:application/json
AcquiredDate
AcquireSRWLockExclusive
AcquireSRWLockShared
actionFilter
actionFilters
Actions
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
activatibleClassId
Added header %s
AddFileToCab
Adding calling package = %s for productId = %s
Adding optional package = %s
Add-On Product Infos (CV = %hs):
AddOnKeyword
addOnParent
AllocateAndInitializeSid
AllowImpersonation
AlreadyPurchased
AlternateIds
AlwaysPromptBeforePurchase
AnonymousRequest
ApiInvoked
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-heap-obsolete-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-l2-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
ApiSetQueryApiSetPresence
AppDownloadLimit
Application
application/json
AppServiceName
AppServiceResponseStatus
args->SetMemInfo(experienceToken, modalManager)
array
as.,k{n?,
Assert
Assert (%s): %s
assertVersion
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1
AsyncOperationCompletedHandler`1<Boolean>
AsyncOperationCompletedHandler`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
AsyncOperationProgressHandler`2
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
aSZq@
Attached event handler for item %s
Attempting to set the install order to: %hs
authority
Authorization
authTicket.IsValid()
AuthToken
AuthType
Availabilities
AvailabilityId
AxV}4
b(vPZCC
b/+6(
b0l0~0
Bearer 
BeginOperation
beneficiaries
beneficiary
beneficiaryArray
BigId
BigIds
Bld6=w
BodyBufferMaxSize
BodyForcePrompt
BodyPromptSettings
BodyTemplate
BQWh(
buffer != nullptr
Build Name
BuildStoreInAppInfo
BuildStoreInAppSkuInfo
BundledSkus
BVh@S
C h@S
C:\data\systemdata\etw\StoreOperational.etl
C;\$ 
C3R/Z
CABINET
Cabinet.dll
CallContext:[%hs] 
campaignId
CampaignId
Canceling redirect for 0x%08x
CapabilityCheck
Caption
Catalog failure looking for BigCatId.
CatalogServiceProxyV6::AddOnsIterator::GetNext
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
CatalogServiceProxyV6::AddOnsIterator::Initialize
CatalogServiceProxyV6::GetB2BKey
CatalogServiceProxyV6::GetCustomerCollectionsId
CatalogServiceProxyV6::GetCustomerPurchaseId
CatalogServiceProxyV6::GetProduct
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
cbStatus >= sizeof(DWORD)
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
cchRemaining < urlLength && "We should have copied *something*"
CClientSTAHelper::AppPurchase
CClientSTAHelper::DoWork
CClientSTAHelper::GetAddOnProduct
CClientSTAHelper::GetBigCatIds
CClientSTAHelper::ProductPurchase
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
CHANh
CheckTokenMembershipEx
ChkAlloc(_releaseLicenseTimer)
ChkAlloc(_results)
ChkAlloc(_spCV)
ChkAlloc(_spInAppOffers)
ChkAlloc(cv.Get())
ChkAlloc(hashMap)
ChkAlloc(licenseBuffer)
ChkAlloc(m_timer)
ChkAlloc(pwszUppercaseRegion)
ChkAlloc(spbResponseData)
ChkAlloc(spInAppOffer)
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkAlloc(spInAppSkuInfo)
ChkAlloc(spListingInformation)
ChkAlloc(spManufacturerInfo)
ChkAlloc(spNewProductLicense)
ChkAlloc(spOperation)
ChkAlloc(spProductInfo)
ChkAlloc(spProductLicense)
ChkAlloc(spPurchaseResults)
ChkAlloc(spReceiptData)
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkAlloc(spStoreAppInfo)
ChkAlloc(spStoreAppInfo->pInAppOfferList)
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
ChkAlloc(spszFormattedPrice)
ChkAlloc(spUnfulfilledConsumable)
ChkAlloc(tag)
ChkAlloc(tokenUser)
ChkArg(_messageDialogHelper)
ChkArg(action)
ChkArg(appId)
ChkArg(authResponse)
ChkArg(balanceRemaining)
ChkArg(cchFolder)
ChkArg(ContentIdentifiers)
ChkArg(context)
ChkArg(getAppReceiptOperation)
ChkArg(getCollectionsIdOperation)
ChkArg(getProductReceiptOperation)
ChkArg(getPurchaseIdOperation)
ChkArg(hstrUri)
ChkArg(items)
ChkArg(keywords)
ChkArg(lpszURL)
ChkArg(operation)
ChkArg(package)
ChkArg(pAppId)
ChkArg(pAppInfo)
ChkArg(pAppInformation)
ChkArg(pcbResponseData)
ChkArg(pCoreWindow)
ChkArg(pCustomerCollectionsId)
ChkArg(pCustomerPurchaseId)
ChkArg(pFulfillmentResult)
ChkArg(pHandler)
ChkArg(pHresult)
ChkArg(phWndCurrent)
ChkArg(pInAppInformation)
ChkArg(pInAppOffer)
ChkArg(pInAppSkuInformation)
ChkArg(pLinkUri)
ChkArg(pMandatory)
ChkArg(pOptionalPackage)
ChkArg(ppAppLicense)
ChkArg(ppAppReceiptOperation)
ChkArg(ppbResponseData)
ChkArg(ppData)
ChkArg(ppGetCollectionsIdOperation)
ChkArg(ppGetPurchaseIdOperation)
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkArg(ppLinkUri)
ChkArg(ppListingInformation)
ChkArg(ppLoadAddOnProductInfosOperation)
ChkArg(ppLoadListingOperation)
ChkArg(ppOperation)
ChkArg(ppPackage)
ChkArg(ppProductReceiptOperation)
ChkArg(ppPurchaseResults)
ChkArg(ppQueueItems)
ChkArg(ppReportConsumableFulfillmentOperation)
ChkArg(ppRequestAppPurchaseOperation)
ChkArg(ppRequestProductPurchaseOperation)
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkArg(ppResults)
ChkArg(pProductPurchaseStatus)
ChkArg(ppStoreContext)
ChkArg(ppStoreProductQueryResult)
ChkArg(ppStoreProductResult)
ChkArg(ppszUri)
ChkArg(ppUpdateList)
ChkArg(ppUpdateStatuses)
ChkArg(ppUri)
ChkArg(ppValue)
ChkArg(pReceipt)
ChkArg(pResult)
ChkArg(pResults)
ChkArg(productIds)
ChkArg(productKinds)
ChkArg(productStoreId)
ChkArg(pStorePackageUpdateResult)
ChkArg(pStorePackageUpdates)
ChkArg(pszBuffer)
ChkArg(pToken)
ChkArg(publisherUserId)
ChkArg(pUnfulfilledList)
ChkArg(pUpdateState)
ChkArg(pUser)
ChkArg(pValue)
ChkArg(result)
ChkArg(results)
ChkArg(serviceTicket)
ChkArg(spJsonArray)
ChkArg(status)
ChkArg(storeId || packageFamilyName)
ChkArg(storeIds)
ChkArg(storePurchaseProperties)
ChkArg(trackingId)
ChkArg(transactionId)
ChkArg(uri < UriHelper::UriMax)
ChkArg(uri < UriHelperV7::UriMax)
ChkArg(uri >= 0)
ChkArg(uriBase < UriHelper::UriMax)
ChkArg(user)
ChkArg(value)
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkBool(found, ((HRESULT)0x80070005L))
ChkBool(found, ((HRESULT)0x80070057L))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT)0x8000000BL))
ChkHr(((HRESULT)0x80004001L))
ChkHr(((HRESULT)0x80004005L))
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(((HRESULT)0x80070005L))
ChkHr(((HRESULT)0x8007000EL))
ChkHr(((HRESULT)0x80070057L))
ChkHr(((HRESULT)0x80190194L))
ChkHr(((HRESULT)0x80270254L))
ChkHr(((HRESULT)0x803F6101L))
ChkHr(((HRESULT)0x803F6103L))
ChkHr(((HRESULT)0x803F6107L))
ChkHr(((HRESULT)0x803F6108L))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(((HRESULT)0x803F610DL))
ChkHr(((HRESULT)0x803F610EL))
ChkHr(((HRESULT)0x83750007L))
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
ChkHr((static_cast<HRESULT>(__hr)))
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkHr(__winrt_hr__)
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(_appInstallItem.As(&item2))
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(_appInstallItem->get_InstallType(&installType))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(_appInstallItem->get_PackageFamilyName(value))
ChkHr(_appInstallItem->get_ProductId(value))
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(_appName.Set(appName))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(_availabilities.As(&inspectableProducts))
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(_availabilities->First(&iter))
ChkHr(_availabilities->get_Size(&size))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(_bigIds->First(&spIter))
ChkHr(_bigIds->get_Size(&size))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(_bundledSkuIds->GetView(ppValue))
ChkHr(_cachedLicenseJson.CopyTo(result))
ChkHr(_ChangeStatusStringToEnumValue())
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(_ClearEventHandler(item))
ChkHr(_ClearEventHandler(item.Get()))
ChkHr(_collectionData.CopyTo(ppValue))
ChkHr(_collectionData->First(&iter))
ChkHr(_completedEvent.Add(handler, token))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
ChkHr(_completedEvent.Remove(token))
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_contextString.CopyTo(value))
ChkHr(_continuationToken.Set(continuationToken))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
ChkHr(_cv.Set(cv))
ChkHr(_data->get_Size(&dataSize))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(_extendedJsonData.Set(extendedJsonData))
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(_hresultOfOperation)
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
ChkHr(_hstrDescription.CopyTo(hstrValue))
ChkHr(_hstrDescription.CopyTo(pValue))
ChkHr(_hstrDescription.Set(hstrValue))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(_hstrExtendedData.CopyTo(pValue))
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrManufacturerName.Set(value))
ChkHr(_hstrModelName.CopyTo(value))
ChkHr(_hstrModelName.Set(value))
ChkHr(_hstrName.CopyTo(hstrValue))
ChkHr(_hstrName.CopyTo(pValue))
ChkHr(_hstrName.Set(hstrName))
ChkHr(_hstrName.Set(hstrValue))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
ChkHr(_hstrOfferId.CopyTo(offerId))
ChkHr(_hstrOfferId.Set(offerId))
ChkHr(_hstrProductId.CopyTo(hstrProductId))
ChkHr(_hstrProductId.CopyTo(pValue))
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkHr(_hstrProductId.Set(productId))
ChkHr(_hstrProductTag.CopyTo(pValue))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrProductType.CopyTo(pValue))
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(_hstrReceipt.CopyTo(pValue))
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrSkuId.CopyTo(pValue))
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(_hstrSkuType.CopyTo(pValue))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
ChkHr(_hstrStoreContentModifierId.Set(value))
ChkHr(_hstrTitle.CopyTo(pValue))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_inAppOfferToken.Set(inAppOfferToken))
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(_jsonData.Set(jsonData))
ChkHr(_jsonRequest.Set(jsonRequest))
ChkHr(_jsonResponse.CopyTo(pValue))
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
ChkHr(_jsonValue.SetReference(json))
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(_licensableSku.Set(licensableSku))
ChkHr(_LoadLicenseJson(spLicenseInstance))
ChkHr(_MakeDefaultLicenseResponse(package))
ChkHr(_mapView.CopyTo(ppValue))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
ChkHr(_package.CopyTo(ppPackage))
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(_packageFullName.Set(PFN))
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(_PFN.Set(PFN))
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(_price.CopyTo(ppValue))
ChkHr(_productId.Set(productId))
ChkHr(_productId.Set(value))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ChkHr(_productKinds.As(&productKinds))
ChkHr(_products.As(&inspectableProducts))
ChkHr(_products.CopyTo(spProducts.GetAddressOf()))
ChkHr(_products->get_Size(&count))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(_products->GetAt(0, &_product))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(_pStoreContextServer.As(&storeContextServer2))
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(_queueItems.CopyTo(result))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
ChkHr(_RefreshStatus(item, true ))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(_request.Set(jsonRequest))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(_response.Set(jsonInitialResponse))
ChkHr(_response.Set(response))
ChkHr(_results.CopyTo(ppResults))
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(_serviceTicket.Set(serviceTicket))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(_skuId.CopyTo(pValue))
ChkHr(_skuId.Set(skuId))
ChkHr(_skus.As(&inspectableProducts))
ChkHr(_skus->First(&iter))
ChkHr(_skus->get_Size(&size))
ChkHr(_skus->GetAt(i, &sku))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(_skus->RemoveAt(bestIndex))
ChkHr(_SortAvailabilities())
ChkHr(_SortSkus())
ChkHr(_spAppLicense.CopyTo(ppResults))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(_spImageUri.CopyTo(pValue))
ChkHr(_spInAppOffers->GetView(ppValue))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
ChkHr(_spNextQueryOperation.CopyTo(spNextPagedOperation.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
ChkHr(_spQueueItems.CopyTo(ppQueueItems))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
ChkHr(_spUri.CopyTo(ppValue))
ChkHr(_statusChangedEvent.Add(handler, token))
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(_statusChangedEvent.Remove(token))
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(_storeId.Set(storeId))
ChkHr(_storeIds.As(&storeIds))
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
ChkHr(_uriRuntimeClass.CopyTo(ppValue))
ChkHr(actionFilters->get_Size(&filterSize))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
ChkHr(addOns.GetNext(&jsonIAP))
ChkHr(addOns.GetNext(&spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(alm->RefreshLicenses(refreshPolicy))
ChkHr(alternateIds->GetObjectAt(iId, &altId))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(appInstallManager.As(&appInstallManager2))
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), appInstallItemsOp.GetAddressOf()))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), true, appInstallItemsOp.GetAddressOf()))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(arrAdditionalHeaders.Append(dhStr))
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(AsAgile(productKinds, &_productKinds))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
ChkHr(AsAgile(storeIds, &_storeIds))
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(AsWeak(pStoreContext, &_wrStoreContext))
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(availabilities->GetObjectAt(0, &availability))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availability->get_Price(ppValue))
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(bigIds->Append(_productStoreId.Get()))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(bstr.Initialize(L"", 0))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ChkHr(CoGetCallerTID(&_callerThreadId))
ChkHr(CoGetCallerTID(&callerThreadId))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->get_Size(&size))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(CopyToNotNull(_receipt, pReceipt))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 136, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CreateHttpClient(&httpClient))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkHr(extendedError)
ChkHr(factory->Create(filter.Get(), &httpClient))
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(filter.As(&filter2))
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(GetCurrentStatus(&status))
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
ChkHr(GetNextBatch())
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
ChkHr(getProcessPackageResult)
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
ChkHr(hashMap->GetView(ppMapView))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(headers.As(&headersMap))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
ChkHr(headers->get_UserAgent(&userAgent))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
ChkHr(hr)
ChkHr(hrCallContext)
ChkHr(hrCommerceOp)
ChkHr(hrCopy)
ChkHr(hrEntry)
ChkHr(hresult)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(HRESULT_FROM_WIN32(122L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(HRESULT_FROM_WIN32(1400L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(hrFamilies)
ChkHr(hrFetch)
ChkHr(hrGetAllAccounts)
ChkHr(hrGetPackage)
ChkHr(hrGetPackageFamilyName)
ChkHr(hrGetString)
ChkHr(hrGoldenTicket)
ChkHr(hrHttp)
ChkHr(hrImpersonate)
ChkHr(hrInfo)
ChkHr(hrInfosIter)
ChkHr(hrInnerIter)
ChkHr(hrItemIter)
ChkHr(hrIter)
ChkHr(hrJoin)
ChkHr(hrJoinActionFilters)
ChkHr(hrJoinStoreIds)
ChkHr(hrKinds)
ChkHr(hrMake)
ChkHr(hrModalAsUser)
ChkHr(hrOp)
ChkHr(hrOperation)
ChkHr(hrPackage)
ChkHr(hrPost)
ChkHr(hrProductsIter)
ChkHr(hrRequest)
ChkHr(hstrContent.Set(pszContent))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(hstrTitle.Set(pszTitle))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(ids->Append(productId.Get()))
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(impersonator.Impersonate())
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(infos.As(&infosIterable))
ChkHr(infos->get_Size(&sizeResult))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(Initialize())
ChkHr(InitializeIdsFromLicense())
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(inspectable.As(&productPrivate))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(IsCallerERA(&isERA))
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
ChkHr(it.As(&spWebTokenRequestResult))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(item2->get_Mandatory(value))
ChkHr(Items.Append(item))
ChkHr(items->get_Size(&count))
ChkHr(items->get_Size(&itemCount))
ChkHr(items->get_Size(&size))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
ChkHr(items->GetAt(index, &item))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(items->GetObjectAt(i, &item))
ChkHr(iter->get_Current(&availability))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_Current(&item))
ChkHr(iter->get_Current(&sku))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(json.As(&jsonObjectIterable))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::CreateJsonObject(&_response))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::CreateJsonObject(&package))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
ChkHr(JsonHelpers::CreateJsonObject(&request))
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(jsonUriArray->GetObjectAt(index, &object))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(keyIds->get_Size(&keySize))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(License->GetIsTrial(&isTrial))
ChkHr(License->GetLicenseGrantReason(&_grantReason))
ChkHr(licensedProducts.As(&products))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(licensedProducts->get_Size(&size))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
ChkHr(m_hstrProductId.CopyTo(pValue))
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
ChkHr(m_productId.Set(bigCatId))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(m_spHashMap->GetView(view))
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(m_spIterable->First(ppIterator))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, jsonRequest, cv.GetHStringReference().Get()))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ChkHr(message->put_Content(pRequestContent))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(methodStatics->get_Head(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(moId.Set(szEncodedMoId))
ChkHr(nameOverride.Set(L""))
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
ChkHr(newOrder->First(&iter))
ChkHr(nextOp.CopyTo(_spNextQueryOperation.ReleaseAndGetAddressOf()))
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(outputs->Append(inputString))
ChkHr(outputs->Append(output.Get()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(outValue.Set(pszBuffer))
ChkHr(package.As(&package2))
ChkHr(package.As(&package4))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(package->get_Id(&packageId))
ChkHr(package->get_PackageType(&packageType))
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkHr(packageFullName.Set(bstr.Get()))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(packages->First(&packagesIterator))
ChkHr(packages->GetObjectAt(0, &package))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(pArgs->get_State(&state))
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(pdConnection->put_PackageFamilyName(PurchaseDialogPFNRef.Get()))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(pKeywords->get_Size(&cKeywords))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
ChkHr(previewLicenses.CopyTo(&_mapView))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(ProductIdHashMap::Make(&hashMap))
ChkHr(productIds.As(&productIdsIter))
ChkHr(productIds->Append(productId))
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(productJsonString.CopyTo(productJson))
ChkHr(productJsonString.CopyTo(productJsonResponse))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->First(&pkIter))
ChkHr(productKinds->First(&spIter))
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(products.As(&productsIVector))
ChkHr(products.CopyTo(&_products))
ChkHr(products.CopyTo(_products.GetAddressOf()))
ChkHr(products->get_Size(&count))
ChkHr(products->get_Size(&productCount))
ChkHr(products->get_Size(&productsLength))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(products->GetObjectAt(0, &firstProduct))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySet.As(&propertySetMap))
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(pStorePackageUpdates->First(&updateIterator))
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(pUnfulfilledList->Append(consumable.Get()))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(pValue.As(&spJsonValue))
ChkHr(pVector.As(&pIVector))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(queueItems->GetView(&_spQueueItems))
ChkHr(queueItems->GetView(queuedItems))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(RefreshInternalState(false, pCV))
ChkHr(RefreshInternalState(true, pCV))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
ChkHr(request->get_Scope(scope.GetAddressOf()))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(response->get_Items(&items))
ChkHr(response->get_Message(&responseMessage))
ChkHr(response->get_Status(&responseStatus))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(result.CopyTo(results))
ChkHr(result.Set(licenseSatisfactionResult.Get()))
ChkHr(ResultFromLastError())
ChkHr(results.Products.CopyTo(products))
ChkHr(results.Set(resultsView.Get()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetMaxDateTime(&maxDateTime))
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(sku.As(&skuPrivate))
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(sku->get_Price(ppValue))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(spArray.As(&spJsonVector))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkHr(spDisplayData->Initialize(hstrName))
ChkHr(spDisplayData->Initialize(nullptr))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(spIds->Append(productId.Get()))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->MoveNext(&hasCurrent))
ChkHr(spJsonArray.As(&spJsonVector))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
ChkHr(spJsonObject.As(&spJsonValue))
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(spJsonVector->RemoveAt(index))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(spLanguages->get_Size(&size))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
ChkHr(spNextQueryOperation.CopyTo(_spNextQueryOperation.GetAddressOf()))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(spOperation->BeginWork(1))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkHr(spStoreCommerce->GetAppId(&m_appID))
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(spValue.As(&spJsonValue))
ChkHr(spVectorView.As(&spIterable))
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(StartOperation(1))
ChkHr(StartOperation(asyncId))
ChkHr(StartOperation(iAsyncId))
ChkHr(status.As(&statusInternal))
ChkHr(status.CopyTo(result))
ChkHr(status->get_Value(&updateStatus))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SetUser(pUser))
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeId.Set(L""))
ChkHr(storeIdComponents->get_Size(&size))
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(storeProductId.Set(storeId))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
ChkHr(strProductId.Set(pszProductId))
ChkHr(substituteValue->get_ValueType(&valueType))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(systemFeatures->First(&spIterator))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkHr(tagComponents->GetAt(1, outputName))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
ChkHr(temp.Set(pszUri))
ChkHr(temp.Set(shReceipt))
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(temp.Set(wszAppId))
ChkHr(threadContext._devOfferId.Set(devOfferId))
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext.DoWork())
ChkHr(TrimString(result.Get(), resultString))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkHr(update.As(&updatePrivate))
ChkHr(updateIterator->get_Current(&update))
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(updates->Append(storePackageUpdate.Get()))
ChkHr(updates->First(&updateIterator))
ChkHr(updates->GetView(queuedItems))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(userLocale.Set(locale))
ChkHr(userLocale.Set(szUserLocale))
ChkHr(userMgr.As(&signInMgr))
ChkHr(UuidCreate(&anid))
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(value.As(&propValue))
ChkHr(value->get_Value(&dwValue))
ChkHr(Vector<HSTRING>::Make(&_bigIds))
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(Vector<HSTRING>::Make(&_keywords))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
ChkHr(WindowsPromoteStringBuffer(buffer, string))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, hstrPurchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
ChkReturn(((HRESULT)0x80040001L))
ChkReturn(((HRESULT)0x80040002L))
ChkReturn(((HRESULT)0x8007000EL))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkReturn(hr)
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkWin32(Expr)
CHttpConnection::_Initialize
CHttpConnection::Connect
CHttpConnectionCache::GetConnection
CHttpRequest response header: %s : %s
CHttpRequest::_AddDebugHeaderIfPresent
CHttpRequest::_AppendToDataBuffer
CHttpRequest::_CreateConnectionAndSendRequest
CHttpRequest::_DownloadData
CHttpRequest::_GetProxyInfoForUrl
CHttpRequest::_LocalAllocHeader
CHttpRequest::_ReceiveResponse
CHttpRequest::_SendRequestWithRetry
CHttpRequest::_SetProxyForCurrentRequest
CHttpRequest::_WaitForLastAsyncCompletion
CHttpRequest::_WinHttpCompletionCallback
CHttpRequest::~CHttpRequest
CHttpRequest::AbortRequest
CHttpRequest::AddRequestHeader
CHttpRequest::Initialize
CHttpRequest::s_WinHttpCompletionCallback
CHttpRequest::SetAuthorizationHeader
CHttpRequest::UploadAndFetchResource
CHttpRequest::UploadAndFetchResourceByUrl
CHttpSession::_Initialize
className
Cleared event hander for item %s
Client_ShowSkipForceAuthentication
ClientProcessUtils::CheckMultipleUserSupport
ClientProcessUtils::EnsureWindowFromCallingProcess
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ClientProcessUtils::GetCallerTokenFromComCall
ClientProcessUtils::GetCallingAppName
ClientProcessUtils::GetCallingAppPackage
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFamilyName
ClientProcessUtils::GetCallingAppPackageFullName
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppSessionGuid
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::GetCallingAppWindowHandle
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ClientProcessUtils::GetModalExperienceManager
ClientProcessUtils::GetSidForUser
ClientProcessUtils::GetWindowHandle
ClientProcessUtils::IsCallerERA
CloseHandle
CloseState
CloseThreadpoolTimer
cNameValuePairs >= 0
CoCreateFreeThreadedMarshaler
CoCreateInstance
CoGetApartmentType
CoGetCallContext
CoGetCallerTID
CoGetInterfaceAndReleaseStream
CoGetMalloc
CoImpersonateClient
CollectionData
CollectionsServiceProxyV6::ConsumeConsumable
CollectionsServiceProxyV6::GetCampaignId
CollectionsServiceProxyV6::GetUnfulfilledConsumables
CoMarshalInterface
combase.dll
CompanyName
CompareFileTime
CompareStringOrdinal
CompareStringW
ComposeLegacyXboxContentIdFromInstalledContentId
Conditions
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
Consumable
consumableProductId
consumers
ContentIds
continuationToken
Conversion to hex failed: %s
Conversion to UINT64 failed: %s
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ConvertSidToStringSidW
CopySid
CoReleaseMarshalData
CoRevertToSelf
CoRevertToSelf()
CoSetProxyBlanket
CoSwitchCallContext
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
count
CoWaitForMultipleHandles
CreateDirectoryW
CreateEvent failed
CreateEventExW
CreateEventW
CreateFileA
CreateFileW
CreateGetItemsRequest
CreateListingInformation
CreateMutexExW
CreateProcessW
CreateRandomAccessStreamOverStream
CreateSemaphoreExW
CreateStreamOnHGlobal
CreateThreadpoolTimer
Creating reg.exe process failed
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CRYPTSP.dll
CSP6Internal::CreateCatalogHttpClient
CStdStubBuffer_AddRef
CStdStubBuffer_Connect
CStdStubBuffer_CountRefs
CStdStubBuffer_DebugServerQueryInterface
CStdStubBuffer_DebugServerRelease
CStdStubBuffer_Disconnect
CStdStubBuffer_Invoke
CStdStubBuffer_IsIIDSupported
CStdStubBuffer_QueryInterface
CStdStubBuffer2_Connect
CStdStubBuffer2_CountRefs
CStdStubBuffer2_Disconnect
CStdStubBuffer2_QueryInterface
CurrencyCode
CurrencySymbol
CurrentApp.AppId
CurrentApp.GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppReceiptAsync
CurrentApp.GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerPurchaseIdAsync
CurrentApp.GetProductReceiptAsync
CurrentApp.GetUnfulfilledConsumablesAsync
CurrentApp.LicenseInformation
CurrentApp.LinkUri
CurrentApp.LoadListingInformationAsync
CurrentApp.ReportConsumableFulfillmentAsync
CurrentApp.ReportProductFulfillment
CurrentApp.RequestAppPurchaseAsync
CurrentApp.RequestProductPurchaseAsync
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
CurrentEraTitleInfo::GetAppId
CurrentEraTitleInfo::GetProxyAppPid
CustomDeveloperData
CWSHttpHelper::AddTHAdditionalHeaders
CWSHttpHelper::AddTHAdditionalRequestHeader
CWSHttpHelper::FetchURL
D$ 9D$
D$ Ph
D$ Ph@
D$ Phh
D$ PhX
D$ Pj
D$ PQ
D$ PSW
D$ PWWWW
D$ QQ
D$ SVW
D$$Ph
D$$Pj
D$$PQ
D$(Ph
D$(Ph(
D$(Pj
D$(PQ
D$(PVj
D$(QQj
D$(SV
D$(SV3
D$,Pj
D$,PQ
D$,SQj
D$,YY9D$
D$@PQ
D$@PV
D$<;D$H
D$<;D$Tr
D$<Pj
D$<PQ
D$<PV
D$<PVj
D$<QQWhP
D$0;D$8r
D$0Ph
D$0PhP
D$0Pj
D$0PV
D$0VP
D$4P2
D$4PQ
D$8P2
D$8Pj
D$8PV
D$8QV
D$DPQ
D$HPj
D$hPQQ
D$HPQQ
D$hQQ
D$lSP
D$Pl5
D$pPh
D$tPV
D$XQQ
D$XSP
D$XSV
d/Zc1q
D0[0w0
DataDownloaded callback failed
DebugBreak
DecodePointer
defaultValue
DelayLoadFailureHook
DeleteCriticalSection
DeleteFileA
DeleteFileW
Developer
DeviceContext
deviceFamily
DeviceFamily
deviceMoid
deviceOemid
deviceScmid
devOfferId
DevOfferId
DisableThreadLibraryCalls
DisplayProductSearchResult
DisplayRank
DisplaySkuAvailabilities
DisplaySkuSearchResult
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
DoDelete
DoHead
DoOptions
DoPatch
DoPost
DoPut
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
DSVWj
DumpListingToDebugger
DuplicateTokenEx
Durable
Duration
dwContext != 0
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
E(SVW
e/X4V
e;~P5
E_NOT_SET
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
EncodePointer
EndDate
EndOperation
EnterCriticalSection
Enterprise
entitlementFilters
entitlementId
Entry cannot have a Body Template: %s
Entry requires a Body Template: %s
en-US
eReceiptType
ERROR
Error
error
Error
Error Code
ErrorCode
ErrorLocation
ErrorMessage
ErrorMethod
EtwEventEnabled
EtwEventRegister
EtwEventSetInformation
EtwEventUnregister
EtwEventWrite
EtwEventWriteTransfer
EventActivityIdControl
EventData
EventProviderEnabled
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EvtExportLog
EVVhP
Exception
Exception Details
ExpandEnvironmentStringsA
ExpandEnvironmentStringsW
expandSatisfyingItems
expiration
ExtendedData
ext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-kernel32-package-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
f;F$u
f;F.u
F0Vhp(
Failed
Failed to convert systemtime to filetime
Failed to find substitute value with key %s and no default value provided.
Failed to find substitute value with key %s!
Failed to parse property '%s'
Failed to substitute value with key %s because we were given an invalid type!
FailFast
FallbackToDeviceAuth
false
FALSE
false
false && "AppInstallItem returned an unexpected InstallType!"
false && "Store service returned an unexpected enum!"
FChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
fg:SM
File Name
FileDescription
FileTimeToDosDateTime
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FilterIAPs
FindClose
FindFirstFileA
FindFirstFileExA
FindNextFileA
FindResourceExW
FindWindowExW
FiWWVP
floor
FlushTrace for %s failed
FlushTraces
FlushTraceW
ForcePrompt
ForceRetailSandbox
FormatMessageW
FormatNameValuePairs
Found matching package for %s
Found update for package = %s
Foundation
FreeLibrary
FreeResource
FreeSid
frPy=?=
FRtlQueryFeatureConfiguration
Fsq^V
FulfillmentType
Function
FWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
FYWWVP
G ;A0t(
G h@S
G Ph(
G Ph(7
G Phx#
G,PSWh
G0;A@t(
G0P0]0q0|0
G4VVWP
GcUDLoW
get_AppId() invoked.
get_LicenseInformation() invoked.
get_LinkUri() invoked.
GetAppPurchaseCampaignIdAsync invoked.
GetAppReceiptAsync() invoked.
GetCallingProcessPackageFullName
GetContinuationToken
GetCurrencyFormatEx
GetCurrentPackageFullName
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCustomerCollectionsIdAsync() invoked.
GetCustomerPurchaseIdAsync() invoked.
GetERAPackageFullNameByAumid
GetExitCodeProcess
GetExitCodeProcess failed
GetFileInformationByHandle
GetFileSize
GetForegroundWindow
GetFormattedPriceUsingCurrencyFormatter
GetGeoInfoW
GetHttpResponse
GetLastError
GetLastError()
GetLengthSid
GetLocaleInfoEx
GetLocalTime
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetPackageFamilyNameFromToken
GetPackageFullName
GetPackageFullNameFromToken
GetPriceInfo
GetPriceInfoFromAvailability
GetProcAddress
GetProcessHeap
GetProcessId
GetProcessIdOfThread
GetProductReceiptAsync(%s) invoked.
GetRequiredEkbFromContentId
GetRestrictedErrorInfo
GetStateFolder
GetSystemTime
GetSystemTimeAsFileTime
GetTempFileNameA
GetTempPathA
GetTempPathW
GetTempPathW failed
GetTickCount
GetTickCount64
GetTokenInformation
GetUnfulfilledConsumablesAsync() invoked.
GetUserDefaultLocaleName
GetUserGeoID
GetVersionExA
GetWindowTextW
GetWindowThreadProcessId
GlobalCollection
GlobalFree
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
goldenBeneficiary
goldenBeneficiaryArray
Got event for item with Package Family Name %s after the events were unregistered.
H,;J@t>
Hardware
HasMorePages
HasPreviewCapability
HasTrial
HeapAlloc
HeapFree
HeapReAlloc
Height
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
hModule != nullptr
hQSh 
HRESULT_FROM_WIN32(1317L)
HResultOfOperation
hrInfo
HSTRING_UserFree
HSTRING_UserMarshal
HSTRING_UserSize
HSTRING_UserUnmarshal
HStringBufferWrapper::Promote
http%s://%s/%s
http:
https://
https://login.microsoft.com
https://login.windows.local
https://login.windows.net/common
https://onestore.microsoft.com
https://purchase.mp.microsoft.com
I*Z9$
I_RpcBindingInqLocalClientPID
I0G1-0+
i8"<>
I8QWhdj
I'ae#
IAPReceiptType_App
IAPReceiptType_OneProduct
IAPUtils::BuildEntitlementFiltersJSON
IAPUtils::BuildStoreId
IAPUtils::CheckProductKinds
IAPUtils::CombineProductsAndCollectionsJson
IAPUtils::ConstructSlsUri
IAPUtils::CreateHttpClient
IAPUtils::CreateHttpClientWithAuthHeader
IAPUtils::CreateHttpClientWithAuthIfAvailable
IAPUtils::CreateUri
IAPUtils::GetDeviceContextId
IAPUtils::GetDeviceContextString
IAPUtils::GetDeviceIds
IAPUtils::GetFormattedPrice
IAPUtils::GetJsonFromURL
IAPUtils::GetJsonFromURLWithHttpClient
IAPUtils::GetLanguage
IAPUtils::GetLanguages
IAPUtils::GetLanguagesString
IAPUtils::GetTimeSpanDifference
IAPUtils::IsCallingProcessAppContainer
IAPUtils::ParseStoreId
IAPUtils::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
IAPUtils::ParseUriSubstitutionTag
IAPUtils::PostJsonToURLWithHttpClient
IAPUtils::SetDateTime
IAPUtils::TimeSpanToString
IAsyncAction
IAsyncOperation`1
IAsyncOperation`1<Boolean>
IAsyncOperation`1<String>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
IAsyncOperationWithProgress`2
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
identityType
identityValue
IdType
iertutil.dll
IIDFromString
imageName
ImagePurpose
Images
imageSize
ImpersonateLoggedOnUser
imSJ??
InAppOfferToken
inAppOfferToken
includeReceipt
includeRelationship
Index
InitialDuration
InitializeCriticalSection
InitializeCriticalSectionEx
InitializeSRWLock
InitOnceExecuteOnce
innererror
Installs to complete, continuing
InsufficientConsumeQuantity
InternalName
InternalStoreEndpointExtensionUrls
InvokedApi
InvokePurchaseFlow
ip/Z 
iR{I<
isActive
IsDebuggerPresent
isDiscLicense
IsErrorPropagationEnabled
isOptional
IsRecurring
IsRpcServerCallOnLocalTransport
IsTrial
isTrial
isTrialOwnedByThisUser
itemCount
Items
items
IUnknown_AddRef_Proxy
IUnknown_QueryInterface_Proxy
IUnknown_Release_Proxy
IWQQQP
j j!3
j j!h
j!h(Z
j"j#h
j#j$3
j#j$h
j$j%hX
j%j&h
j%j&hX
J%n%H
j(j)3
j(j)h
j)j*h
j,hh_
j,j-h0\
j,j-hP
j.j/h
j:[f9
j;Xf9E
j;Zf;
j?j@h
j@jAh
j@jAhhg
j+Xf;
j=j>h
J>f;O
j0hPq
J0V0b0g0q0
j1j2h
j2j3h
j2j3hXm
j3j43
j3j4h
j3j4hX[
j5j6hHs
-J8)<
j8j9h
j8j9h8a
j9h0Y
jah@\
jAjBh
jc_!0
jEjFh
JelNZ
JGFY__x_Windows_CInternal_CStore_CIPurchaseEventArgsRedstone
jGjHh
j'j(h
j-j.3
j-j.hh
jjjjjj
jLh@\
jljmh8
jQVhx
Json document is missing a required field.
JSON_RESPONSE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
jsonArray->GetStringAt(i, text.GetAddressOf())
JsonHelpers::AppendObject
JsonHelpers::AppendString
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
JsonHelpers::GetNamedDateTime
JsonHelpers::ParseToJsonArray
JsonHelpers::ParseToJsonObject
JsonHelpers::RemoveAt
JsonHelpers::SetNamedArray
JsonHelpers::SetNamedBool
JsonHelpers::SetNamedDateTime
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedNumber
JsonHelpers::SetNamedObject
JsonHelpers::SetNamedString
JsonHelpers::SetNamedTimeSpan
JsonHelpers::Stringify
JsonHelpers::Stringify(_response, jsonResponse)
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
jsonRequest: %s
jsonResponse: %s
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonValue->GetBoolean(&value)
jsonValue->GetNumber(&result)
jsonValue->GetNumber(&valueAsDouble)
jsonValue->GetObject(jsonObject.GetAddressOf())
jsonValue->GetString(string.GetAddressOf())
jsonValue->GetString(timeString.GetAddressOf())
jSXf;
JTk_S/
jUjVh
j-Xf;F
jxjyh
j-Yf9L$8u
j-Zf;
K PV3
K.y/h
K:"hv
K<Vu j
K=oLa
K8PVW
Kd';'q
kernelbase.dll
keybd_event
KeyIds
keywords
Kir*1
KnILk
L$ ;L$$
L$ 9L$$
L$ PQ
L$ Qh
L$ QS
L$ QV
L$ QW
L$ VW
L$#QV
L$$9L$
L$$Qh
L$(;L$<
L$(QS
L$(QSP
L$(VW
L$,h`Z
L$,QS
L$,QV
L$@QPj
L$@VW
L$\CS
L$`CS
L$<;L$P
L$<9L$P
L$<CS
L$<PV
L$<QV
L$0QP
L$0QPj
L$0QV
L$0VW
L$4^3
L$4_^[3
L$8PS
L$D_^[3
L$DQV
L$HCS
L$HPj
L$HQS
L$HQW
L$HVW
L$l_^[3
L$LQV
L$PQV
L$PQVPj
L$TQW
L$X;L$L
L$X9L$L
L$XQRP
Language
languages
latencyMs
LCMapStringEx
LeaveCriticalSection
LegacyWindowsPhoneLicensingData
Legal_Policy_Statement
LegalCopyright
length >= (count * 2)
licensableSku
licensableStatus
License Info for app %s: (CV = %hs)
LicensingData
Line Number
LineNumber
LinkUriFormat
Listing Information (after filtering, CV = %hs):
ListPrice
LoadAddOnProductInfosAsync() invoked.
LoadListingInformationAsync() invoked.
LoadListingInformationByKeywordsAsync() invoked.
LoadListingInformationByProductIdsAsync() invoked.
LoadResource
LoadStringW
Local\SM0:%d:%d:%hs
LocalAlloc
locale
LocalFree
LocalizedProperties
localTicketReference
LockResource
LogHr
LogMessage
LogSimpleMessage
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
M QRSP
m_bInitialized
m_productId.CopyTo(productId)
Machine
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
malloc
MapVirtualKeyW
market
MarketProperties
maxItemsToRetrieve
maxItemsToRetrievePerPage
maxPageSize
mbi_ssl
MBI_SSL
mbstowcs_s
MDCollections
MDDisplayCatalog
MDGetAppReceiptsDesktop
MDGetAppReceiptsMobile
MDGetOneProductReceiptMobile
MDPurchase
Member Name
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
Message
Messages
Microsoft
Microsoft Code Signing PCA 2010
Microsoft Code Signing PCA 20100
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1)0'
Microsoft Corporation1200
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft Store Runtime DLL
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
Microsoft.Windows.ApplicationModel.Store.Telemetry
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-Store/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-TWinUI-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
minATL$__a
minATL$__m
minATL$__r
minATL$__z
MinimumUserAge
Minute
mobilling.microsoft.com
MOBillingAuthenticationDomain
ModalFlow
ModalFlowSizes
modalManager->ShowForContractByAppID( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
modalManagerAsUser->ShowForContractByAppIDAsUser( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
Module Name
ModuleCollection
ModuleLoaded
moId=%s&oemId=%s&scmId=%s
Month
Moving %s to final state: %d
MSAHW1.0=
MS-CorrelationId
MS-CV
Msg:[%ws] 
MS-RequestId
MS-SiteName
msvcrt.dll
ms-windows-store://signin
MultiByteToWideChar
MYF{m
N0L0J
N1G:B
nameValuePairs || (cNameValuePairs == 0)
ncalrpc
NdrClientCall4
NdrCStdStubBuffer_Release
NdrCStdStubBuffer2_Release
NdrDllCanUnloadNow
NdrDllGetClassObject
NdrOleAllocate
NdrOleFree
NdrStubCall2
NdrStubForwardingFunction
NetworkError
networkError
neutral
NewQuantity
NHRX7
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
N'J:c
Nl\BR
No contentInfo could be obtained from the preview license response.
No products found
No Sku Id could be obtained from the preview license response.
not set
NotPurchased
ntdll.dll
NtQueryInformationProcess
NtQueryWnfStateData
NtUpdateWnfStateData
number
-N-x-
O PVS
O(PSV
O(PVS
O0M0K
O4PVS
oaE$rsg
object
Oc7Wa
OEMDiscoveryTTL
OEMID
OmitAuthTokenPrefix
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
onecore\internal\sdk\inc\wil\opensource\wil\com.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\Staging.h
onecore\internal\shell\inc\asyncoperationhelper.h
onecore\internal\shell\inc\AsyncOperationHelper.h
onecore\internal\shell\inc\windowsinternalstring.h
onecore\shell\lib\calleridentity\calleridentity.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
onecoreuap\enduser\winstore\lib\httprequest.cpp
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
onecoreuap\enduser\Winstore\licensing\wsinc\WSErrorUtils.h
onecoreuap\enduser\Winstore\licensing\wsinc\WSHttpHelper.h
onecoreuap\internal\base\inc\userawarecalleridentity.h
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
OneStoreAuthenticationDomain
OneStoreAuthenticationPolicy
onlineIdTicket
OPCO 
OpenProcess
OpenProcessToken
OpenSemaphoreW
OpenStateExplicit
OpenThread
OpenThreadToken
OPTIONAL
options
OQhpZ
oQShL
Order
orderId
OrderManagementData
organizations
OriginalFilename
OutgoingServiceRequest
OutputDebugStringW
OY546
P$9X,u
P/Z/y<
P9w u
P9w0u
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
PackageFamilyName
PackageFamilyNameFromFullName
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
packageId->get_FullName(optionalPfn.GetAddressOf())
packageIdentifier
PackageNameAndPublisherIdFromFamilyName
packages
packageType
pagingInfo
parametersAsJson
parentProductId
ParentProductId
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
ParseSLSJson
PartB_Ms.Qos.OutgoingServiceRequest
PartB_Ms.Telemetry.Error
PathAppendA
PathAppendW
PathAppendW failed
PathCchAddExtension
PathCchAppendEx
PathCombineA
PathRemoveFileSpecA
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
pid != nullptr
Pj!hPy
Pj#hX{
Pj&h`e
Pj(h`X
Pj)h }
Pj*h0l
Pj*hX_
Pj,h`
Pj,hh~
Pj/h(h
Pj[h`
Pj\hH
Pj]h`#
Pj^h(C
Pj<hpz
Pj=hP
Pj=hXK
Pj>hX
Pj1h8
Pj3h(f
Pj3h`
Pj4hpe
Pj4hXx
Pj5h8
Pj5hHs
Pj7h i
Pj7hHw
Pj8hh
Pjah0;
Pjah8
PjchXZ
Pjeh@
PjghXY
Pj'h [
PjHh@
Pjhh@
PjhhP3
PjIh v
PjIh`
Pjjh`
Pjjhh
PjjhP
PjKh0
PjKhH
Pjlh@
PjLh@
PjOh 
PjOh`
PjOhP
PjPhhB
PjQhP
PjRh(%
PjRh`
PjSh $
PjTh8
PjVh(
PjVh8'
PjVhp
PjVhX,
PjWh0
PjXh0
PjYh0<
PjYhpB
PPPh8
PPPPPP
PPPPPPV
PPPPPPVW
PPPPPPW
PPPPSh
PPPPSh$
PPPPSh4
PPPPVh
PPPPWh
PPPPWh$
PPPPWhX
ppszProxyList && ppszProxyByPass && pdwAccessType
PPWh8
PQQQQ
PreferredSkuId
Preview license response did not have skuId. (CV = %hs)
Preview license response did not have skuId. (CV:%hs)
PreviewImage
previewStore
Price
PrimaryWebAccountId
Process Name
Product
productAddOns
ProductDescription
productId
ProductId
ProductIdCache::AddItem
ProductIdCache::ProductIdFromInAppOfferToken
ProductIdCache::ProductIdFromInAppOfferTokenTable
ProductIdCache::RefreshTableFromService
ProductIdCache::RuntimeClassInitialize
productIds
productIdsWithCommas
ProductKind
productKinds
ProductName
Products
productSkuIds
productStoreId
ProductTitle
ProductType
productTypes
ProductVersion
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
Properties
protocolStatusCode
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
PRVA\
PSSSS
PSSSSSSSj
PSVQQ
pszAuthorizationHeader
pszFullUrl
pszServerName && pszUrl
Public
PublisherId
publisherUserId
Purchase
PurchaseMEM
PurchaseOperation
purchaseStatus
PVVVV
PVWWW
q\Q17
q}X>N
QPh(c
QPhHZ
QQh X
QQPh\
QQPPPPPP
QQPPPPPPV
QQPPPPPPW
QQQh X
QQQQQQ
QQQQWh
QQRRRR
QQRRRRPh
QQSh@S
QQSSSSSSV
QQSSSSSSW
QQSVW
QQSVW3
QQSVWh@S
QQVhP
QQVW3
QQWWWW
QQWWWWWW
QRPh\a
QRPh\b
QRPh|a
QRPh|b
QRPh<a
QRPh<b
QSh(!
QSh(o
QSh(y
QSh@&
QSh@y
QSh@z
QSh`v
QSh|F
-QSh<
QSh<+
QSh<>
QSh0|
QSh01
QSh0r
QSh4q
QSh8N
QShd]
QShD{
QShd0
QShh#
QShHl
QShhs
QShL~
QShLP
QShlY
QShP(
QShP|
QShp9
QShPO
QShpq
QShpR
QShPz
QSht)
QSht3
QShTB
QShtz
QShx(
QShX+
QShXm
QShxN
QShXp
QSVW3
QSVWh
QSVWh@S
QSVWj@3
quantity
QuantityAvailable:
QueryPerformanceCounter
QueryTrace for %s failed
QueryTraceW
QueueUserWorkItem
QVh $
QVh 4
QVh 8
QVh i
QVh K
QVh$'
QVh$R
QVh(}
QVh(L
QVh(n
QVh(y
QVh,@
QVh,J
QVh@;
QVh@Q
QVh\@
QVh`#
QVh`$
QVh`=
QVh`A
QVh`E
QVh`m
QVh`V
QVh|u
QVh<>
QVh0*
QVh0]
QVh01
QVh0J
QVh0V
QVh4,
QVh48
QVh8%
QVh8.
QVh8/
QVh8~
QVh8<
QVh8S
QVh8U
QVhd^
QVhD`
QVhD3
QVhd8
QVhdb
QVhH-
QVhH/
QVhH[
QVhh<
QVhh4
QVhhD
QVhhe
QVhhs
QVhhV
QVhhW
QVhl4
QVhLI
QVhLP
QVhP!
QVhp|
QVhPi
QVhPn
QVhPQ
QVhpu
QVhPW
'QVhPW
QVht3
QVht6
QVhTB
QVhtX
QVhx-
QVhX*
QVhx.
QVhX\
QVhx]
QVhx3
QVhX4
QVhxU
QVhXW
QWh 4
QWh i
QWh(c
QWh,&
QWh,f
QWh@[
QWh@P
QWh@Q
QWh\v
QWh`A
QWh`D
QWh`m
QWh`n
QWh<>
QWh0-
QWh0f
QWh0m
QWh0X
QWh4a
QWh4k
QWh4n
QWh8k
QWh8S
QWhdh
QWhH,
QWhh4
QWhhc
QWhhN
QWhhw
QWhhY
QWhHZ
QWhL'
QWhLh
QWhlk
QWhlL
QWhLo
QWhLS
QWhp_
QWhpb
QWhpe
QWhpi
QWhPN
QWhPp
QWhPQ
QWhpu
QWhtq
QWhx-
QWhX\
QWhX+
QWhxh
QWhXl
QWhxo
QWhxS
QWhxv
QWhXY
QWhXZ
r(SP3
RaiseException
RaiseFailFastException
ReadFile
realloc
Receipt
ReceiptBase64Encoded
ReceiptHelpers::CachePhoneReceiptForOffline
ReceiptHelpers::DeleteCachedPhoneReceipt
ReceiptHelpers::FetchDesktopReceipt
ReceiptHelpers::FetchPhoneReceipt
ReceiptHelpers::FetchReceipt
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::GetFormattedPrice
ReceiptHelpers::GetPackageLocalAppDataPath
ReceiptHelpers::GetPhoneReceiptFilepath
ReceiptHelpers::GetPublisherId
ReceiptHelpers::GetReceiptCacheFileName
ReceiptHelpers::GetReceiptCacheFolder
ReceiptHelpers::LicenseParseReceiptResponse
ReceiptResponse
RecurrencePolicy
RecurrencePrice
Redmond1
refreshConsumablesAsync
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
RefreshLicenses
reg.exe process did not complete successfully. Exit Code: %d
RegCloseKey
RegDeleteKeyValueW
RegGetValueW
registry_DNSPolicy.txt
registry_SIH.txt
RegistryHelper::GetStringValue
RegistryHelper::SetQwordValue
RegistryHelper::SetStringValue
RegOpenCurrentUser
RegOpenKeyExW
RegSetKeyValueW
relatedProductId
RelatedProductId
RelatedProducts
relationshipType
RelationshipType
ReleaseLicense()
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
report.wer
ReportConsumableFulfillmentAsync(%s, %s) invoked.
ReportingEvents.log
ReportProductFulfillment(%s) invoked.
Request
Request 0x%08x failed, result %d
Request 0x%08x has machine %s and RID %s
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
Request to [%s] failed with connection error. Retrying %d more times
RequestAppPurchaseAsync(%s) invoked.
requestKind
requestParams.authType == tickets[0].m_providerType
RequestProductPurchaseAsync(%s, %s) invoked.
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
RequestProductPurchaseWithResultsAsync(%s) invoked.
RequestPurchase
RequireAuthToken
RequirePrivateStoreOnly
RequiresCapability
RequireValidLicense
ResetEvent
ResolveDelayLoadedAPI
resource
Response
Response buffer overflow
responseSizeBytes
result != nullptr
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
RETAIL
RetrieveJsonResponseFromResources
ReturnHr
RevertToSelf
RichPB
RoActivateInstance
RoGetActivationFactory
RoGetAgileReference
RoGetMatchingRestrictedErrorInfo
RoInitialize
RoOriginateError
RoOriginateErrorW
RoReportFailedDelegate
RoTransformError
RoUninitialize
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcHelpers::GetRpcHandle
RPCRT4.dll
RpcServerInqCallAttributesW
RpcStringBindingComposeW
RpcStringFreeW
RPht 
RPhXt
RQSh`
rQWh4
RSDSl
RSSh X
RSSSh X
RSWVj
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlGetDeviceFamilyInfoEnum
RtlNotifyFeatureUsage
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlPublishWnfStateData
RtlQueryWnfStateData
RtlRegisterFeatureConfigurationChangeNotification
RtlSubscribeWnfStateChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlUnsubscribeWnfStateChangeNotification
RtlUpcaseUnicodeChar
S _^[
S _^3
S$_^[
S0RVP
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
S8RWP
Sandbox
SCMID
SearchTitles
SearchTitleString
SearchTitleType
SellableBy
SendStoreRequest
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
Server: %s, URL %s
ServerError
service::%s::%s
serviceTicket
SetEvent
SetFilePointer
SetForegroundWindow
SetLastError
SetRestrictedErrorInfo
SetThreadpoolTimer
SetUnhandledExceptionFilter
SHCreateMemStream
SHTaskPoolAllowThreadReuse
SHTaskPoolQueueTask
SignatureKind: %hs
SizeofResource
Sj hh
Sj+hP
SkipCapabilityCheckIfERA
skipCount
SkipForceAuthentication
SkuDescription
SkuDisplayRank
skuId
SkuId
SkuTitle
SkuType
skuType
Sleep
SleepConditionVariableSRW
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\XboxLive
Software\Policies\Microsoft\WindowsStore
Source
spAppContentInfo->GetCatalogId(&productStoreId)
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
sprintf_s
SShi{
SSSSPh4
SSSSSS
SSWhP
Start callback failed
StartDate
status
Status done, remaining installs: %d
Store
Store service returned an unexpected enum: %hs
store.etl
StoreAADAccountId
storeAppInstallation
storeConfiguration
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
StoreConfigurationServer::GetStoreLogDataAsync
StoreContentModifier
StoreContext.RequestDownloadAndInstallStorePackagesAsync
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
StoreEndpointExtensionUrls
StorefrontClient
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
StorefrontClientWarningTask
StoreId
storeId
storeIds
StoreInfoBuilders::BuildStoreAppInfo
storeLicenseManagement
StoreOperational.etl
storeOptionalPackageInstallManagement
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
StorePreview.LoadAddOnProductInfosAsync
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
StorePurchaseApp
StorePurchaseAppMessage
strchr
string
StringFileInfo
StringFromGUID2
StringHelpers::DecodeBase64
StringHelpers::SplitString
StringHelpers::TrimEnds
StringifiedJsonValue::GetStringifiedValue
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
strncpy_s
strrchr
strtol
Succeeded
succeeded
success
SVh@S
SVWh$
SVWh@S
SVWj"j#
SVWj@
SVWP3
sW/Zl
System
SYSTEM\CurrentControlSet\Control\SystemInformation
SystemManufacturer
SystemProductName
SystemTimeToFileTime
t"QSh
t#h@S
t#ShTh
T$ ;E
T$ ;u
t$ Ph|
T$ PPPPPPV
T$#RP
t$$9\$0u(
T$$hHW
t$$QQ
T$$RQ
t$$Vj
T$(!|$
T$(j:Yf9
T$(PPPPPPS
T$(PPPPSh
T$(QQ
T$(QQQQPh
T$(QQQQQQP
T$(QQQQSh
T$(QQQQSh$
T$(QQQQWh$
T$(RP
T$(RQ
t$,h4
t$,PVV
T$,RP
T$,RQ
T$;RP
T$@QQQQWh
T$@QQQQWhX
T$@RP
T$_RP
T$`P3
T$`RQ
T$|RP
T$+RP
T$<9L$H
t$<PhPy
T$<RP
t$<WP
T$<Zf;
T$0PPPPPPW
T$0QQQQPh
T$0QQQQPh4
T$0QQQQQQP
T$0QQQQWh
T$0QQV
T$0RP
T$3RP
T$4RP
t$4SV
t$4WV
T$8!D$
T$8PPPPPPV
T$8PPPPVh
t$8QP
T$8QQ
T$8QQPh8
T$8QQQh8
T$8QQQQQQP
T$8RP
T$8RQ
t$8SV
T$bRP
T$CRP
T$cRP
T$CRP
T$DRP
t$DSV
T$hRP
T$HRP
T$KRP
T$kRP
T$LRP
T$P@3
T$pRP
T$PRP
T$pRP
T$PRP
t$pVQ
t$PWS
T$TRP
T$VRP
T$WRP
T$xRP
t&f9;t!
t&h@S
t\j;V
t]9^,t
t^,XGouF
t+9O(t&
t3SV3
targetUri
TelemetryAssert
TelemetryAssertDiagTrack
TEMPx
TerminateProcess
text/xml
tfjSXf;
Thales TSS ESN:60BC-E383-26351%0#
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
There is no connection profile
There were items in the collection, however iterator is pointing at the end of the collection...
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
This function must be called from a UI thread
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
Timer expired, triggering state refresh
timestamp
tjj?j@3
tM!|$
tMh@S
totalHits
TotalResultCount
toupper
t'QWh
trackingId
transactionId
Translation
TrialTimeRemaining
trialTimeRemaining
trialUniqueId
Trying to remove non-store package %s
Trying to remove package %s that isn't installed
Trying to remove package %s that isn't related to the calling app
tw9^,t
twinapi.appcore.dll
u"QPh
u"QQhh
u$h0|
u$QVh
u$QWh
u$WSQ
u)QWhH
u/9sHu*h
u~Kd1e
u0QVh
U0S0Q
u0SSS
u26P,
uc=iI
uEA-)
uhj.Xf9E
ul[xA
UMgrGetConstrainedUserToken
UMgrOpenProcessHandleForAccess
UMgrOpenProcessTokenForQuery
UMgrQueryUserContext
UMgrQueryUserToken
Unable to show consent dialog
Unfulfilled Consumables for %s (CV = %hs):
UnhandledExceptionFilter
Units
UnitType
UniversalStoreInApp
Unknown
UNKWN
UnmanagedConsumable
UnpackHStringIIterable
uNPPV
Uo~9@D
updated
UpdateDownloadLimit
u'QSh
u'QVh
u'QWh
URIBufferMaxSize
UriHelper::GetUri
UriHelper::GetUriWithPath
UriHelper::GetUriWithPathAndParameters
UriHelperInternal::GetUriEx
UriHelperInternal::GetUriString
UriHelperInternal::GetUriWithPathAndParametersEx
UriHelperInternal::InitOnceCallback
UriHelperV7::_FindUriWithIndex
UriHelperV7::_GetRawStringFromOS
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::GetIndexedEntry
UriHelperV7::GetRawString
UrlEscapeW
UseAuthIfAvailable
UseBackgroundTask
UsePromptSettings
User consent required, cancel = %s
User content required, cancel = %s
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
user.auth.xboxlive.com
UserId
UserTokenTypes
UuidCreate
UuidFromStringW
uW97t*h
UY7i*
uZSW3
V Php
V:)NM
V0[0c0
V4Ph 
v6.0/beneficiaries/me/keys
v6.0/collections/consume
v6.0/collections/query
v6.0/users/me/keys
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v7 %{
Valid
VALID
validityType
Value
VarFileInfo
Vector<HSTRING>::Make(vector.GetAddressOf())
Vector<T*>::Make(vector.GetAddressOf())
vector->Append(image.Get())
vector->Append(text.Get())
Verbose
VerifyCapability
Version
version
Version
VideoPurpose
Videos
VPh(7
VPh0W
VPhD[
VPhhc
VPhld
VPj@Z
VQPWV
VS_VERSION_INFO
VVVVVV
vwf;U
VWh@S
VWj j!
VWj43
VWPh(
VWPhx#
VWu$Q
VWu5j
w\_^[
WaitForCompletion
WaitForMultipleObjects returned %u
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
Waiting for installs to complete
WakeAllConditionVariable
Warning
Washington1
wcschr
wcscpy_s
wcscspn
wcsrchr
wcsstr
wcstod
wcstombs
wcstombs_s
wcstoul
WDs>u3
webservices.dll
WEVT_TEMPLATE
wevtapi.dll
Width
WilError_03
WilStaging_02
win:Error
win:Info
win:Informational
win:Verbose
win:Warning
win32
win8xappx
Windows
Windows Store/1.0
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.ApplicationModel.Core.CoreApplication
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.dll
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.ApplicationModel.Store.LicenseInformation
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.pdb
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.ProductLicense
Windows.ApplicationModel.Store.ProductListing
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.AppointmentDataProvider
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppService
Windows.AppUriHandler
Windows.BackgroundTasks
Windows.BarcodeScannerPreviewProvider
Windows.BarcodeScannerProvider
Windows.CachedFileUpdater
Windows.CameraSettings
Windows.CommandLineLaunch
Windows.ComponentUI
Windows.Contact.Call
Windows.Contact.Map
Windows.Contact.Message
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.ContactDataProvider
Windows.ContactPanel
Windows.ContactPicker
Windows.ContactsProvider.AddContact
Windows.ContactsProvider.ShowContact
Windows.Data.Json.JsonArray
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
Windows.Data.Xml.Dom.XmlDocument
Windows.Device
Windows.DialProtocol
Windows.EmailDataProvider
Windows.File
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Object>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.ValueSet
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Foundation.IAsyncAction
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.IReference`1<UInt32>
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Internal.FilePickerExperience
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageResourceResolver
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.User
Windows.Launch
windows.lockScreen
windows.LockScreenCall
Windows.LockScreenComponent
Windows.Management.Deployment.PackageManager
Windows.Networking.Connectivity.NetworkInformation
Windows.OopWebView
Windows.PeoplePane
Windows.PersonalAssistant.Launch
Windows.PosPaymentConnector
Windows.PreInstalledConfigTask
Windows.Print3DWorkflow
Windows.PrintSupportExtension
Windows.PrintSupportWorkflow
Windows.PrintTaskSettings
Windows.PrintWorkflowBackgroundTask
Windows.PrintWorkflowForegroundTask
Windows.Protocol
Windows.RestrictedLaunch
Windows.Search
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Security.Cryptography.CryptographicBuffer
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAvailability
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreCanAcquireLicenseResult
Windows.Services.Store.StoreCollectionData
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreContext
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreImage
Windows.Services.Store.StoreLicense
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StorePackageLicense
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePackageUpdateResult
Windows.Services.Store.StorePrice
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StoreProductPagedQueryResult
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProductQueryResult
Windows.Services.Store.StoreProductResult
Windows.Services.Store.StorePurchaseProperties
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreQueueItem
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreRateAndReviewResult
Windows.Services.Store.StoreRequestHelper
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreSendRequestResult
Windows.Services.Store.StoreSku
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSubscriptionInfo
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreVideo
Windows.ShareTarget
Windows.StartupTask
Windows.Storage.Streams.DataReader
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows.System.Launcher
Windows.System.Profile.AnalyticsInfo
Windows.System.UserProfile.GlobalizationPreferences
Windows.UI.Core.CoreWindow
Windows.UI.Popups.MessageDialog
Windows.UI.Popups.UICommand
Windows.UpdateTask
Windows.UserDataAccountsProvider
Windows.UserDataTaskDataProvider
Windows.VoiceCommand
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Web.Http.HttpClient
Windows.Web.Http.HttpMethod
Windows.Web.Http.HttpRequestMessage
Windows.Web.Http.HttpStringContent
Windows.WebAccountProvider
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::CProductLicenseMap::First
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_4d6848c418aef141d41ace1c3f3dfac6>::operator ()
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_44342999051b9ac76274da7b1abbe319>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_d3a7404197dfbd7a3c6bd86897146888>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_1a201aed0af0ca998e9b63a90a01ae15>::operator ()
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_0e1eb6e8a023329ec1e56327cb973434>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_7eec4b465b6401040cbcb9c2e9bfc558>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
Windows::ApplicationModel::Store::ProductListingServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
Windows::Services::Store::BackgroundTaskOperation::DoWork
Windows::Services::Store::BackgroundTaskOperation::GetResults
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
Windows::Services::Store::BulkHydrateOperation::DoWork
Windows::Services::Store::BulkHydrateOperation::GetResults
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreProductOperation::DoWork
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionOperation::DoWork
Windows::Services::Store::GetUserCollectionOperation::GetResults
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
Windows::Services::Store::Internal::StoreContextServer::GetProduct
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
Windows::Services::Store::Internal::StoreContextServer::GetProducts
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
Windows::Services::Store::Internal::StoreContextServer::Initialize
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
Windows::Services::Store::JsonParser::ParseArrayOfOne
Windows::Services::Store::JsonParser::ParseArrayToVector
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
Windows::Services::Store::JsonParser::ParseBoolean
Windows::Services::Store::JsonParser::ParseComPtr
Windows::Services::Store::JsonParser::ParseDate
Windows::Services::Store::JsonParser::ParseDouble
Windows::Services::Store::JsonParser::ParseInteger
Windows::Services::Store::JsonParser::ParseJSONStringToObject
Windows::Services::Store::JsonParser::ParseJSONToObject
Windows::Services::Store::JsonParser::ParseString
Windows::Services::Store::JsonParser::ParseTimeSpan
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
Windows::Services::Store::PurchaseOperation::_Purchase
Windows::Services::Store::PurchaseOperation::DoWork
Windows::Services::Store::PurchaseOperation::GetResults
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::ReportConsumableOperation::DoWork
Windows::Services::Store::ReportConsumableOperation::GetResults
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
Windows::Services::Store::RequestPurchaseOperation::DoWork
Windows::Services::Store::RequestPurchaseOperation::GetResults
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
Windows::Services::Store::StoreAppLicense::get_IsActive
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::get_AvailabilityId
Windows::Services::Store::StoreAvailability::get_EndDate
Windows::Services::Store::StoreAvailability::get_Price
Windows::Services::Store::StoreAvailability::get_StoreId
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_CampaignId
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_IsTrial
Windows::Services::Store::StoreCollectionData::get_ProductId
Windows::Services::Store::StoreCollectionData::get_SkuId
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::AssociateWithStoreContext
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CreateStoreContextServer
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
Windows::Services::Store::StoreContext::GetStoreContextServer
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetDefault
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetForUser
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
Windows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
Windows::Services::Store::StoreImage::get_Caption
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_ImagePurposeTag
Windows::Services::Store::StoreImage::get_Uri
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
Windows::Services::Store::StorePackageLicense::add_LicenseLost
Windows::Services::Store::StorePackageLicense::Close
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::get_Package
Windows::Services::Store::StorePackageLicense::ReleaseLicense
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdate::get_Mandatory
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
Windows::Services::Store::StorePrice::get_CurrencyCode
Windows::Services::Store::StorePrice::get_FormattedBasePrice
Windows::Services::Store::StorePrice::get_FormattedPrice
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_SaleEndDate
Windows::Services::Store::StorePrice::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::_SortSkus
Windows::Services::Store::StoreProduct::get_Description
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
Windows::Services::Store::StoreProduct::get_Images
Windows::Services::Store::StoreProduct::get_InAppOfferToken
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Keywords
Windows::Services::Store::StoreProduct::get_Language
Windows::Services::Store::StoreProduct::get_LinkUri
Windows::Services::Store::StoreProduct::get_PackageFamilyName
Windows::Services::Store::StoreProduct::get_Price
Windows::Services::Store::StoreProduct::get_ProductKind
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_StoreId
Windows::Services::Store::StoreProduct::get_Title
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductResult::get_ExtendedError
Windows::Services::Store::StoreProductResult::get_Product
Windows::Services::Store::StoreProductResult::RuntimeClassInitialize
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::get_Name
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::put_Name
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
Windows::Services::Store::StorePurchasePropertiesFactory::Create
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
Windows::Services::Store::StoreQueueItem::add_Completed
Windows::Services::Store::StoreQueueItem::add_StatusChanged
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_f9089d14568daab6275428f8629fb4c7>::operator ()
Windows::Services::Store::StoreQueueItem::get_InstallKind
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
Windows::Services::Store::StoreQueueItem::get_ProductId
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_7224a1540002655c1556aa4bdc197fe4>::operator ()
Windows::Services::Store::StoreQueueItem::remove_Completed
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_3f9aa3a4239f7e22e93f02d9104a803d>::operator ()
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::StoreRequestOperation::GetResults
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSku::_SortAvailabilities
Windows::Services::Store::StoreSku::get_Availabilities
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_CollectionData
Windows::Services::Store::StoreSku::get_CustomDeveloperData
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_FulfillmentType
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_IsSubscription
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_SkuId
Windows::Services::Store::StoreSku::get_StoreId
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::GetIsInstalledAsync
Windows::Services::Store::StoreSku::RequestPurchaseAsync
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreSku::RuntimeClassInitialize
Windows::Services::Store::StoreSku::set_ProductId
Windows::Services::Store::StoreSku::SetStoreContext
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_PreviewImage
Windows::Services::Store::StoreVideo::get_Uri
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Width
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
Windows::Services::Store::UninstallStorePackageOperation::DoWork
Windows::Services::Store::UninstallStorePackageOperation::GetResults
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows-ApplicationModel-Store-SDK
WindowsCompareStringOrdinal
WindowsConcatString
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteStringBuffer
WindowsDuplicateString
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsStoreSDK
WindowsStringHasEmbeddedNull
WindowsSubstring
WindowsSubstringWithSpecifiedLength
WindowsTrimStringEnd
WindowsTrimStringStart
WindowsUpdate
windowTitle
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpAddRequestHeaders(%s) failed
WinHttpCloseHandle
WinHttpConnect
WinHttpConnect failed for %s:%d
WinHttpCrackUrl
WinHttpCrackUrl failed
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpOpen
WinHttpOpen failed
WinHttpOpenRequest
WinHttpOpenRequest failed
WinHttpQueryHeaders
WinHttpQueryHeaders failed, status code = %i
WinHttpReadData
WinHttpReadData completion failed
WinHttpReadData failed
WinHttpReceiveResponse
WinHttpReceiveResponse failed
WinHttpSendRequest
WinHttpSetOption
WinHttpSetOption CONTEXT_VALUE failed
WinHttpSetOption failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetStatusCallback
WinHttpSetStatusCallback failed
WinHttpSetTimeouts
WinHttpSetTimeouts failed
WinStore
winstore
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::ExtractTicket
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::SetProxyBlanket
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_SLSFailure
WinstoreAuth_UserAuthRequired
Wj)Sj
Wj[Sj
Wj`Sj
Wj{Sj
Wj9Sj
WjASj
WjDSj
WjeSj
WjESj
WjfSj
WjhSj
WjkSj
WjOSj
WjPSj
WjpSj
WjPSj
WjtSj
WjUSj
WjvSj
WjxSj
WjZSj
WLID1.0=
wp8xappx
WriteFile
WSCollector::CollectStoreLog
WsCreateError
WsCreateHeap
WsCreateReader
WSErrorUtils::ConvertInternalErrorCodeToExternal
WsFindAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsGetReaderPosition
WsMoveReader
WsReadBytes
WsReadChars
WsReadEndAttribute
WsReadStartAttribute
WsReadStartElement
WsReadToStartElement
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WWhS~
www.microsoft.com
WWWWWW
x!9|$
x(Qhpt
x(Qhxv
x,h@S
x,SSh@
x@h@S
X~{TR
x>h@S
X0V0T
xAj@j
XboxLiveAuthenticationDomain
XboxUserId
xcWWW
xSu$W
Xtoken
X-Windows-Store-Debugging-Id
X-Windows-Store-Debugging-Id:%s
X-WP-ANID
x-xbl-contract-version:2
y QSh
y QShP:
y QVh
y QVh 
y QVh K
y QVh(
y QVh(n
y QVh@
y QVh@i
y QVh\
y QVh`s
y QVh`w
y QVh|
y QVh0
y QVh0z
y QVh4
y QVh8C
y QVhd
y QVhD
y QVhh^
y QVhP
y QVhp
y QVhP#
y QVhP(
y QVhpS
y QVhT
y QVht
y QWh
y QWh  
y QWh@a
y QWh\
y QWh8
y QWhP
y QWhXx
y"QSh
y"QSh 
y"QSh@
y"QSh`
y"QShD4
y"QShh
y"QShh,
y"QShP
y"QVh
y"QVh 
y"QVh ~
y"QVh$
y"QVh@
y"QVh\
y"QVh\[
y"QVh`
y"QVh`:
y"QVh`e
y"QVh`m
y"QVh|
y"QVh0
y"QVh0;
y"QVh0T
y"QVh4P
y"QVh8
y"QVhd
y"QVhd$
y"QVhH
y"QVhh
y"QVhH
y"QVhh!
y"QVhh*
y"QVhH:
y"QVhhL
y"QVhl
y"QVhP
y"QVhp
y"QVhP
y"QVhP)
y"QVhP7
y"QVhPx
y"QVhT|
y"QVhX
y"QVhx
y"QVhX4
y"QVhXt
y"QWh
y"QWh L
y"QWh(
y"QWh(E
y"QWh(H
y"QWh@
y"QWh@g
y"QWh`
y"QWh<
y"QWh0}
y"QWhD
y"QWhH
y"QWhh
y"QWhh{
y"QWhhK
y"QWhHO
y"QWhlG
y"QWhP
y"QWhPG
y"QWht
y"QWhX}
y#QWh
y$QQS
y$QSh@
y$QShT
y$QVh
y$QVh i
y$QVh$
y$QVh0
y$QVh8
y$QVhH
y$QVhpz
y$QVhx
y$QWh
y$QWh(
y$QWh\
y$QWh<{
y$QWh8J
y$QWhD
y$QWhH
y$QWhp
y$QWhpP
y%QSh
y%QShht
y%QShHu
y%QShT
y%QVh
y%QVh 
y%QVh`
y%QVh0
y%QVh8_
y%QVhP
y%QVhPJ
y%QVhTM
y%QVhX
y%QVhx
y%QWh
y%QWh 
y%QWh(c
y%QWh,
y%QWh8
y%QWhh
y%QWhH
y%QWhLP
y%QWhPa
y%QWht
y%QWhTM
y&QWhh
y&WhP~
y(QVh
y(QWh
y(QWh4
y)QPh
y)QWh i
y)QWh@b
y*QSh
y*QShh
y*QVhh
y*QWh
y*QWhp
y,QVh
y,QVhH
y,QVhP
y,QVhX
y,QVhxu
y,QWh
y.QVh
y.QVhH
y.QWh
y.QWh8
y.QWhx
y.VhP
y/QSh
y/QVh
y/QVh`
y/QVh|
y/QVh4
y/QWh
y/QWh 
y/QWh$
y/QWh0
y/QWh8
y:QSh
y:QVh
y:QVhH
y;QSh
y;QVh
y;QWh
y?h(y
y?QSh
y?QVh
y?QWh
y@QWh
y@QWh@b
y[QSh
y[QVh
y[QVh@
y[QWh8
y[QWhp_
y]QSh01
y]QWh
y^QWh
Y_^[]
Y__^[
y_QVh
y_QVh 
y_QVh(
y_QVh0
y_QVhp
y`QWh
y{QWh
y|QWh
y}QWh
y+QSh`P
y+QVh
y+QVh4
y+QWh
y+QWh`v
y+QWhH
y<QSh
y<QSh81
y<QVh
y<QWh(W
y<QWhX[
y=QShH
y=QVh
y=QVhH
y=QVhx
y=QWh
y>QWh
y0QSh
y0QSh('
y0QSh8R
y0QShHr
y0QVh
y0QVh@
y0QVh`
y0QVhP
y0QWh
y0QWh0]
y0QWhLh
y0QWhxX
y1QSh
y1QVh
y1QWh
y2QSh
y2QShP
y2QShXq
y2QVh
y2QVh@h
y2QWh
y2QWhX
y3QSh
y3QVh
y3QVh0
y3QWh
Y4f`2s
y4QQj
y4QSh
y4QShP
y4QVh
y4QWh
y4QWhhM
y5QSh
y5QShh
y5QVh
y5QWh
y5QWh0X
y6QSh p
y6QSh`v
y6QVh
y6QVh8.
y6QWh
y6QWh`^
y7h p
y7QSh
y7QVh@
y7QWh
y7QWh D
y8QSh
y8QVh
y8QVhX
y8QWh
y8QWh(
y9QSh
y9QSh<+
y9QVh
y9QVh`
y9QWh
y9QWh<A
y9QWh8Y
yAQSh
yAQSh(n
yAQSh8n
yAQShPe
yaQShX
yAQWh@j
yAQWh@o
yaQWh0
yAQWh8
yAQWhh
ybQVh
ybQWh
yBQWh
ybQWh 
ybQWh`
yCQPh
yCQSh8
yCQVh
yCQWh
yCQWh@
yCQWh`
yDQSh0
yDQWh
yDQWhTv
YEa+#
yEQVh
yEQWh
yEQWh`
yfQSh x
yfQVh
yfQVh(
yFQVhPe
yFQWhtf
yGQSh
ygQVh
yGQVh
yGQWh
yGQWh`^
yHQSh
yHQVh
yHQWh
yhQWh
yHQWh
yHQWh,v
yHQWhh
yIQWh
yJQSh`
yJQSh0
yjQVh
yJQVh<b
yjQVhP
yjQVhX
yjQWh
yJQWh
yjQWh@
yK ('
ykQSh
yKQShT
yKQVh
ykQVh
yKQVh
yKQWh 
yKQWh0
ykQWhX
Ylp)d_
ylQSh
yLQSh
yLQWh
yLQWhp
ymQSh
yMQSh
yMQSht
yMQVh
yMQWh
ymQWh
yMQWh0F
yMQWhxN
yNQSh
yNQWh
yOQVh 9
yOQWh
YPhP\
YPhts
yPQShxN
yPQVh
yPQWh<A
yQQWh
yQQWhxy
y'QSh
y-QSh
y'QSh 
y'QSh(
y-QSh\
y'QSh`
y'QSh0
y'QSh0a
y'QSh8Y
y'QShH
y-QShhj
y'QShHm
y'QShX
y-QShX@
y-QShxu
y'QVh
y-QVh
y'QVh 1
y-QVh 5
y'QVh i
y'QVh V
y'QVh(
y'QVh@
y-QVh\
y'QVh`A
y'QVh|
y-QVh<A
y-QVh0
y'QVh02
y'QVh0O
y'QVh8
y'QVhd%
y'QVhh
y'QVhH/
y'QVhP
y'QVhp
y'QVhP 
y'QVhT
y'QVhTM
y'QVhX
y'QVhx
y'QVhX
y'QWh
y-QWh
y'QWh 
y'QWh `
y'QWh M
y'QWh$
y'QWh(
y'QWh`x
y'QWh<
y'QWh0
y'QWh0]
y'QWh0a
y'QWh0d
y-QWh0d
y'QWh8b
y'QWhd%
y'QWhd]
y-QWhd]
y'QWhdj
y'QWhH
y-QWhL
y-QWhlY
y'QWhT
y-QWhTB
y'QWhx
y-QWhx-
y'QWhX&
y-QWhX@
y'QWhXf
y-QWhxX
ySQWh
ySQWhXd
yTQVh
yTQWh x
yTQWh|
yUQSh
yUQVh
yuQWh
yUQWhpO
yVQSh
yVQWh0K
yVQWhHZ
yvQWhP
ywQShL
yWQWh
yXQWh
yxQWh
yxQWhP
yXShPn
yYQWh8
yyQWhP
yzQVh
yzQVhH
z~PBk
Z9X,tV3
ZuIf9tY
