                                     Callstack: %p %p %p %p %p %p %p %p %p %p %p %p
 [ Q7
 0<0G0R0
 070Y0
 AND ((tv.Flags & ?) <> 0)
 AND ((tv.NotFlags & ?) = 0)
 AND ((tv.TileType & ?) <> 0)
 AND (tv._WorkId=0 OR tv._WorkId=?);
 AND tv._WorkId=0;
 AND tv.ApplicationUserModelId=?
 AND tv.TileId=?
 http://www.microsoft.com/windows0
 jYT:
 Microsoft Corporation. All rights reserved.
 Microsoft Operations Puerto Rico1&0$
 Operating System
 Pct;<m
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND dg._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) WHERE pu.User=?1 AND pu.Package=?2 AND pu._WorkId=0 AND pel._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) WHERE dg.User=?1 AND dg.DependentPackage=?2 AND dg._WorkId=0 AND pel._WorkId=0 LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Bundle AS b ON b._BundleId = bp.Bundle INNER JOIN Package AS p ON p._PackageID = b.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE pf.PackageFamilyName=?1 AND bp.ResourceId=?2 AND (bp._WorkId=0 OR bp._WorkId=?3) AND (b._WorkId=0 OR b._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Bundle AS b ON b._BundleId = bp.Bundle INNER JOIN Package AS p ON p._PackageID = b.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE pf.PackageFamilyName=?1 AND bp.ResourceId=?2 AND bp._WorkId=0 AND b._WorkId=0 AND p._WorkId=0 LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND (dg._WorkId=0 OR dg._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
 SELECT EXISTS(SELECT 1 FROM DependencyGraph AS dg INNER JOIN Package AS p ON p._PackageID = dg.SupplierPackage INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID = p.PackageFamily WHERE dg.User=?1 AND dg.DependentPackage=?2 AND pf.PackageFamilyName=?3 AND dg._WorkId=0 AND p._WorkId=0 LIMIT 1);
 Windows
!:2:6:<:@:F:J:R:V:\:`:f:j:p:t:z:~:
!\$<!\$@!\$D
!]_0t
!040]0s0
!070M0c0y0
!0L0Z0
!0W0^0
!MachineDatabase_PagesCheckpointed
!This program cannot be run in DOS mode.
!TkjE
"%},{
"0>0\0j0w0
"050_0
"Microsoft Window
#090X0k0
#0H0V0
#0O0y0
#0P0a0
#Deleted
#Found
#HMDuV
#L$(P
$0^0y0
$0_0|0
$070Q0m0
$0I0_0
$0Z0a0
$C_"5
$DeploymentDatabase_PagesCheckpointed
$Efu&
$lsM'0
$Microsoft Ireland Operations Limited1
%0,0|0
%0,0y0
%02u%02u%02u %02u%02u%02u.%03u [%s 0x%08X] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Profile %ums] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Trace] P%x T%x: %s
%0L0^0o0
%0O0l0{0
%0R0q0
%4tX<
%AppRepository%
%AppRepository%\Downlevel\StateRepository-Machine.srd
%AppRepository%\StateRepository-Deployment.srd
%AppRepository%\StateRepository-Machine.srd
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%I64d
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
%PackageStatics::FindBySourceBundleAndPackageType
%USERPROFILE%
%w2h<
%wPsy%
&0_0|0
&010C0[0
&go`4
&PWSV
&S|9a
(.Zcs
(0\0n0
(050R0
(caller: %p) 
(eXw)
(RVPV
(v6<]
)00080l0u0
)060S0
)0Rf~
)0y051
)LTNU
)Microsoft Root Certificate Authority 20100
)X7,j
*2<z>5
*O7<Wa
*tBuF
,*O [!
,030:0Z0t0
,7/7f0lgkTgDZUUKFx2bDZFdKSG3Y6xranhJOjddABFo=0Z
,GV FN{*
.00cfg
.bss$00
.bss$09
.bss$dk00
.bss$dk01
.bss$dk09
.bss$pr00
.bss$pr01
.bss$zz
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.data
.data$00
.data$09
.data$dk00
.data$dk00$brc
.data$dk01$brc
.data$dk09
.data$pr00$brc
.data$zz$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.rdata
.rdata$00
.rdata$01
.rdata$brc
.rdata$sxdata
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zz
.rdata$zz$brc
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$lp00windows.staterepository.dll!20_pri7
.text$lp01windows.staterepository.dll!20_pri7
.text$lp03windows.staterepository.dll!30_clientonly
.text$lp04windows.staterepository.dll!30_clientonly
.text$lp06windows.staterepository.dll!35_hybridboot
.text$lp08windows.staterepository.dll!50_coldboot
.text$lp09windows.staterepository.dll!50_coldboot
.text$mn
.text$np
.text$s
.text$x
.text$yd
.text$zs
.text$zy
.text$zz
.upgrade
.xdata$x
/0E0T0
/0L0[0
/0P0n0
/0S0b0
/0W0f0
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :(:,:0:4:<:@:D:H:P:T:X:\:d:h:l:p:x:|:
: :':.:5:H:f:m:t:
: :':.:K:[:b:i:p:
: :::S:
: :':@:N:Z:e:l:s:
: :-:4:;:B:U:g:q:|:
: :?:R:{:
: :d:q:
: :O:e:
: ;';
: ;@;
: ;<;0<G<i<
: ;>;
: ;7;
: ;9;_;
: ;b;
: ;h;
: ;m;
:!:&:7:m:
:!:(:A:W:b:o:v:}:
:!:(:M:d:r:
:!:):D:
:!:::v:
:!:_:j:u:
:!:+:5:?:I:S:]:g:t:
:!:4:F:
:!;@;i;p;
:!;1;O;];x;
:!;Q;g;
:":):;:[:d:k:
:":@:K:X:v:~:
:":4:s:
:":A:`:
:":D:j:
:":E:{:
:":N;w;
:":X:_:
:";);=;j;
:";_;
:";0;];k;
:";6;a;
:";8;
:";F;
:";H;
:";Q;
:";Q;t;
:#:*:1:8:I:s:
:#:,:8:i:
:#:2:?:e:
:#:9:l:s:z:
:#:A:H:O:e:
:#:V:z:
:#;;;T;
:#;<;u;
:#;>;t;{;
:#;2;
:#;2;z;
:#;A;X;y;
:#;q;
:#;X;x;
:#;Z;p;
:$:*:6:<:B:Y:
:$:|:
:$:>:X:r:
:$:2:>:I:P:W:d:
:$:l:
:$:p:
:$:T:g:
:$;+;
:$;+;{;
:$;+;~;
:$;=;D;m;
:$;1;U;x;
:$;2;A;U;s;
:$;K;
:$;N;
:%:;:F:S:Z:a:s:
:%:\:n:
:%:<:E:\:e:
:%:>:v:
:%:>:y:
:%:0:=:D:K:]:o:y:
:%:4:|:
:%:D:W:
:%:j:w:
:%:r:
:%:V:m:v:
:%;,;
:%;,;y;
:%;?;
:%;?;H;W;
:%;_;
:%;1;8;S;x;
:%;B;b;
:%;C;W;^;
:%;h;
:&:.:y:
:&:-:4:J:}:
:&:-:F:T:`:k:r:y:
:&:?:U:`:m:t:{:
:&:\:u:
:&:5:g:r:
:&:D:K:R:h:
:&;-;4;;;Q;y;
:&;A;m;
:(:>:Y:y:
:(:8:B:_:i:
:(:A:
:(:G:Z:
:(; <7<Y<
:(;/;
:(;_;u;
:(;>;];p;
:(;A;P;
:(;k;
:):\:c:
:):_:f:
:):d:q:x:
:):D:W:h:y:
:):g:
:):H:
:):M:d:m:
:):w:
:):X:_:w:
:);|;
:);k;v;
:);M;e;~;
:*:\:
:*:\:b:
:*:`:g:
:*:3:?:g:
:*:4:>:g:z:
:*:6:?:E:J:O:V:^:
:*:8:G:a:
:*:D:
:*:L:i:{:
:*:R:
:*:S:a:g:
:*:t:
:*:V:q:
:*;_;
:*;_;q;
:*;1;|;
:*;a;
:*;f;
:*;F;b;
:*;r;
:,:;:
:,:>:O:
:,:B:
:,:b:i:
:,:O:{:
:,;_;
:,;>;O;
:,;3;
:,;6;@;i;|;
:,;7;I;a;
:,;E;^;
:,;o;
:.:?:
:.:?:y:
:.:{:
:.:5:l:
:.:F:Y:x:
:.:M:`:
:.:v:
:.:V:a:h:o:
:.;=;m;
:.;5;>;E;
:.;G;j;
:/:6:
:/:6:=:D:U:
:/:6:=:Q:b:
:/:8:G:
:/:e:l:
:/:F:T:s:
:/:f:y:
:/:G:R:\:
:/:I:b:
:/:I:y:
:/:K:x:
:/;E;T;
:/;G;Q;i;
:/;L;[;
:/;S;b;
:':.:N:h:
:::|:
:::C:H:c:}:
:::P:
:::Q:Z:
::;q;
:-:4:T:l:s:
:-:C:g:~:
:-:D:
:':J:
:-:L:
:;:q:x:
:;:V:`:h:u:
:;;B;
:;;H;l;
:;;Q;a;
:';^;
:-;_;|;
:-;H;~;
:-;J;
:-;K;
:-;L;R;
:';p;
:';u;|;
:?:\:k:
:?:_:r:
:?:c:r:
:?:J:O:
:?:J:Z:
:?;_;
:?;F;
:?;o;
:?;Z;
:@:\:
:@:N:c:
:@:v:
:@;G;N;n;
:@;h;
:[:b:
:[:h:
:\:c:
:]:{:
:]:j:
:];d;
:]N2Y
:^:e:
:^;w;
:_:j:|:
:`:x:
:`;w;
:{:p;
:}:p;
:+:[:n:
:+:_:
:+:=:c:v:
:+:2:9:R:h:s:
:+:a:w:
:+:C:\:
:+:G:
:+:K:f:m:t:
:+:O:g:
:+:s:
:+;q;
:<:h:
:<:K:
:<:K:^:H;
:<:N:_:
:<:z:
:<;|;
:<;U;l;
:=:a:
:=:N:w:
:=:T:]:
:=;];
:=;D;
:=;G;];
:=<U<
:>:{:
:>:a:q:
:>:t:{:
:>;^;
:>;|;
:>;E;
:>;E;L;l;
:0:?:D:{:
:0:C:l:
:0:f:m:
:0:G:^:e:
:0:k:
:0:P:
:0:S:~:
:0:z:
:0;=;D;K;d;z;
:0;7;>;^;x;
:0;u;
:0;X;
:0;y;
:1:8:e:
:1:A:H:O:V:g:
:1:G:f:y:
:1:J:
:1:j:u:|:
:1;;;];y;
:1;{;
:1;8;
:1;D;m;
:2:B:
:2:E:j:}:
:2:h:o:
:2:K:
:2:N:
:2;?;c;
:2;h;o;
:2;V;r;
:3:>:K:R:Y:k:}:
:3:T:
:3:V:
:3;@;[;
:3;{;
:3;o;
:3;V;];~;
:4:I:i:
:4:M:
:4:M:r:
:4:N:
:4:Y:w:
:4;$<
:4;;;
:4;[;
:4;=;J;
:4;D<
:4;l;
:5:D:
:5:D:t:
:5:O:k:
:5;<;
:5;O;m;y;
:5;q;
:6:=:
:6:N:m:
:6:P:i:
:6:q:x:
:6:U:t:
:6;=;
:7:>:E:L:i:y:
:7:F:
:7:N:W:
:7:N:W:c:
:7:O:n:
:7:T:[:
:7;I;u;
:7;j;
:7;l;
:7;o;
:7;s;
:8:m:
:8:N:m:
:8:n:u:
:8:v:
:9:@:G:N:
:9:G:
:9:G:g:u:
:9:R:p:u:
:9;F;c;
:A:q:
:A:w:~:
:A:Z:
:A;I;U;
:A;r;
:B:f:~:
:B:U:q:x:
:b:x:
:B:X:
:b:x:
:b<n<u<
:C:_:
:c:~:
:C:R:
:d:k:
:D;K;
:D;q;
:D;Q;u;
:e:7;@;\;e;
:e:l:
:E:L:
:E;|;
:E;L;
:E;l;~;
:E;V;
:F:\:{:
:f:m:
:F:Y:
:F:z:
:F;f;
:f;y;
:g:n:
:g:t:
:G:Y:
:G:Z:
:H:^:
:H:~:
:H:b:i:
:H:d:
:h:o:
:H:O:o:
:h:u:
:H;|;
:H;R;a;
:H;U;r;
:i:v:
:i;q;
:I;x;
:J:`:
:j:q:
:J:T:o:
:J:U:g:
:j;};
:K:d:
:k:r:
:k:x:
:K:X:|:
:K;o;
:K;X;|;
:L:f:
:l:s:
:L;S;
:L;Y;};
:M;T;
:memory:
:N:U:
:N;c;
:N;o;y;
:O:{:
:O:a:p:
:O:e:t:
:O:l:{:
:o:v:
:P:l:
:P:W:
:R:`:
:R;{;
:R;Y;
:S:^:e:
:S:f:
:S:w:
:S:Z:
:S:Z:a:
:SRD1
:T:[:b:
:t:~:
:T;{;
:T;{; <4<
:Tt3n
:u:|:
:U:o:x:
:V:i:
:V:o:
:V;];
:W:w:N;q;
:W;`;|;
:W;w;
:Y:u:
:Y;f;
:Z;u;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;,;0;4;8;@;D;H;L;T;X;\;`;h;l;p;t;|;
; ;';.;?;i;w;
; ;;;
; ;<;E;
; ;B;
; ;I;\;
; <+<0<I<
; <+<2<9<g<
; <<<0=G=i=
; <><
; <A<
; <L<x<
;!;(;/;B;T;^;i;v;};
;!;(;;;M;W;b;o;v;};
;!;(;A;O;[;f;m;t;
;!;?;^;};
;!;@;b;
;!;\;c;j;
;!;_;f;m;
;!;0;C;R;o;
;!;1;f;t;
;!;3;?;Q;];o;{;
;!;6;G;Q;h;r;
;!;d;s;
;!;R;i;r;~;
;!;t;
;!<]<
;!<{<
;!<|<
;!<<<r<y<
;!<2<
;!<3<C<s<
;!<F<k<
;!<I<
;!<k<
;";);V;];d;k;
;";/;6;=;D;W;u;|;
;";?;O;V;];d;u;
;";0;P;h;
;";2;C;J;Q;X;k;
;";F;i;
;";i;
;";j;
;";R;e;
;";x;
;"<;<T<
;"<o<
;#;(;M;V;[;
;#;*;<;Y;b;i;
;#;,;5;>;G;P;Y;b;k;
;#;_;
;#;=;V;
;#;0;7;>;E;X;v;};
;#;A;H;O;e;
;#;f;
;#;p;
;#;X;k;
;#<=<[<u<
;#<><t<{<
;#<4<X<o<x<
;#<k<x<
;#<R<k<
;$;:;
;$;;;
;$;+;2;E;c;j;q;
;$;+;2;K;a;l;y;
;$;=;S;^;k;r;y;
;$;0;X;
;$;2;@;Q;_;
;$;T;g;
;$<.<=<
;$<;<I<h<
;$<_<
;$<_<|<
;$<`<
;$<|<
;$<+<{<
;$<<<h<
;$<1<U<x<
;$<K<
;$<N<U<\<c<
;%;,;9;
;%;\;
;%;4;d;w;
;%;G;_;p;
;%;I;l;
;%;n;
;%;N;d;};
;%;X;_;
;%<,<y<
;%</<p<
;%<<<F<P<d<s<
;%<1<8<S<x<
;%<8<
;%<J<
;&;-;4;F;c;l;s;
;&;-;4;G;e;l;s;
;&;_;|;
;&;+;D;g;
;&;>;E;L;P;V;Z;a;v;{;
;&;7;e;
;&;N;
;&;p;
;&<-<z<
;&<F<
;(;/;k;v<
;(;`;
;(;{;
;(;>;
;(;6;D;U;f;
;(;A;_;d;};
;(;B;[;
;(;B;\;v;
;(;f;
;(;L;
;(;R;
;(;Y;p;y;
;(<\<n<
;(<|<
;(<5<R<
;(<9<]<t<}<
;(<o<
;);`;
;);`;|;
;);<;e;{;
;);0;_;f;
;);4;D;[;
;);H;a;z;
;);R;h;
;);U;f;
;)<@=x=
;)<2<8<@<F<
;)<6<S<
;)<w<
;*;4;?;L;S;Z;a;t;
;*;a;
;*;I;\;
;*;V;g;
;*<@<
;*<_<
;*<1<k<
;*<r<
;,;;;
;,;;;k;
;,;5;
;,;5;f;};
;,;o;
;,<\<e<
;,<_<
;,<><O<
;,<c<
;,<F<
;,<g<
;,<l<
;,<x<
;,<Y<r<
;.;<;D;_;
;.;5;j;
;.;7;h;
;.;M;`;
;.;V;k;z;
;.<;<_<
;.<5<
;.<b<
;.<G<j<
;/;@;u;
;/;5;
;/;F;T;s;
;/;f;y;
;/;H;a;
;/<L<[<
;/<V<r<
;:;|;
;:;Q;Z;
;:;T;m;
;:<A<
;;;[;e;|;
;;;Q;
;-;_;
;;<~<
;;<B<
;;<g<
;;<S<Z<
;;<T<
;-;>;g;
;';>;U;\;
;';>;Y;v;
;';1;P;
;-;4;r;
;';d;
;-;F;
;';H;a;h;
;';S;
;';U;
;?;F;
;?;h;
;?;R;v;
;?;u;|;
;?;Y;z;
;?<F<
;@;`;g;
;@;V;u;
;@<^<
;@<h<
;@<T<
;@<X<
;@<Y<
;[;b;
;\$PsY
;\;|;
;\;c;
;];u;
;`;{;
;`;m;
;`;y;
;`<y<
;+;[;q;
;+;9;A;\;
;+;I;P;W;m;
;+;J;b;u;
;+;o;
;+;s;
;+;W;j;};
;+<2<
;+<D<Q<
;+<D<R<f<~<
;+<J<a<o<
;+<M<u<
;+<q<y<
;<;_;
;<;e;
;<;J;Q;q;
;<;K;
;<;S;\;
;<;T;e;
;<;Y;
;'<^<
;<<|<
;<<|<,=g=
;<<C<
;<<s<
;<<w<
;'<4<X<{<
;'<A<`<
;-<D<M<Y<
;'<s<
;-<t<
;-<w<
;=;a;
;=;D;
;=<a<}<
;=<a<y<
;=<g<}<
;=<o<
;>;`;
;>;o;
;>;t;{;
;><a<
;><l<
;><m<
;><u<
;><W<z<
;0;7;>;E;j;
;0;G;P;|;
;0;I;
;0<7<
;0<G<s<
;0<h<
;0<I<
;0<u<
;0<X<
;1;~;
;1;P;r;
;1;s;
;1<d<
;1<m<
;1<P<y<
;2;^;
;2;6;<;@;F;J;P;T;b;f;q;{;
;2;B;I;P;W;h;
;2;F;`;y;
;2;H;U;
;2;S;
;2<@<G<g<
;2<C<O<[<
;2<G<Q<p<X=
;2<I<
;2<o<
;3;:;A;W;
;3;@;G;N;`;};
;3;_;p;
;3;M;V;[;
;3;n;
;3;T;
;3;v;
;3;W;g;t;
;3<:<
;3<o<
;4;>;H;q;
;4;j;q;
;4;L;_;i;s;};
;4;M;n;
;4<;<
;4<[<
;4<`<
;4<o<
;5;;;K;g;q;w;
;5;[;r;
;5;[;s;
;5;B;I;P;i;
;5;d;
;5;D;
;5;m;
;5;V;p;
;5<<<
;5<I<
;5<N<]<
;6;?;k;x;
;6;@;Y;
;6;L;k;~;
;6;l;s;
;6;M;V;b;
;6;P;q;
;6<o<
;6<T<
;7;`;
;7;F;
;7;j;
;7;l;
;7;N;W;
;7;X;
;7;Y;i;
;7<><
;7<d<
;7<o<
;8;N;r;
;8;R;k;
;8;T;
;8<?<
;8<E<i<
;8<g<
;9;{;
;9;>;W;
;9;q;
;9<F<j<
;9<o<
;99t6
;99tn
;A t0
;A$r+j
;A$t!
;a;h;
;A;H;O;V;{;
;A;p;
;Aqon
;b;};
;B;J;O;s;~;
;B;M;v;
;b;y;
;B<o<
;B<s<
;B<X<
;B<Y<
;C;\;a;~;
;C;R;
;c;s;z;
;C<h<{<
;c<v<
;D$ s
;D;i;
;D;K;
;D;p;
;d;x;
;D;y;
;D<k<
;D<K<
;D<N<]<
;D<S<
;e;l;
;E<L<
;E<o<
;E<r<
;F;\;
;F;];k;
;F;|;
;F;~;
;f;m;
;F<g<n<u<|<
;F<M<
;f<t<
;FDt.3
;G;e;
;G;h;
;G<a<
;G<h<
;GDtC
;GDte3
;H;c;v;
;H;h;
;I;s;
;j;t;
;J;Y;
;K;];
;k;r;
;K;R;Y;y;
;K;X;|;
;K<r<
;K<X<|<
;L$<w
;L;c;l;x;
;L;U;l;u;
;L;U;y;
;L<<=E=\=e=|=
;L<S<
;L<U<\<u<
;M;U;
;N;q;
;N;U;
;N;z;
;O;|;
;O;a;p;
;O;e;t;
;O;l;{;
;O;s;
;O<s<
;P;[;m;
;P;i;
;P<g<y<
;P<h<
;P<i<
;P<x<
;Q;|;
;Q@t)S
;Q@t;
;Q@t+S
;Q@t4
;Q@t4S
;R;i;
;S$s?
;S;`;{;
;S;f;p;
;t;~;
;T<[<
;T<p<
;tTKU
;U;\;
;u;|;
;U;'<0<L<U<
;U;c;h;
;U;y;
;U<\<
;U<|<
;ukA2
;V;a;y;
;V<j<
;W;$<7<J<X<d<k<
;W;^;e;
;W;w;
;W<^<
;X;_;
;X;m;
;Y;y;
;Y<d<|<
;Z;s;
;Z=d=
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?y?
? ?(?,?0?4?<?@?D?H?P?T?X?\?d?h?l?p?x?|?
? ?)?j?
? ?'?D?T?[?b?i?z?
? ?1?D?
? ?3?
? ?3?\?r?
? ?8?
? ?S?Z?a?h?~?
? ?V?]?
? ?W?\?u?
?!?,?9?@?G?Y?k?u?
?!?;?T?h?
?!?>?t?
?!?4?R?Y?`?v?
?!?c?|?
?!?I?
?!?U?t?{?
?"?)???g?r?y?
?"?;?~?
?"?<?U?~?
?"?2?=?K?
?"?x?
?#?=?V?
?#?1?f?
?#?2?V?q?
?#?M?|?
?#?V?k?r?
?#42s
?$?+?e?|?
?$?>?X?r?
?$?5?Y?
?$?H?k?
?$?k?p?
?$?s?
?$?U?l?u?
?%?<?E?
?%?3?F?p?
?%?B?
?%?C?
?%?D?]?
?%?I?l?
?%?J?
?%?Q?w?
?&?-?o?
?&?@?
?&?<?j?
?&?4?f?q?x?
?&?C?
?&?g?
?&?N?
?(?/?6?=?N?x?
?(?;?D?]?
?(?;?d?z?
?(?{?
?(?5?<?C?J?]?{?
?(?K?
?(?L?o?
?(?p?
?(?Y?p?y?
?)?^?
?)?`?
?)?`?|?
?)?}?
?)?5?L?_?
?)?8?G?V?e?|?
?)?A?Z?
?)?C?d?
?)?H?
?)?I?a?
?)?w?
?*?_?m?t?
?*?H?O?V?l?
?,?:?n?
?,?1?N?
?,?3?q?
?,?b?{?
?,?O?
?.?;?B?I?[?x?
?.???
?.?5?U?o?
?.?O?
?.?O?w?
?.?R?i?r?
?/?5?N?[?
?/?6?=?D?
?/?E?h?
?/?e?l?
?/?F?T?s?
?/?f?y?
?/?H?a?w?
?/?S?b?
?/?X?n?
?/=KzdN
?:?E?R?Y?`?r?
?:?I?y?
?:?M?v?
?:?P?
?:?r?
?:?S?
?;?d?p?w?
?;?J?Y?e?
?;?Q?p?
?'?.?5?<?M?w?
?-?;?N?x?
???c?r?
???U?d?
???Y?
???Y?r?
?'?]?d?
?-?<?K?Z?o?
?'?0?7?P?^?j?u?|?
?'?7?P?f?
?-?J?u?
?'?K?b?k?
?'?l?
?@?\?
?@?X?r?
?[?b?
?[?n?
?\?e?
?\?e?|?
?]?{?
?_?f?
?`?k?p?
?`?w?
?+?:?J?Y?h?
?+?[?n?
?+?[?q?
?+?2?9?@?]?m?t?{?
?+?E?
?+?K?u?|?
?+?s?
?+?T?
?<?[?w?
?<?e?
?<?h?
?<?h?y?
?<?K?
?<?K?{?
?<?N?
?<?N?_?
?<?O?x?
?<?r?y?
?<?U?n?
?<?Y?
?=?D?
?=?e?
?>?E?e?
?>?t?
?>?V?u?
?>?X?y?
?>?Y?
?0?:?B?\?z?
?0?5?N?
?0?C?l?
?0?R?
?1?;?F?S?Z?a?h?{?
?1?G?f?y?
?1?J?
?1?P?r?
?2?@?b?p?
?2?@?I?P?W?g?n?v?
?2?|?
?2?M?i?}?
?3?{?
?3?A?y?
?3?B?
?3?F?p?
?3?K?x?
?4?^?e?l?s?
?4?|?
?4?B?J?e?
?4?E?|?
?5?b?
?5?C?J?j?
?5?D?t?
?5?i?
?5?m?
?5?N?
?5?O?h?
?5?S?|?
?5?V?o?v?
?6?l?s?
?6?U?x?
?6?X?q?
?7?K?}?
?7?O?h?
?7?r?y?
?8?R?k?
?8?R?l?
?8?T?k?
?9?`?s?
?9?{?
?9?e?
?9?f?
?9?O?n?
?9?o?v?
?9?T?
?9?Y?
?A?N?U?\?u?
?A?U?
?A?W?v?
?A?X?o?v?
?A?Z?
?B?f?s?
?b?i?
?B?P?X?s?
?B?v?
?b?x?
?C?]?
?c?j?
?C?R?
?C?s?
?C?S?h?z?
?D?j?
?d?k?
?D?Q?
?D?W?
?E?L?
?E?u?
?E?X?
?F?]?f?r?
?F?p?
?F?Y?
?F?z?
?G?k?
?G?N?
?I?d?r?
?I?m?
?I?u?|?
?I?v?
?J?~?
?j?q?
?J?U?\?
?J?x?
?L?^?o?
?M?f?
?M?u?
?N?_?y?
?N?{?
?n?~?
?N?q?
?N?z?
?O?l?{?
?O?s?
?O?Z?l?
?Q?}?
?R?}?
?S?`?{?
?S?n?
?S?w?
?T?[?
?t?{?
?T?g?w?
?U?\?
?U?`?r?
?U?o?x?
?v?}?
?V?i?
?V?v?
?X?x?
?Y?i?p?w?~?
?Z?p?
@.didat
@.reloc
@_^[]
@6Ot8J_8
@AKlT
@ANALYZE %s;
@ApplicationStatics::TryGetByUserAndApplicationUserModelId
@Checkpoint
@CreateRepository
@Machine
@onecore\base\appmodel\staterepository\winrt\client\srv\dal-repository.cpp
@onecore\base\appmodel\staterepository\winrt\client\srv\servicemain.cpp
@SVWQQ
[ MC(/F/
[%hs(%hs)]
[%hs]
[9\$0t
[9\$8t
[checkstatements] #%u Database %p: Statement %p: %s SQL %s
[DatabaseCache.Add] #%u Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[DatabaseCache.Get(Hit)] #%u DatabaseCache %p: Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[DatabaseCache.Get(Miss)] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[h5{%
[io:xClose] #%u xClose() failed
[post-sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[post-sqlite3_finalize] #%u Database %p: Statement %p: --
[post-sqlite3_prepare] #%u Database %p: Statement -------- --: Try %u (%llums) : SQL %s
[post-sqlite3_prepare] #%u Database %p: Statement %p %s: Try %u (%llums) : SQL %s
[post-sqlite3_reset] #%u Database %p: Statement %p: %s
[post-sqlite3_step] #%u Database %p: Statement %p %s: Tries %u
[pre-DatabaseCache.Get] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[pre-sqlite3_exec] #%u Database %p {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[pre-sqlite3_finalize] #%u Database %p: Statement %p: %s
[pre-sqlite3_prepare] #%u Database %p : SQL %s
[pre-sqlite3_reset] #%u Database %p: Statement %p: %s
[pre-sqlite3_step] #%u Database %p: Statement %p %s
[pre-StatementCache.Get] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[sqlite3_close] #%u Database %p: %s
[sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}%s%s TID:%u %s : SQL %s
[sqlite3_finalize] #%u Database %p: Statement %p: --: %s
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %hs
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums) %s : SQL %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums)%s%s %s : SQL %s
[sqlite3_reset] #%u Database %p: Statement %p: %s: %s
[sqlite3_step] #%u Database %p: Statement %p %s: Try %u (%llums)%s%s %s : SQL %s
[StatementCache.Add(list)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[StatementCache.Add] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Hit)] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Miss)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[vfs:xOpen] #%u sqlite3_malloc() failed
\$ +x`
\$$8D$
\$$h 
\$$h`
\$$h0
\$$h06
\$$h8
\$$h8A
\$$hx
\$(RP
\$,h0|
\$,hH
\$@j,
\$0+x
\$4PSQ
\$lu=j
\$xPQQ
\,((_
\X!HBL}%
\x9`9Hx
]:Y%Hh
]b!xZ
]BH46
]tj)&
^&#;Y
^*@Af=
^}PEkW.
^tajUPDATE %s SET _WorkId=0 WHERE _WorkId%s0 AND _WorkId<>0;
_&b!K
_\AG)
_^[Y]
__CxxFrameHandler3
__dllonexit
_amsg_exit
_callnewh
_Checkpoint
_Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Families
_Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
_except_handler4_common
_ftol2
_H_^[
_IndexKeys
_initterm
_lock
_onexit
_purecall
_stricmp
_ui64tow_s
_unlock
_vsnprintf
_vsnwprintf
_XcptFilter
_Xt^;WxsY
`.data
`0^0\
`9U?3
`YGT1D
{NKlwj_
{O6^u
{te{j*N
{-UPy"
|$$@h
|$$QSRP
|3V7\
|conecore\private\base\inc\appmodel\staterepository\dal/Repository.hpp
|kJxD
}=wMqz
-}4^Sh
~*vGu!#:t
~xif.
+)X_j
+080\0y0
+0T0o0
+0u0G1P1l1u1
+a`}`
+Kb]Y$
+UYQ@
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<0<4<8<<<D<H<L<P<X<\<`<d<l<p<t<x<
< <$<\<
< <*<5<B<I<P<W<j<
< <=<F<M<f<t<
< <=<M<T<[<b<s<
< <s<
< <x<
< =;=
< =\=
< ='=G=a=
< ='=t=
< =7=Y=
< =d=
< =D=`=
< =O=l={=
< xY@
<!<(<
<!<(<><f<q<x<
<!<}<
<!<3<o<
<!<4<q<
<!<B<
<!<g<n<u<
<!=(=
<!=(={=
<!=?=X=
<!=@=
<!=A=w=~=
<!=J=
<!=n=
<!=N=h=
<"<)<0<7<T<d<k<r<y<
<"<)<0<C<a<h<o<
<"<)<6<
<"<)<B<P<\<g<n<u<
<"</<z<
<"<;<
<"<F<
<"<G<f<~<
<"<H<
<"=)=
<"=)=0=P=j=
<"=8=
<"=8=I=\={=
<"=d=o=
<"=N=l=w=
<"=O=s=
<#<*<1<
<#<.<
<#<I<i<{<
<#<m<
<#<T<v<}<
<#<v<
<#=d=
<$<@<}<
<$<C<V<
<$<H<`<y<
<$<l<
<$=:=
<$=[=
<$=_=|=
<$=|=V>d>p>w>
<$=+=
<$=+=w=
<$===t=
<$=7=V=u=
<$=H=d=
<$=l=
<$=P=
<%<,<3<D<n<|<
<%<,<3<E<W<a<l<y<
<%<,<9<
<%<@<
<%<><g<
<%<4<|<
<%<C<
<%<G<
<%<h<
<%<Z<
<%=-=F=
<%=x=
<&<.<H<W<d<p<}<
<&<?<U<`<m<t<{<
<&<+<D<c<j<o<
<&<-<?<Q<[<f<s<z<
<&<><I<a<g<
<&<2<D<P<
<&<D<K<d<u<
<&<g<
<&<j<
<&=.=j=
<&=-=4=T=n=
<&=-=z=
<&=9=
<&=h=
<&=O=s=
<&=p=
<(<1<b<y<
<(<B<c<
<(<f<
<(<L<i<
<(=\=
<(=_=|=
<(=|=
<(=>=]=p=
<(=5=R=
<(=d=
<(=H=
<(=h=
<(=T=
<)<<<e<{<
<)<=<D<
<)<0<7<><Q<o<v<}<
<)<4<A<H<O<V<i<{<
<)<B<[<
<)<B<`<e<~<
<)<C<\<
<)<D<R<`<q<
<)<k<
<)=<=[=t=
<)=G=
<)=k=
<)=N=\=
<***Error***>
<*</<f<n<
<*<1<8<
<*<B<e<
<*<H<
<*<l<~<
<*=_=
<*=7=^=
<*=8=?=h=
<*=9=
<*=a=
<*=Q=p=
<*=Q=u=
<*=y=
<,<;<
<,<?<a<
<,<<<C<J<Q<b<
<,<3<><
<,<5<L<U<
<,<F<
<,<F<_<
<,<F<`<z<
<,<K<^<
<,<K<j<
<,=\=e=
<,=_=
<,=3=
<,=B=
<,=g=
<,=h=
<,=l=
<,=P=
<,=w=
<.<;<B<I<[<x<
<.<7<?<O<X<`<p<y<
<.<8<f<p<
<.<d<}<
<.<d<k<
<.<G<
<.<Q<}<
<.={=
<.=6===]=w=
<.=b=
<.=E=}=
<.=F=Q=X=_=s=z=
<.=O=
</<:<G<N<U<g<y<
</<B<k<
</<E<T<
</<H<{<
</<I<b<
</<L<
</=6=
</=C=
</=E=T=
</=L=[=
</=q=
<:<|<
<:<d<k<r<y<
<:<I<
<:<P<
<:<X<w<
<:=A=
<:=w=
<;<R<[<
<;<R<[<g<
<;<W<m<~<
<;=B=
<;=V=o=
<;=X=
<?<\<n<
<?<c<r<
<?<J<O<
<?<j<y<
<?<Q<`<
<?<T<{<
<?<U<d<
<?=a=h=
<?=c=
<?=c=r=
<?=F=
<?=S=j=
<@<M<T<[<t<
<@=h=
<@=T=
<[<v<
<\<c<
<\<n<
<]<d<k<r<
<]<i<
<]=c=q=w=
<^<e<
<^=~=
<^=s=
<^=w=
<`<~<
<`<g<
<`<k<p<
<`=j=
<+<?<F<
<+<[<n<
<+<_<
<+<><g<}<
<+<4<@<h<
<+<E<a<{<
<+<E<u<
<+=_=
<+=2=
<+=K=
<-<?<M<x<
<'<@<t<
<-<~<
<<<]<
<<<G<N<U<
<<<J<o<
<<<J<Y<m<
<<<K<
<<<K<{<
<<<Q<X<x<
<<<R<
<<<Y<
<<<Y<v<
<<=C=
<<=E=\=e=|=
<<=N=_=
<<=s=
<-<4<a<
<-<6<B<j<
<'<7<D<K<R<Y<i<}<
<-<8<@<L<
<'<I<
<-<J<\<
<'<K<b<k<
<-<P<
<-<Q<h<q<
<'=.=y=
<'=]=d=
<=<}<
<=<W<p<
<==E=
<==w=
<'=H=
<'=J=o=
<-=K=
<'=L=u=
<'=s=
<-=U=
<><\<a<
<><E<
<><t<{<
<>=W=z=
<>>W>b>
<0<[<
<0<}<
<0<=<D<K<]<z<
<0<5<:<?<D<I<N<U<Z<o<t<y<~<
<0<8<F<[<
<0<Y<o<
<0=]=n=
<0=_=
<0=D=
<0=G=i=
<0=l=
<0=L=
<0=u=
<0=X=
<0>=>D>K>]>
<1<?<K<V<]<d<q<
<1<I<}<
<1=;=]=y=
<1=8=
<1=U=q=
<1=z=
<2<\<c<j<q<
<2<`<
<2<9<><Z<}<
<2<L<f<
<2===D=
<2=9=
<2=H=
<2=o=
<2>E>d>p>w>
<3<\<q<
<3<}<
<3<<<m<
<3<A<f<u<
<3<B<
<3<J<S<
<3<M<n<
<3<R<e<
<3=\=f=p=
<4<;<
<4<?<J<Z<p<
<4<S<f<
<4=;=
<4=A=e=
<4=l=u=
<4=M=f=
<5<<<\<v<
<5<<<C<J<o<
<5<B<I<P<i<$===l=3>
<5<p<
<5=_=u=
<5=<=
<5=l=
<5=s=
<5=T=t=
<5=U=
<5=U=_=x=
<5=x=
<6 \(
<6<D<^<l<
<6<M<V<b<
<6<O<
<6<X<q<
<6=o=
<6=R=s=
<7<B<L<
<7<J<s<
<7<V<\<l<|<
<7=|=
<7=h=z=
<7=Q=p=
<8<D<Q<q<y<
<8<f<z<
<8<V<[<t<
<8=@=G=g=
<8=@=G=N=Y=
<8=e=
<8=E=b=
<8=o=
<8=t=
<9\$@t
<9<{<
<9<V<v<
<9=@=
<9=D=b=
<A<a<
<a<l<v<}<
<A<m<
<A<M<t<
<a<n<
<a<r<{<
<A<R<v<
<a=l=
<A=o=
<A=w=
<A=Z=i=
<B<J<O<s<~<
<B<j<v<
<B<M<z<
<b<x<
<B<Y<b<
<B=X=
<c<~<
<c<j<
<c<p<
<C<R<
<C=^=
<C=N=l=
<D<\<
<d<}<
<D<K<
<D<W<g<
<D=|=
<D=T>
<e<r<
<E=e=
<E=L=
<Error 0x%X converting the user's SID to a string>
<Error 0x%X getting the user's SID from the process' token>
<Error 0x%X in GetApplicationUserModelIdFromToken>
<Error 0x%X in GetPackageFullName>
<Error 0x%X in NtQueryInformationProcess>
<Error 0x%X in OpenProcessToken>
<Error 0x%X in QueryFullProcessImageNameW>
<Error 0x%X moving command line>
<Error allocating memory>
<F<M<
<F<z<
<f<z<
<F=M=
<F=Z=
<fatN~
<G<r<
<g=r=
<G=T=
<H<]<v<
<H<a<
<H<T</=I=Q=
<H=|=
<H=O=
<H=U=y=
<h>m>;?k?u?
<I<P<
<I=_=
<J<Y<
<J=T=f=
<K<[<~<
<K<^<
<K<_<
<k<r<
<K<X<|<
<K=@>W>y>
<L<^<o<
<L=x=
<M<b<
<M<T<
<m=&>O>Y>c>
<m=x=
<machine>
<N<q<
<n<u<
<N=g=
<No commandline present>
<no-error-message>
<None>
<null>
<O<e<t<
<O<l<{<
<O<q<
<O<s<
<p<{<
<P<W<
<P=d=
<P=p=
<P=x=
<Q<i<
<q<x<
<R<Y<`<
<S<`<{<
<S<g<
<S<Z<
<SVWj83
<t<{<
<t<~<
<T=^=m=
<T={= >4>
<U<`<r<
<u<|<
<U<n<
<U<o<x<
<u=&>G>Q>[>
<U=j=
<U=w=,>C>f>x>
<unknown>
<Unknown>
<Uq+6
<V<t<{<
<W<q<
<Windows::Internal::StateRepository::Management::RepositoryManagerServer::BlockRequests
<X<E=
<Y<t<
<Y=f=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=4=8=<=@=H=L=P=T=\=`=d=h=p=t=x=|=
= =)=8=|=
= =/=
= =<=E=
= ='=.=?=i=w=
= =Y=
= ><>P?g?
= >7>c>
= >9>p>
= >j>
= >P>^>h>o>y>
= >X>
=!=:=]=v=}=
=!=B=R=|=
=!=F=R=w=
=!=Q=
=!=r=
=!=t=
=!>]>
=!>+>M>i>
=!>6>D>r>
=!>7>V>i>
=!>8>N>d>
=!>n>
="=)=?=r=y=
="=)=0=A=k=y=
="=;=B=b=|=
="=B=\=u=
="=V=]=
="=v=}=
="=x=
=">)>0>P>j>
=">F>^>w>
=#=9=l=s=z=
=#=T=k=t=
=#>*>l>s>
=#>0>7>>>W>m>x>
=#>2>
=#>4>
=#>9>X>k>
=#>l?
=#>m>
=$=(=u=
=$=;=g=
=$=+=2=`=
=$=+=2=E=c=j=q=
=$=4=V=f=
=$=C=
=$=M=c=
=$=p=
=$=Q={=
=$=R=|=
=$=Z=s=
=$>+>{>
=$>I>]>o>
=$>L>g>
=$>P>
=$>Z>a>
=%=,=L=f=
=%=?=|=
=%=<=E=
=%===
=%=4=
=%=4=|=
=%=8=a=w=
=%=H=~=
=%=I=l=
=%=m=
=%=o=
=%=O=]=e=
=%=V=m=v=
=%=Y=
=%>,>
=%>,>|>
=%>,>y>
=%>/>_>
=%>?>H>W>
=%>2>f>
=%>b>j>o>
=&=.===\=
=&=:=Y=f=u=
=&=2=Z=
=&=C=
=&=C=L=S=l=z=
=&>.>B>
=&>:>r>
=&>_>|>
=&><>R>
=&>=>F>w>
=&>->
=&>0>
=&>b>
=&>F>M>m>
=&>Z>
=(=[=
=(=>=S=e=z=
=(=6=U=
=(=6=U=c=v=
=(=c=j=q=
=(=F=
=(=f=
=(=L=i=
=(>/>
=(>@>S>Z>
=(>\>n>
=(>]>
=(>J>
=)=@=N=m=
=)===T=
=)=3=T=v=
=)=9=c=}=
=)=i=
=)=K=r=
=)=R=\=f=
=)>|>
=)>6>Z>}>
=)>M>Y>
=)>U>
=*=/=f=n=
=*=0=
=*=3=h=
=*=5=<=C=P=
=*=5=M=X=p={=
=*=A=Q=k=
=*=C=
=*=e=r=y=
=*=H=
=*>^>
=*>9>i>|>
=*>a>w>
=*>B>U>p>
=*>C>\>
=*>E>
=*>W>q>
=,=:=Y=
=,=1=N=
=,=5=
=,=6=A=N=U=\=c=v=
=,=g=u=
=,=h=
=,=i=
=,=N=t=
=,=P=g=p=
=,=R=e=
=,=U=
=,>_>u>
=,>|>
=,>3>
=,>5>
=,>c>
=,>l>
=.=G=
=.=i=p=w=
=.=V=k=r=
=.>l>u>
=.>m>x>
=/=4=
=/=6=V=p=
=/=8=D=u=
=/=8=G=
=/=F=]=
=/=f=y=
=/=G=Z=r=
=/>\?u?
=/>6>
=/>B>f>
=/>E>T>
=/>S>b>
=:=]=
=:=A=H=O=e=
=:=i=
=:=P=c=u=
=:=p=w=
=;=o=
=;=Q=d=
=;=Q=t=
=;>B>f>m>
=?=\=k=
=?=c=r=
=?=e=
=?=U=d=
=?>J>Q>
=?>U>
=@=^=x=
=@=G=
=@>J>
=@>T>
=@>X>
=@>Y>
=[=b=i=}=
=[=h=
=]={=
=]=d=
=^>w>
=_=f=
=_=j=q=
=_>|>
=_>f>
=_>r>
=`=w=
=`=y=
=`>g>
={NFb
=+=\=s=|=
=+={=
=+=C=Q=V=j=u=}=
=+=D=K=k=
=+=I=P=W=k=|=\>g>
=+>6>H>~>
=+>D>
=+>w>
=+>W>x>
=<=K=
=<=R=i=r=}=
=<=V=o=
=<=Y=y=
=<>|>
=<>C>
=<>C>p>
=<>E>
=<>E>\>e>|>
=<>E>l>Z?d?v?
=<>I>
=-=;=a=o=~=
===D=K=a=
===N=r=
=-=>=
==>D>
==>w>
='=1=<=Q=h=u=
='=A=Z=x=}=
='=B=]=x=
='=d=
=-=E=
='=F=r=
=-=H=S=j=y=
='=K=n=
=-=L=_=
='=M=X=
='=U=c=
='>.>
='>_>
=>=E=
=->4>
='>5>=>X>
=->F>
='>g>
=0=:=E=R=Y=`=g=z=
=0=J=d=~=
=0>H>O>
=0>I>
=0>K>
=0>L>g>
=0>u>
=1=@=w=|=
=1=]=n=
=1=P=c=
=1>>>
=1>B>
=1>J>Y>
=1>m>
=2=;=G=o=
=2===D=K=y=
=2=9=Y=s=
=2=h=o=
=2=I=R=^=
=2>@>c>q>
=2>_>u>
=2>9>
=2>I>
=2>o>
=3=B=
=3=L=
=3=M=g=
=3=O=x=
=3=Y=
=3>{>
=3>j>
=3>o>
=4=a=
=4=A=H=O=a=~=
=4=N=
=4=X=o=x=
=4>$?
=4>[>
=4>`>
=4>|>
=4><>C>c>}>
=4>A>e>
=4>D?
=4>o>
=4>X>t>
=5=@=M=T=[=m=
=5=~=
=5=<=~=
=5=>=o=
=5=D=
=5=d=
=5=i=
=5=k=r=
=5>\>n>
=5><>
=5>o>
=5>U>
=5>Z>
=6=M=]=w=
=6=P=j=
=6>c>v>
=6>q>
=7=A=K=t=
=7=j=x=
=7=W=
=7=Y=
=7>=>P>a>
=7>>>
=7>J>|>
=7>l>
=7>w>
=8=d=u=
=8=F=U=i=
=8=n=u=
=8=W=v=
=8>C>a>
=8>E>b>
=8>e>z>
=8>l>~>
=8>Q>i>
=9=>=W=
=9=e=v=
=9=o=v=
=9=R=
=9>s>
=A=^=
=a=n=
=A=X=a=m=
=B=g=
=B=I=N=j=
=B=l>
=b=s=|=
=b=x=
=B>o>
=c=~=
=c=j=
=C=Z=q=x=
=C>W>
=d=k=
=D=p=
=d=q=
=d=t>
=e=7>@>\>e>
=e=l=
=E>L>
=E>Q>d>
=F=i=
=f=m=
=F=S=i=
=F=U=b=~=
=F>M>
=f>t>
=G=]=
=g=n=
=g=q=
=g=t=
=G>l>
=g>p>
=H=^=
=H=h=
=H>O>
=H>U>r>
=I=g=
=i=p=
=I>T>r>
=i>v>
=J=a=j=v=
=L=^=o=
=L=f=
=L>S>
=N=i=
=n=u=
=N>q>
=N>U>
=O=f=o=
=o=J>
=O=l={=
=O=s=
=O=V=]=}=
=O=w=
=O=z=
=O>j>
=P=}=
=P=b=
=P=l=
=P=X=
=P>x>
=Q=|=
=Q=u=
=Q>z>
=r=y=
=R>r>
=R>Y>
=s=!>
=S=f=
=S=f=p=z=
=S=Z=
=T=[=
=T=_=f=
=T=v=
=U=\=
=U=]=
=u=|=
=u=p>
=U>\>
=v=}=
=V=z=
=Vh@l
=Vh|l
=VhLG
=VhxG
=W>^>
=X>e>
=Y>f>
=yq&X
> ?~?
> ?+?0?I?
> ?5?W?e?}?
> ?8?
> ?9?p?
> >$>(>,>0>4>8><>@>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>V>
> >,>7>>>E>R>
> >:>T>n>
> >@>Z>
> >+>L>
> >3>J>_>i>
> >7>c>|>
> >8>S>z>
> >C>o>
> >W>\>u>
>!?(?
>!?/?>?R?l?}?
>!?|?
>!?4?V?
>!?A?z?
>!?H?
>!?k?
>!?r?
>!>(>A>O>[>f>m>t>
>!>(>H>b>
>!>.>3>D>f>
>!>:>A>a>{>
>!>0>U>o>
>!>C>N>b>o>
>!>o>
>!>y>
>",-9
>"?)?|?
>"?@?S?t?
>"?@?S?w?
>">(>w>
>">)>0>C>U>_>j>w>~>
>">/>4>E>d>}>
>">]>
>">3>:>T>h>
>">4>L>
>">F>
>">j>
>">u>
>#?*?
>#?.?9?f?x?
>#?;?T?
>#?_?
>#?2?
>#?4?=?~?
>#?k?x?
>#?L?
>#?O?
>#?o?
>#?q?~?
>#?X?x?
>#>*>1>8>K>]>g>r>
>#>@>_>
>#>5>N>
>#>B>a>
>#>C>l>
>#>i>p>w>
>#>S>m>
>$?/?A?X?c?p?w?~?
>$?[?
>$?_?|?
>$?7?t?
>$?D?
>$?P?
>$>(>,>0>8><>@>D>L>P>T>X>`>d>h>l>t>x>|>
>$>,>G>
>$>:>E>R>Y>`>r>
>$>@>r>
>$>]>z>
>$>=>
>$>=>L>Y>n>}>
>$>0>X>
>$>l>
>$>M>c>
>%?2?9?@?R?o?x?
>%?4?<?A?R?e?
>%?6?Z?q?z?
>%?l?
>%?O?l?{?
>%>1>
>%>4>{>
>%>4>d>n>s>
>%>B>
>%>C>J>Q>g>
>%>C>l>
>%>D>p>
>%>I>
>&?:?x?
>&?_?
>&?2?K?
>&?9?
>&>>>W>
>&>8>B>M>Z>a>h>o>
>&>F>_>
>&>I>
>&>n>
>&>O>e>
>(?/?|?
>(?/?6?V?p?
>(?>?a?
>(?h?
>(?H?
>(?h?
>(?O?
>(?V?
>(>6>D>X>c>r>
>(>c>
>(>c>j>q>
>(>H>
>)?|?
>)?n?
>)?S?^?u?
>)>;>M>~>
>)>^>
>)>_>f>
>)>`>|>
>)>4>?>H>
>)>A>_>~>
>)>G>
>)>H>
>)>Q>
>*?1?|?
>*?1?8?V?n?
>*?5?<?}?
>*?9?
>*?e?{?
>*>/>f>n>
>*>`>g>
>*>=>N>v>
>*>1>W>
>*>8>G>a>
>*>c>
>*>j>q>x>
>*>O>
>*>P>j>
>,?`?
>,?3?:?A?o?
>,?5?
>,?5?Y?
>,?m?
>,?x?
>,>;>
>,>3>:>K>
>,>5>L>U>
>.?5?
>.?G?j?
>.?l?u?
>.>>>E>P>_>g>
>.>A>j>
>.>d>k>
>.>D>O>\>c>j>|>
>.>H>
>.>i>
>.>W>m>
>.>X>_>f>m>
>/?\?o?
>/?6?
>/?a?p?
>/?E?
>/?E?T?
>/?L?[?
>/?S?b?
>/?w?
>/>6>
>/>8>G>
>/>C>
>/>f>y>
>/>k>
>/>N>a>
>:?^?z?
>:?G?N?U?n?
>:>\>s>
>:>A>
>;?g?
>;?o?
>;>B>
>;>N>
>;>P>_>p>{>
>'?.?5?U?o?
>'?.?y?
>??d?
>??L?
>??o?
>??o?z?
>'?_?
>'?}?
>?>\>k>
>?>c>r>
>?>I>
>?>j>y>
>?>K>d>
>?>U>d>
>'?g?
>-?g?
>'?H?
>'?l?
>'?m?
>-?o?
>'?W?m?
>@?G?
>@?W?
>@?X?
>@>[>s>
>@>G>
>@>P>
>@>W>
>@>x>
>[>h>
>\>d>
>\>e>|>
>]?d?
>]>{>
>]>c>u>{>
>^?i?
>^?s?
>`>g>
>`>o>
>`>x>
>`>y>
>}:7U
>+?2?
>+?l?
>+?p?
>+?w?
>+?W?x?
>+>4>@>q>
>+>b>
>+>K>u>|>
>+>p>
><?|?
><?I?m?
><?N?_?
><?o?
><?O?
><?s?
><>E>\>e>|>
><>K>
><>N>_>
><>S>\>h>
>=o@Vu
>>?a?
>->`>
>->=>F>M>i>w>
>>>E>L>S>p>
>>>Q>z>
>>>r>
>>>X>q>
>'>1>A>Q>W>b>h>t>
>->6>w>
>->7>G>X>
>'>7>P>f>
>->C>g>~>
>->F>z>
>'>I>P>X>
>'>t>
>0?G?
>0?K?
>0?L?
>0>7>>>E>j>
>0>J>
>0>R>e>t>
>0d0|0
>0K0o0
>1.=uL
>1?\?j?
>1?O?f?
>1?U?m?
>1>:>f>s>z>
>1>@>w>|>
>1>=>T>u>
>2?:???c?n?s?
>2?@?x?
>2?H?
>2?t?
>2?U?\?}?
>2>E>n>
>2>I>R>
>2>k>
>2>t>
>2>u>
>3?:?
>3?|?
>3?}?
>3?q?
>3>8>R>u>z>
>3B>PackageExtensionStatics::ExistsByUserAndCategory
>4?;?
>4?`?
>4?A?e?
>4?F?{?
>4>;>[>
>4>`>
>4>=>I>q>
>4>K>T>`>
>4>m>
>4>M>n>
>4>N>h>
>4>P>_>
>4>S>
>5?w?
>5?z?
>5>\>
>5>D>
>6?j?
>6?k?
>6?L?b?
>6?o?
>6?T?
>6>=>D>K>p>
>6>l>
>6>N>]>}>
>6>R>n>
>7?>?
>7?w?
>7>[>n>
>7>C>V>`>~>
>7>J>n>
>7>l>
>7>m>t>
>7>Z>
>7>Z>}>
>8?e?
>8>O>]>|>
>8>Q>o>t>
>8>R>k>
>9?Q?g?
>9?V?h?y?
>9?Y?
>9\$0t
>9>\>
>9>K>_>v>
>9>o>v>
>B?I?
>B>M>T>[>
>B>S>|>
>C?^?
>C?c?
>c?x?
>C?x?
>C>N>S>l>
>C>Z>
>D?{?
>D>[>~>
>d>k>
>D>p>
>D>Q>u>
>E?]?w?
>E?~?
>E?L?
>E?P?]?d?k?}?
>E>_>h>w>
>F>\>{>
>f>s>
>G?`?
>G?N?
>G>^>g>s>
>G>N>U>\>r>
>H?d?{?
>H>Q>
>h>u>
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>I?v?
>i>4?
>I>i>w>
>I>r>
>J>[>d>
>J>c>
>j>q>
>K?R?
>K?w?
>k>`?w?
>K>a>
>K>f>|>
>k>r>
>L>c>l>
>L>m>
>l>s>
>L>U>l>u>
>N>^>e>l>s>
>N>g>
>N>l>s>
>N>q>
>NGdx
>O?u?
>O>{>
>O>e>
>O>e>t>
>O>e>w>
>O>l>{>
>O>p>
>O>s>
>P?p?
>P>W>
>Ph4X
>Q>X>_>
>R?l?
>R?Y?
>R>h>
>S>]>
>T>[>
>t>{>
>t>~>
>T>a>
>T>d?
>U>Z>
>V?n?}?
>V>]>
>V>i>
>W>r>
>X>_>
>Y?`?
>Y?y?
>Y>}>
>Z>a>
>Z>a>h>
>Z>i>{>
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,00080<0@0H0L0P0T0X0\0d0h0l0p0t0x0|0
0 0$0,0004080@0D0H0L0T0X0\0`0h0l0p0t0|0
0 0@0Z0s0
0 0>0
0 0'0.050F0p0~0
0 0'080b0p0x0
0 0'0h0
0 0b0{0
0 1+101I1
0 1>1
0 1'1
0 141
0 171
0 171@1l1y1
0 181
0 1c1
0 1j1y1
0 1L1x1
0 1V1
0!0(0H0b0{0
0!0+050^0q0
0!0<0l0
0!030=0H0U0\0c0j0}0
0!0C0w0
0!0K0Y0a0|0
0!1)1e1
0!1|1
0!131
0!1Q1g1
0!1W1^1
0"0(0/060\0h0s0
0"0)000I0_0j0w0~0
0"0@0L0j0v0
0"0<0V0p0
0"000A0O0
0"040R0m0|0
0"090S0
0"0B0\0u0
0"0F0i0
0"181
0"191
0"1B1
0#0*01080K0e0p0w0~0
0#0*010A0P0\0
0#0*0O0f0t0
0#0/0W0
0#0;0H0h0p0}0
0#0<0R0]0j0q0x0
0#0B0a0
0#0V0k0r0
0#0Y0`0
0#1<1K1
0#1=1t1
0#1>1t1{1
0#121z1
0#1E1z1
0#1R1k1
0#1X1x1
0#3c3
0$0;0_0k0
0$0+0d0
0$0=0D0d0~0
0$0b091
0$0M0c0
0$1\1e1
0$1^1e1
0$1_1|1
0$1+1
0$1+1{1
0$111U1x1
0$1Y1t1
0%040
0%040d0w0
0%0k0r0y0
0%1=1d1
0&0a0s0
0&0D0k0
0&0p0
0&0P0
0&0U0}0
0&0W0n0w0
0&1?1M1}1
0&1_1|1
0&1=1_1y1
0&1n1
0&1Z1
0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0(0/060H0Z0d0o0|0
0(0@0v0
0(01080Q0_0k0v0}0
0(030:0A0
0(0B0\0v0
0(0C0d0~0
0(0G0y0
0(0Y0p0y0
0(1@1S1
0(1_1
0(1_1|1
0(121D1
0(141
0(1d1
0(1h1
0(1j1u1
0(1w1
0(3y3
0)0:0j0x0
0)0?0
0)0_0f0
0)030=0f0y0
0)0B0
0)0F0_0
0)1@1I1k1
0*0`0g0
0*0~0
0*0<0
0*030d0{0
0*0D0e0
0*0H0O0V0l0
0*0I0~0
0*0K0j0{0
0,0;0
0,0;0k0
0,0_0|0
0,010N0
0,050
0,050L0U0
0,060A0N0U0\0c0v0
0,0F0c0|0
0,0O0
0,1]1q1
0,1|1
0,141p1
0,161H1
0,191]1
0,1c1
0,1F1M1z1
0,1l1
0,1l1,2l2
0,1Q1
0,1Q1i1
0.0M0
0.0O0h0o0
'0.0y0
0.1j1
0.1Q1
0/0f0y0
0/1:1?1
0/1:1?1v1~1
0/1\1v1
0/1A1P1
0/1E1T1
0/1L1[1
0/1S1b1
0:0]0
0:0D0_0
0:0G0N0a0x0
0:0K0o0
0:0Q0Z0
0:1A1
0;0e0
0;0L0W0c0
0;0T0}0
0;0Y0w0
0;1B1
0;1o1
0?0\0k0
-0?0]0p0
0?0`0r0
0?0c0r0
0?0F0
0?0J0O0
0?0R0m0{0
0?0R0v0
0?0U0d0
0?0V0_0k0
0@0c0
0@0i0
0@0v0}0
0@1^1
0@132J3}3
0@1G1
0@1Q1k1|1
0[1p1
0[1P2g2
0\0u0
0^I9!
0_0]1
0_1l1s1z1
0`0~0
0`0t0
0`1P2g2
0`1w1
0~0,1
0+0;0B0I0P0a0
0+0^0e0
0+02090K0h0q0x0
0+02090R0h0s0
0+050@0M0T0[0b0u0
0+0J0
0+0K0
0+0O0r0
0+0Y0j0
0+121
0+181\1
0+181\1y1
0+1A1`1
0+1D1S1
0+1u1G2P2l2u2
0<0C0
0<0D0]0
0<0f0m0t0{0
0<0K0
0<0K0{0
0<0M0~0
0<0R0v0
0<1|1
0<1<2
0<1C1
0<1E1\1e1|1
0<1E1i1
0<1s1
0=0Q0W0
0=0s0z0
0=0U0g0y0
0=1[1
0>0M0}0
0>1a1
0>1E1
0>1Q1k1
0-0=0F0M0i0w0
00060?0S0f0
00070
'000L0U0
000m0u0|0
000R0
001_1
001G1
001I1
0'030[0
0'080h0o0v0}0
0'080Z0b0i0p0{0
0'0A0b0{0
0'0A0z0
00D0x0
0'0F0Y0
0-0G0p0
0'0I0
0-0J0S0Z0s0
0'0R0k0
0-0S0a0p0
0'1.1
0'1.1y1
0-1_1
010:0k0
010~0
01080
01080?0U0
010K0
010L0
010T0
011\1j1
01181
011i1
0123456789abcdefghjkmnpqrstvwxyz
0'141X1{1
0'1H1
0-1K1
0'1L1^1o1
0-1L1v1
0-1U1
0'2]2l2
020[0q0
020^0
020i0
020m0
020N0e0|0
020q0
02191
021I1
021z1
030?0F0N0o0
030B0
030i0p0
030M0
030p0|0
030V0l0
040904B0
040c0}0
040d0
040N0
041;1
041;1[1u1
041>1M1
041d1y1
041o1
050B0I0P0i0
050D0t0
050L0U0
050s0
051<1
060@0J0q0
060l0s0
060O0
060O0T0
061=1
061I1
061x1
061Z1v1
070$1_1
070>0^0x0
070>0F0d0
070a0
070A0P0
070D0K0R0d0
070r0y0
071>1
071g1z1
071Q1p1
071U1~1
071w1
071W1d1k1r1
080m0
080M0e0~0
080n0u0
080R0
080v0
080X0
081E1i1
081K1
081N1
081z1
09042T2[2
090V0h0y0
0b0p0
0b0y0
0b0z0
0B1o1
0c0 1d1l1
0c0j0
0C0m0t0{0
0C0Y0}0
0C0Z0h0
0C1J1
0C1p1
0d0k0
0D0K0
0d0k0r0
0D0p0
0D0W0
0D1K1R1r1
0e071@1\1e1
0e0l0
0E0P0W0^0
0E0r0
0E1L1
0f0m0
0F0Y0
0F0z0
0G0|0
0G0b0|0
0g0n0
0G0t0
0G2U2C5N5`5
0H0[0
0H0c0z0
0H0h0
0H0O0
0H0O0V0]0
0H1O1
0I0\0
0I0g0
0I1_1u1
0I1i1
0I1i1y1
0J0`0
0j0q0
0J0Q0X0x0
0j0w0
0J1Q1
'0K0c0|0
0K0P0
0k0r0
0K0y0
0K1R1
0K1X1|1
0L0W0i0
0L0W0u0
0L1S1p1
0L1S1w1~1
0l1w1
0M0k0
0m0t0
0M0T0
0M0u0|0
0M1n1x1
0M1v1
0N0\0
0N1c1
0N1U1
0O0l0{0
0O0s0
0O0Z0_0
0O1e1
0P0]0d0k0
0P1x1
0Q0Y0`0
0Qh\[
0R0h0
0R0i0
0R0r0
0R0Y0`0
0rH%@
0s0q1
0S1f1p1
0T1\1
0T1{1 242
0T1Y1o1
0U0\0
0U0_0n0
0u0|0
0U0'101L1U1
0U0b0
0U0u0}0
0V0i0
0V1q1
0W0{0
0w0~0
0w0p1
0W0q0
0W0r0
0W1`1|1
0WShP
0X1e1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1D1l1
1 1,181D1H1L1P1T1X1\1`1d1h1l1p1t1x1
1 1:1E1R1b1o1v1}1
1 1>1J1
1 1'1G1a1z1
1 141|1
1 191Z1t1
1 2+22292g2
1 2'2
1 232\2r2
1 242
1 272V2i2
1 282Z2
1 292@2`2z2
1 292u2
1 2e2
1 2m2
1!1(1/1B1`1g1n1
1!1(1H1b1{1
1!1@1
1!1@1b1
1!1@1S1|1
1!1<1
1!141|1
1!191h1o1w1
1!1p1
1!2(2
1!2/262V2
1!2/272R2
1!2L2Z2
1!2M2
1"1]1
1"111
1"111@1S1c1u1
1"1c1
1"1F1
1"1j1
1"1K1a1
1"2<2
1"252j2
1"282
1"2O2e2t2
1"2P2W2o2
1#1[1
1#1^1k1r1y1
1#1<1J1V1a1h1o1|1
1#10171>1E1X1v1}1
1#121a1y1
1#1G1^1g1
1#2*2
1#2>2O2H3
1#2>2t2{2
1#222z2
1#2E2T2a2x2
1#2k2x2
1#2u2
1$1,1G1
1$1.191F1M1T1[1n1
1$1@1_1d1}1
1$1+1s1}1
1$161H1o1
1$191c1
1$1d1m1|1
1$1T1g1
1$2.2=2
1$2+2{2
1$2-2<2
1$2K2
1%1,131P1`1g1n1u1
1%1,151M1s1
1%1,1B1u1|1
1%1<1E1\1e1
1%111Y1
1%141|1
1%141l1
1%171V1p1
1%1Z1
1%2,2
1%2,2|2
1%2X2z2
1&1`1
1&1+141?1N1W1`1j1
1&1-1F1T1`1k1r1y1
1&1-1M1g1
1&131:1A1S1q1x1
1&191b1x1
1&1F1`1y1
1&1O1
1&1s1
1&1W1n1w1
1&1Y1
1&2\2c2
1&2-2
1&2f2p2
1(0&0
1(1/1u1
1(1;1d1z1
1(1?1H1t1
1(1[1
1(111=1n1
1(171
1(1A1_1d1}1
1(1f1
1(2/2
1(272
1(292]2
1(2m2
1(2n2
1(2T2
1)1=1O1f1
1)151>1s1
1)1C1d1
1)1d1
1)1H1[1
1)1k1
1)1M1
1)2q2
1)2t2
1)2U2
1*1;1[1b1i1p1{1
1*121M1
1*191B1K1`1u1
1*1l1~1
1*23282S2m2v2{2
1*2g2
1*2Q2u2
1,0*0
1,1:1_1
1,1;1
1,1;1k1~1
1,151
1,151L1U1
1,1D1P1Z1v1
1,1F1`1z1
1,1I1]1
1,2|2
1,232
1,2c2|2
1,2F2M2
1,2h2
1,2U2
1.1@1J1U1b1i1p1w1
1.1G1[1
1.1H1a1
1.1L1Q1j1
1.252
1.2G2j2
1.2I2
1.2Q2
1/181G1
1/1E1g1
1/1e1l1
1/1N1z1
1/1P1i1p1
1/1S1b1
1/2:2?2v2~2
1/262
1/2d2n2}2
1/2e2:3d3i3
1/2E2T2
1/2L2[2
1/2S2b2
1/2Z2i2
1:1@1P1g1m1
1:1C1H1c1
1:1I1
1:1J1Q1X1_1p1
1:1P1
1:1P1o1
1:2A2
1:2N2
1:2x2
1;1F1K1d1
1;1I1P1p1
1;1R1[1
1;1T1}1
1;2{2
1;2R2p2
1?1\1k1
1?1]1w1
1?1F1
1?1h1
1?1i1
1?1k1|1
1?1M1p1~1
1?1u1|1
1?1U1d1
1?1w1
1?2F2
1?2L2
1?2L2p2
1?2o2
1?2o2z2
1?2U2d2
1@1V1]1e1s1y1
1@2f2
1@2h2
1@2M2q2
1@2X2
1[1h1
1[ywj
1\1c1j1
1\1n1
1\2}2
1\2g2
1]1e1
1]2d2
1_1i1
1`1g1n1
1`1k1p1
1`1m1
1`1x1
1`2w2
1+1>1c1
1+1C1\1
1+1D1d1}1
1+1N1
1+1T1j1
1+2<2E2
1+20262H2N2
1+282\2
1+2D2
1+2K2
1+2w2
1<1_1
1<1~1
1<1H1f1r1
1<1I1P1W1p1
1<1K1
1<1K1{1
1<1N1_1
1<1O1x1
1<2]2d2k2r2
1<2E2
1<2N2_2
1<2w2
1=1j1
1=2D2
1=2n2
1=2o2
1=2s2z2
1=2X2
1>1[1b1
1>1I1P1W1
1>1L1T1o1
1>1o1
1>1V1o1
1>2#3=3
10.0.19041.2193
10.0.19041.2193 (WinBuild.160101.0800)
101C1l1
101f1m1
101G1W1q1
101h1
101k1
10272
10272>2^2x2
102L2
102S2l2
102X2
10R0Y0`0g0
1'1.151<1O1m1t1{1
1'1.151G1Y1c1n1{1
1'1:1M1\1j1q1~1
1'1>1L1k1
111{1
111019184142Z
1'111<1I1P1W1^1q1
111B1f1}1
111C1X1p1
111h1
111n1v1}1
112@2J2
112\2j2
112D2N2]2
112m2
1-161;1
1-161=1V1d1p1{1
1'1A1Z1
1'1b1
1-1c1j1
1-1C1j1
1-1P1
1'2.2y2
1-2:2^2
12?os
121>1E1l1
1'212C2
121H1g1z1
121K1R1r1
121K1Y1h1
121P1y1
122g2
1-242
1-242;2[2u2
1'252J2|2
1'2g2
1'2H2
1'2p2
1'2s2
1-2w2
131B1r1
131b1z1
131I1T1a1h1o1
131M1V1[1
132:2
132:2?2
132{2
141?1L1S1Z1l1~1
141B1Q1e1
141C1~1
141j1
141K1T1`1
141q1y1
142;2
142`2
142o2
151^1e1m1
151<1C1J1o1
151C1O1Z1a1h1u1
151D1
151N1|1
151r1
152\2n2
152B2
152K2Y2
152v2
161Q1k1
162J2
171U1Z1s1
171Z1
172I2
181?1F1M1~1
181K1
181l1
181P1i1
181Q1j1
18263
182o2
182t2
182v2
191{1
191I1P1W1^1o1
191V1h1y1
192@2
192o2
1A1H1
1A1l1z1
1A1o1
1A2}2
1A2Z2
1ApplicationExtensionStatics::FindByApplicationAndCategory
1B1[1
1B1I1P1p1
1B1J1O1s1~1
1B2b2r2
1B2U2t2
1B2X2
1B2Y2
1C1]1
1c1k1r1
1C1Q1Y1t1
1C1V1
1d1k1
1D2{2
1D2K2
1E1L1
1e1l1
1E1P1W1^1
1E1Y1a1i1q1y1
1E2L2
1e2l2
1E2l2~2
1E2W2w2
1F1]1f1
1F2\2r2
1F2M2
1G1l1
1G1N1s1z1
1g2p2
1h;BZ
1H1a1z1
1H1v1
1H2|2
1I1]1
1I1O1h1q1x1
1i1p1
1I1P1W1r1
1i1v1
1i2s2
1i2v2
1J1_1f1
1J1c1r1
1J1P1n1
1j1q1
1J1Q1
1K1]1m1
1K1g1
1k1H2S2Z2
1k1r1
1k1x1
1K2R2
1l1@2K2i2
1l1s1
1L2p2
1L2S2
1M1T1
1M1u1
1M1Z1~1
1N2[2
1N2g2
1N2w2
1o1/2
1O1\1
1O1^1t1z1
1O1e1t1
1O1l1{1
1o2#3D3N3X3
1O2\2
1p1}1
1P1~1
1P1i1
1p1w1
1P2X2\2d2h2p2t2|2
1Q1^1
1Q2{2
1R1g1v1
1R1i1
1R1Y1y1
1S1Z1
1T1d2
1T2[2
1T2^2m2
1T2{2 343
1U1`1r1
1u1|1
1U2\2
1U2t2
1v1}1
1V1z1
1V2]2
1W1^1
1W1{1
1Y1d1v1
1Y1r1
1Y2`2
1Y2f2
1Z2m2
2 2$2(2,2024282<2@2D2H2L2P2T2\2d2h2l2p2t2x2|2
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$202
2 2}2
2 2+22292F2
2 222O2X2_2x2
2 2-242;2B2U2s2z2
2 2D2g2
2 2f2m2t2
2 2H2
2 3'3
2 343
2 373c3
2 383
2 393p3
2 3J3
2 3Q3z3
2 3X3
2!2(2.2I2S2
2!2/2;2B2
2!2:2i2
2!2@2b2
2!2=2T2k2
2!2>2^2
2!202k2x2
2!212A2Q2a2q2
2!242q2
2!2U2v2
2!3.3^3
2!3.3R3u3
2!3<3r3y3
2!373E3
2!3k3
2!3N3}3
2!3r3
2"2)2<2N2X2c2p2w2~2
2"2)202^2
2"2,272D2K2R2Y2l2~2
2"2^2
2"2^2~2
2"2<2f2
2"212@2O2^2m2}2
2"2u2
2"2y2
2"3)3
2"3+4h4
2"383
2"393
2"3D3\3u3
2"3H3i3
2"3o3
2#2E2N2W2]2b2g2n2v2
2#2J2
2#2Q2{2
2#303K3
2#323
2#3-353O3m3
2#3A3R3p3w3
2#3P3
2#3Z3p3
2$2/2<2C2J2Q2d2v2
2$2[2`2y2
2$2_2l2s2z2
2$2+2A2t2{2
2$2=2`2y2
2$2=2r2
2$2-2^2u2~2
2$2B2I2P2f2
2$2g2
2$3 474Y4
2$3[3
2$3+3{3
2$353Y3p3y3
2%2,2n2v2*3Y3
2%2^2
2%2<2E2\2e2
2%242|2
2%242d2w2
2%2B2
2%2N2d2
2%2o2
2%2W2a2h2
2%2Y2s2
2%3,3y3
2%3G3
2%3L3^3o3
2%3t3y3
2&2@2a2z2
2&272b3
2&292W2^2e2{2
2&2C2O2c2v2
2&2F2`2
2&2p2
2&2P2h2
2&3<3`3w3
2&3-343;3B3I3
2&373`3
2&3g3
2&3z344?4^4~4
2&3Z3c3h3
2(2&3_3i3
2(2;2Z2
2(222{2
2(242e2|2
2(2B2[2
2(2L2o2
2(2y2
2(3@3e3
2(3_3
2(3>3]3p3
2(3h3
2(3l3
2(3V3
2)2`2|2
2)2a2s2
2)2B2Z2r2
2)3<3q3
2)363Z3}3
2)3f3
2)3I3W3e3v3
2*2:2d2}2
2*2I2\2
2*2N2X2l2|2
2*2R2]2d2k2
2*3}3
2*3Q3u3
2*3y3
2,2;2
2,2;2k2~2
2,252
2,252L2U2
2,252v2
2,262A2N2U2\2c2v2
2,3;3
2,333
2,353L3U3l3u3
2,3a3i3
2,3c3
2,3J3T3
2,3q3
2.2?2
2.2F2Q2[2
2.2G2
2.2P2f2
2.3_3|3
2.353
2.3f3
2.3P3g3
2.3q3|3
2/2|2
2/2A2K2V2c2j2q2x2
2/2J2\2
2/2X2n2
2/3A3P3
2/3E3T3
2/3H3W3
2/3L3[3
2:2n2
2:2Q2Z2f2
2:2S2l2
2:2u2
2:3G3
2;2B2I2i2
2;2d2
2;2q2x2
2;3g3
2;3H3l3
2;3S3
2?2\2k2
2?2`2o2
2?2c2u2
2?2F2
2?2J2O2
2?2o2
2?2R2d2
2?2U2d2
2?3o3z3
2?3U3d3
2@2G2
2@2H2O2o2
2@2o2
2@2q2
2@3K3P3i3
2@3n3
2@3o3
2@3r3
2@3T3
2[2h2
2\2c2
2\2e2|2
2\2m2
2\2n2
2]3p3z3
2^2e2
2^3w3
2_2f2
2_3f3m3
2`2{203H3
2`2~2
2`2k2p2
2`2y2
2+2A2S2
2+2F2m2t2|2
2+2s2
2+3A3T3
2+3F3|3
2+3w3
2<2C2U2t2
2<2K2
2<2Y2
2<3[3
2<3C3
2<3E3\3e3|3
2<3m3
2<3o3
2<3W3
2=2d2
2=2K2m2{2
2=2W2u2
2=2X2y2~2
2=3[3
2=3D3K3k3
2>2H2
2>2I2[2
2>2s2
2>3a3
2>3d3
20=0O0g0
202@2|2
202>2f2t2
20221013202820Z
20221014014651.899Z0
20221014202820Z0t0:
20292I2U2
202H2
202J2d2~2
202m2u2|2
202R2
202W2y2
20373
203D3
203P3W3w3
203T3p3
20K0d0
210930182225Z
212<2I2P2W2i2{2
212d2k2
212e2
212J2
212M2
212Z2p2
213[3q3
213\3j3
213_3
213|3
220302185142Z
220505192315Z
222?2F2M2_2s2
2'2-232c2
222K2k2
222Q2d2
222V2
222V2n2
223_3
223>3\3h3
223o3
223t3
2'242;2B2I2\2n2x2
2-242;2B2S2}2
229879+4700220
2-2C2b2u2
2-2G2`2
2'2J2
2-2J2t2
2'2X2
2'2z2
2'3.3y3
2-3^3
230504192315Z0p1
230511185142Z0
232B2r2
232L2
232V2l2#565@5P5h5
232x2
233:3
233h3
233o3
2-343;3B3X3
2'393w3
2'3A3`3
2'3B3x3
2-3F3
2'3g3
2'3s3
242X2o2x2
243;3
243`3
243A3e3
243G3W3p3
243k3
243o3
252;2D2_2o2
252[2
252<2\2v2
252<2C2J2o2
252<2i2
252D2
252i2
252S2k2
253<3
253O3X3g3
253u3
253Z3
261019185142Z0
262`2
262A2H2O2}2
262L2k2
262L2k2~2
262O2
262O2m2{2
262t2M3
263E3q3
263Z3v3
272>2^2r2y2
272E2T2h2
272J2s2
272t2|2
272X2
273]3
273Q3\3e3
273W3|3
273y3
282n2u2
282q2v2{2
282s2z2
282v2
282X2
283e3
283t3
283u3
29\$0t
292@2
292@2G2N2s2
292|2
292D2K2R2
292o2v2
292Y2g2u2
2A2a2
2A3}3
2A3j3
2B2q2
2B2x2
2B2Y2b2
2C2g2
2C2J2
2C3K3
2C3w3
2C3x3
2D2O2\2c2j2|2
2D2R2Z2u2
2D2W2
2D3{3
2D3T4
2E2{2
2E2}2
2e2l2
2E3L3
2E3l3~3
2E3o3
2F2\2{2
2F2P2
2G2]2
2G3~3
2g3p3
2G3q3
2G3Z3
2H2^2}2
2H2O2
2H3|3
2H3t3
2H3U3r3
2I2P2
2I2u2
2I3_3u3
2I3d3
2J2S2X2s2
2J2Y2
2J3Q3
2K2\2m2~2
2K3w3
2L2j2v2
2L2p2
2l2s2
2L2U2
2L2U2l2u2
2l3q3
2L3x3
2m2`3w3
2M2a2
2M2f2
2M2k2
2M3o3y3
2N2r2
2O2d2k2
2O2e2t2
2O2f2o2
2O2l2{2
2O2s2
2O2V2
2O2w2
2O3Y3x3
2p2{2
2P2}2
2P2e2
2P2l2
2P2n2
2P3d3
2P3h3
2P3i3
2Q2|2
2Q3X3
2R3r3
2s233G3U3a3h3
2S2n2
2S2Z2
2T2[2
2t2{2
2T2n2
2T3[3
2U2\2
2u2|2
2U2q2x2}2
2U3z3
2V2i2
2V3u3
2W2^2e2
2W2~273
2W2b2t2
2W2q2
2W2r2
2X3e3
2Y2f2
2Y3y3
2yh*`%]l
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3:3w3
3 3;3^3n3}3
3 3@3Z3
3 3'3D3T3[3b3i3z3
3 3L3Y3`3g3y3
3 4@4j4x4
3 434E4q4v4
3 434N4f4
3 4'4.454Z4q4
3 454m4
3 474c4
3 494p4
3 4C4y4
3 4E4]4v4
3 4H4
3!3(3/363I3[3e3p3}3
3!3?3F3M3c3
3!3+3T3g3
3!3=3t3
3!313A3Q3a3q3
3!343C3Y3c3
3!343R3Y3`3v3
3!353M3l3~3
3!3l3
3!3R3w3
3!3W3^3
3!474E4
3!474Z4
3!4N4
3!4Y4
3"363_3i3t3
3"383`3k3r3y3
3"393e3
3"3A3
3"3A3T3}3
3"3F3k3
3"3L3Z3b3}3
3"3m3
3"4)4
3"4_4
3"484
3"494B4n4{4
3"4L4U4n4
3"4O4s4
3#3*3=3O3Y3d3q3x3
3#3*3J3d3}3
3#3;3
3#3<3r3
3#3=3^3w3~3
3#3D3^3z3
3#4*4
3#4:4g4
3#4?4
3#4`4
3#4<4A4^4
3#424
3#424z4
3#4-4Y4y4
3#4B4
3#4k4x4
3#4v4
3$3/353:3D3N3X3b3l3v3
3$3:3E3R3Y3`3r3
3$363
3$3s3
3$4@4G4
3$4+4{4
3$474o4
3$4K4
3$4P4
3%3,32363<3@3F3J3P3T3Z3^3f3n3v3~3
3%3,3L3f3
3%3,3Y3
3%3}3
3%3<3K3Y3j3}3
3%3>3c3|3
3%313<3C3J3W3
3%343|3
3%373>3P3W3j3q3
3%3E3_3x3
3%3P3r3
3%3V3e3r3w3
3%4,4y4
3%4?4H4W4
3%4`4
3%464G4X4n4
3%4H4O4p4
3%4O4e4t4
3&3?3z3
3&3@3G3N3h3v3
3&3\3c3
3&3b3
3&4_4
3&4-4
3&4F4k4
3&4Z4
3(3/343
3(303P3t3
3(313J3Y3
3(3L3o3
3(4/4J4
3(4_4|4
3(4|4
3(494]4t4}4
3)3\3c3j3q3
3)3_3f3
3)373W3o3
3)3k3
3)3Q3
3)3S3a3i3
3)3Y3l3
3)4 575Y5
3)4@4I4z4
3)404
3)474W4e4x4
3)4J4h4
3)4M4m4
3*3/3f3n3
3*3@3Y3
3*3]3r3y3
3*3=3g3z3
3*3M3
3*4^4
3*4=4f4|4
3*414
3*4P4
3,3;3
3,3>3O3
3,353{3
3,3e3
3,3O3
3,4_4u4
3,4|4
3,4>4O4
3,434
3.3`3p3
3.383B3k3~3
3.3G3[3
3.3i3
3.3L3
3.4<4t4
3.454@4G4R4Y4d4k4v4}4
3/3|3
3/383G3
3/3E3i3
3/3E3Y3p3
3/3I3`3
3/4@4
3/464
3/4E4T4
3/4J4
3/4L4[4
3/4S4b4
3:3{3
3:3C3H3c3}3
3:3I3
3:3P3
3:3P3i3
3:3p3w3
3:4h4
3;3a3
3;3G3N3r3
3;3U3
3;4}4
3;4G4N4
3?3\3k3
3?3c3r3
3?3J3O3
3?3j3y3
3?3u3|3
3?3U3t3
3?4|4
3?4G4N4i4
3?4Z4
3@3m3
3@4T4
3[3b3
3\3e3
3\3e3.4Q4
3\3q4
3\3w3
3\4l4
3^3e3
3^5i5{5
3_3C4K4
3_4v4
3`3k3p3
3`4t4
3+3[3q3
3+3>3[3g3{3
3+3>3g3}3
3+32393@3Q3{3
3+3C3[3~3
3+3S3m3
3+424
3+484\4
3+4U4
3+4u4G5P5l5u5
3+4v4
3+4w4
3+4W4x4
3+4y4
3<3K3
3<3K3{3
3<3M3~3
3<3N3_3
3<3X3
3<4|4
3=3D3K3R3h3
3=3e3
3=3q3x3
3=3W3p3
3=4D4K4R4f4
3=4o4
3=4V4e4
3=4X4
3>3I3P3W3
3>3Q3z3
3>3r3
3>3T3w3
3>3Z3l3
3>4]4
300930183225Z0|1
303\3
303A3e3|3
303G3
303J3g3
303L3S3
303S3X3r3
30474
304I4
313~3
313A3H3O3V3g3
313D3
313K3
313P3r3
313Z3p3
314{4
314D4m4
314f4
314W4o4
323d3
323E3n3
323I3R3
323O3m3
323T3b3z3
323u3
323x3
32494
32494@4`4z4
324D4
324u4
3-3;3]3k3
3'3@3Y3
3-3`3u3|3
3-3>3O3e3
333:3A3
333]3d3k3r3
333B3
333B3r3
333f3{3
334:4
334M4e4
334o4
334W4w4
3-3A3
3'3A3~3
3'3d3
3'4.4y4
3'4_4u4
3'4<4
3'414;4d4w4
343=3n3
343G3
343N3h3
344>4M4
3'444;4B4[4q4|4
344A4e4
344k4
344o4
344T4
3'4A4`4
3'4c4
3-4F4
3-4F4U4
3'4s4a5
353`3o3
353<3C3J3`3
353D3
353D3S3b3q3
353N3T3i3
353X3
354<4
354o4
354P4
354u4
354Y4u4
363?3p3
363F3^3q3
363I3r3
363s3{3
364_4
364=4D4d4~4
364c4}4
364J4
373>3^3x3
373d3
373J3s3
373N3W3
373Q3m3
373X3
373X3q3x3
383?3
383a3h3}3
383K3t3
383m3
383O3X3
383q3v3{3
383s3
383v3
384?4
384C4J4g4
384m4
393g3
394_4{4
394N4
394U4
3A3`3
3A3u3
3B3b3
3B3G3`3
3B3I3
3B3M3Z3a3h3z3
3B3U3h3
3B3Y3b3
3B3Z3r3
3B4b4
3B4I4
3B4X4
3C3`3z3
3c3j3
3C3J3
3C3l3
3C3R3
3C3x3
3C4^4
3d3(4|4
3D3[3~3
3D3b3u3
3D3H3T3X3\3`3d3h3l3p3t3x3|3
3d3k3
3D3Z3~3
3D4{4
3D4|4
3D4K4
3D4N4]4
3d4n4}4
3D4T5
3e3l3
3E3r3
3E4L4
3E4l4
3E4l4~4
3F3`3x3
3F3M3
3F3T3\3w3
3F3Y3
3F3z3
3G3_3
3g3n3
3G3N3
3G4g4
3gAP_
3H3O3V3v3
3H3Q3
3H3v3
3H3V3]3
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3I3|3
3I3g3
3I3o3
3I4R4X4a4i4t4{4
3I4u4
3I4W4z4
3J3X3
3J3Y3n3
3j4n4r4&525;5A5F5K5R5Z5{5
3K3a3t3
3k3r3
3K3V3h3
3K4R4
3l3s3
3l3u3
3L3V3
3L4U4
3M3d3m3y3
3M3T3
3M4T4
3N3s3
3N4q4
3N4U4
3O3e3t3
3O3l3{3
3O3o3
3O3o3~3
3O3s3
3o3v3
3o42536
3o4y4
3P3}3
3P3g3{3
3P3i3
3P3W3
3P4i4
3Q3d3~3
3R3]3{3%4L4^4o4
3R3{4
3R3h3
3R4r4
3S3q3
3s4z4
3S4Z4a4
3T3[3
3t3{3
3t3~3
3T4^4m4
3T4x4
3TT1[
3u3|3
3U3u3
3U4{4
3V3b3z3
3V4]4
3V4`4
3V4a4
3W3^3e3
3W3q3
3W4^4
3X4e4
3Y3`3
3Y3w3
3Y4t4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4/464Q4w4
4 4@4Z4s4
4 4B4
4 4C4{4
4 4I4_4
4 4V4]4
4 4W4\4u4
4 5/5_5r5
4 5:5A5n5
4 5:5D5N5X5q5
4 5:5R5
4 5<5P6g6
4 5K5\5h5
4 5y5
4!4(4/4E4m4x4
4!4/4c4m4
4!4:4m4
4!4:4S4s4
4!4;4e4
4!4@4b4
4!4|4
4!4k4
4!4l4
4!5&5+5R5Y5^5z5
4!5:5I5
4!5K5a5
4!5O5z5
4!5z5
4"4)464
4"4@4\4
4"404O4
4"4B4\4
4"4j4
4"4u4
4"4x4
4"4z4
4"5_5u5
4"5'5@5t5
4"5B5
4"5b5l5
4"5G5~5
4"5V5
4"5x5
4#4*41484K4e4p4w4~4
4#4<4y4
4#494a4l4s4z4
4#4A4F4_4
4#4B4
4#4C4]4v4
4#5*5
4#5*5}5
4#50575>5P5m5v5}5
4#525
4#525b5u5
4#525z5
4#5h5
4#5t5
4#5X5x5
4#5Z5p5
4$4/464O4e4w4
4$4+4<4f4t4|4
4$4=4K4W4b4i4p4}4
4$4e4
4$5.5=5
4$5[5
4$5+5
4$5>5u6
4$515a5
4$575t5
4$5I5_5
4$5o5
4%4_4t4
4%444|4
4%4B4T4p4
4%5,5y5
4%5\5r5
4%565J5l5
4%595b5
4%5E5
4%5E5L5l5
4%5L5d5u5
4%5m5E6s6}6
4&4,4@4M4
4&4:4Y4v4
4&4@4}4
4&4+4
4&404:4D4Q4_4i4s4}4
4&404;4H4O4V4]4p4
4&434J4e4}4
4&4-444A4
4&454g4
4&4n4
4&4R4_4f4m4
4&4W4n4w4
4&5.555U5o5
4&5_5
4&535:5A5Z5p5{5
4&5-5
4&575@5
4&5f5
4(4/4O4i4
4(4`4
4(464B4M4T4[4h4
4(4F4]4
4(4f4m4
4(4k4|4
4(4K4R4Y4`4k4
4(4x485L5Z5f5m5
4(5\5n5
4(5_5|5
4(5B5b5z5
4(5H5X5
4(5V5
4)404c4
4)4a4s4
4)4C4\4
4)4d4
4)4f4n4u4
4)4M4d4m4
4)4O4g4
4)4R4h4
4)4V4n4
4)4w4
4)5_5u5
4)5|5
4)505
4)505}5
4)5a5z5
4)6U(
4*4<4T4
4*42474H4a4
4*4B4
4*4C4\4
4*4C4v4
4*4H4O4V4l4
4*4L4
4*4m4~4
4*4N4e4n4
4,4;4
4,4>4D4q4
4,454
4,454{4
4,4e4o4
4,4F4_4
4,4G4d4
4,4G4s4
4,4O4
4,4U4k4
4,555
4,555L5U5l5u5
4,5h5
4,5l5
4.4`4
4.4D4c4v4
4.4G4z4
4.4M4`4
4.4n4
4.4O4h4o4
4.4R4i4r4
4.555
4.5G5l5
4.5I5
4.5m5x5
4.5Q5
4/4]4
4/4E4
4/4F4p4
4/4F4T4s4
4/4L4[4
4/4S4b4
4/5:5?5v5~5
4/5<5o5
4/565
4/5B5
4/5E5T5
4/5k5
4/5L5[5
4/5S5b5
4:4`4
4:4H4W4q4
4:4P4
4:4S4
4:4u4
4:5O5
4;4Q4d4
4;4R4`4
4?4c4
4?4c4r4
4?4g4v4
4?4M4p4~4
4?5c5{5
4?5I5[5
4?5S5
4@4M4T4t4
4@4v4
4@5h5
4@5Y5
4[4`4v4
4[4{4
4[4b4
4[4h4
4\4c4
4\5c5
4]4{4
4]4q4
4^4y4
4_4g4
4_4z4
4_5~5
4`4o4
4`4x4
4`4y4
4`5t5
4}_Y;
4+4[4e4j4{4
4+4_4
4+4B4P4o4
4+4K4b4o4
4+4K4u4|4
4+4M4k4
4+4N4
4+4O4h4
4+4T4j4
4+5@5f5x5
4+5<5`5w5
4+525
4+5w5
4<4C4
4<4K4
4<4K4{4
4<4L4S4Z4a4r4
4<4R4q4
4<4y4
4<5|5
4<5m5
4<5x5
4=4c4
4=4f4
4=5[5
4=5w5
4>4E4
4>4h4~4
4>5`5k5v5
4>5a5
4>5E5
4>5E5L5l5
4>5H5R5s5
4>5M5\5l5
4>5o5
40]0h0
40<0x0
404\4m4
404F4
404R4
404Z4a4h4o4
405;5
405;5@5Y5
40575
405H5
405K5q5
405L5`6w6
405u5
40A0H0O0h0~0
40B0P0q0
41484@4P4g4
41484X4r4
414d4
415\5j5
415{5
41585
415A5Q5a5q5
415u5
424P4W4^4t4
424v4.5
425:5?5c5n5s5
42595
434<4H4p4
434B4
434J4S4
434J4X4w4
434Q4k4~4
435q5
4'4:4c4y4
4-4>4b4y4
4'434d4{4
444|4
444T4
445[5
445>5M5
4'454
445A5e5
445b5
445G5f5
445o5
4'474P4f4
4-494D4K4R4_4
4'4a4t4
4-4c4j4
4'4d4w4
4-4f4
4-4J4S4Z4s4
4'4P4f4
4-4Q4e4
4-4V4l4
4'4X4o4x4
4-5@5
4'5[5j5r5
4'5_5|5
4'5_5u5
454]4
454>4J4r4
4-545
454B4O4]4v4
454D4
454D4t4
454E4L4S4Z4k4
454N4
454O4
454Q4
454s4
454S4
455_5
455<5
455u5
455U5s5
4'5A5`5
4'5B5[5b5
4-5B5z5
4'5g5
4-5o5
4'5s5
4-5w5
464I4r4
464L4k4
464P4i4
465=5
465j5
474@4
474`4
474N4W4
474N4W4c4
474Q4p4
47506G6i6
475H5Q5
475w5
484?4
484_4
484d4
484n4u4
484P4i4
484q4
484Q4X4x4
485D5p5
485x5
494G4U4f4w4
494I4h4
494O4
494o4v4
495C5b5
495O5
495R5
4a4h4
4a4q4
4A5H5O5o5
4B4[4t4
4B4I4P4W4t4
4b4P5g5
4b4x4
4b4y4
4B4Y4b4
4B5f5v5
4C4]4
4C4f4
4C4R4
4C4w4
4C5J5
4d4t5
4d4w4
4D5{5
4d5n5}5
4E4[4l4p4t4x4|4
4e475@5\5e5
4E4L4
4e4l4
4E4N4U4n4|4
4E5d5
4E5L5
4F4a4
4F4Y4
4F5M5
4F5S5w5
4G4h4
4G4k4
4G5a5
4G5g5
4G5N5
4g5q5
4H4l4
4H5)626
4H5|5
4H5r5
4I4N4g4
4i4p4
4I5}5
4I5d5
4i5v5
4J4[4~4
4j4q4
4J5`5i5
4joEE
4K4f4
4k4r4
4K4R4
4k4x4
4K5l5v5
4L4^4o4
4l4y4
4L4Y4`4g4
4L5q5
4M5N6z6
4m5t5
4NPei
4O4e4t4
4O4s4
4O4V4
4O4Z4l4
4O5j5
4O5V5
4p4}4
4P4n4
4P5W5
4Q4X4_4
4Q5[5l5q5x5}5
4Q5p5
4R4i4
4r4y4
4R5|5
4S4Z4
4T4[4
4t4~4
4T4d5
4T4g4
4T5[5
4T5^5m5
4U4\4
4U4o4x4
4U5|5
4v556l6u6
4w4~4
4W4b4
4W4d4
4W4q4
4W4w4
4Y5f5
4Y5r5
4Yj%V
4Z4a4h4
4Z5z5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5/5o5
5 5:5S5
5 5<5_5d5}5
5 5=5F5M5f5t5
5 5b5i5
5 5I5
5 5Q5h5q5}5
5 5V5]5
5 6'6
5 6'6.6N6h6
5 6e6
5 6K6
5 6V6
5!5,595@5G5N5a5
5!5:5X5]5v5
5!5@5b5
5!5@5c5v5
5!505g5l5
5!5D5]5d5
5!5E5h5
5!5j5
5!5W5^5
5!6(6
5!6@6i6
5!6d6
5!6n6
5!6O6}6
5"5)565z5
5"5+525K5Y5e5p5w5~5
5"5F5i5
5"5I5m5
5"5u5
5"5X5x5
5"6)606P6j6
5"696
5"6o6
5"6W6_6f6~6
5"6x6
5#5,5]5t5}5
5#5=5F5K5
5#5>5Y5t5
5#515P5
5#545E5[5y5
5#5G5^5g5
5#5L5b5
5#5v5
5#6=6t6
5#626z6
5#676
5#696X6k6
5#6R6k6
5#6X6x6
5#6Z6p6
5$5.595F5M5T5[5n5
5$5/565=5J5
5$505a5x5
5$5l5
5$5M5
5$5M5`5
5$5T5g5
5$5Z5s5
5$6.6=6
5$6[6
5$6\6e6
5$6_6|6
5$6+6x6
5$6E6L6S6Z6w6
5$6k6
5$6L6
5$6l6
5%5,535D5n5|5
5%5,5I5Y5`5g5n5
5%5[5z5
5%5`5
5%5<5E5
5%51585\5
5%515E5i5w5
5%545|5
5%5L5
5%6[6
5%666L6
5%6c6
5&5?5{5
5&51585?5L5
5&5-545A5
5&5-5R5i5w5
5&575a5o5w5
5&5D5b5
5&5I5u5
5&6=6F6w6
5&609
5&696
5&6r6
5(5:5D5O5\5c5j5q5
5(575
5(5A5
5(6/6
5(6|6
5(656Y6r6
5(6d6
5(6H6
5(6M6r6
5)5?5
5)595X5
5)5R5e5
5)5w5
5)6I6|6
5*5<5F5Q5^5e5l5s5
5*5C5z5
5*5l5~5
5*5O5
5*6@6
5*616
5*656S6
5*6f6
5*6N6j6
5,5;5
5,5[5
5,5=5`5
5,5=5a5x5
5,555
5,5H5[5
5,5I5
5,5V5o5
5,6?6g6n6v6
5,6_6
5,6_6u6
5,6I6p6
5,6l6
5,6M6T6[6b6
5.5?5v5
5.5_5
5.5W5m5
5.656
5.6C6J6j6
5.6L6S6s6
5.6N6U6u6
5.6Q6
5/5F5T5s5
5/5H5
5/5I5b5
5/5y5
5/666
5/666=6]6w6
5/6a6
5/6E6T6
5/6L6[6
5/6S6b6
5:5]5
5:5c5
5:5e5u5
5:5g5
5:5P5
5:5V5
5:6A6H6h6
5:6I6c6q6
5;5[5
5;5q5~5
5;5R5[5
5;5T5r5}5
5;6B6
5;6H6l6
5?5\5k5
5?5^5x5
5?5`5
5?5c5r5
5?5g5v5
5?5j5y5
5?5L5S5Z5s5
5?5N5~5
5?5R5
5?5U5d5
5?5U5y5
5?5V5_5k5
5?6t6
5@5G5
5@5G5N5U5r5
5@5l5
5@6o6
5@6O6^6
5@6W6
5@6Y6
5\6j6p6
5]5x5
5]6s6
5^5e5
5_5u5
5`5g5
5`5w5
5`6w6
5+5C5\5
5+5D5z5
5+5N5q5
5+5s5
5+5S5m5
5+626
5+6v6
5+6w6
5<5C5
5<5E5i5
5<5E5T5
5<5K5
5<5r5y5
5<5V5
5<5Y5
5<6R6h6
5=5K5m5{5
5=5s5z5
5=5V5]5}5
5=6D6
5=6Q6`6p6
5>5E5
5>5h5
5>6E6
5>ZJx
50_0|0
505@5G5N5U5f5
505F5e5x5
505L5
506_6|6
50676
506G6
506G6P6
506K6
506r6
506T6t6
506u6
506X6
50i0w0
515P5
515Q5[5f5s5z5
51696u6
516H6Q6s6
516M6i6
525h5o5
525I5R5^5
525J5b5z5
525L5~5
53^Z0
535_5p5
535B5
535I5h5~5
535M5
535X5v5
535y5
536:6
536h6
536j6
536o6
536Z6b6j6p6v6|6
545;5S5v5
545_5
545K5d5
545K5T5
546;6
546[6
546>6M6
546A6e6
546o6
546U6\6c6j6
5'5.555<5M5w5
555^5
5'555F5W5
5-555P5
555b5
555B5I5P5i5
555D5
555P5l5
555Q5X5
555V5o5v5
555x5
556<6
556O6X6g6
5-585^5v5
5'5A5Z5
5-5c5j5
5'5F5Y5
5'5J5
5'5S5
5'5X5o5x5
5'6.6
5-6{6
565?5F5_5m5y5
565=5]5w5
565m5
565N5`5
565U5b5}5
566=6
566>6R6
566v6
5'6C6o6
5'6G6y6
5'6Z6r6y6
575>6a6
575O5h5
575P5
575Z5
576_6
576q6
576Q6p6
576W6
576W6|6
585?5_5y5
585=5V5y5
585e5{5
585t5
585X5
585z5
586i6
586o6
586t6
586x6
595{5
595c5j5q5x5
595C5M5v5
595I5]5{5
595O5
596@6
596O6e6
596Y6g6u6
5a5h5
5A5H5
5A5H5O5V5l5
5A6}6
5A6g6
5A6J6~6
5B5v5
5b5x5
5B6Q6d6
5B6Y6
5C5R5
5C5S5v5
5C5V5
5c5w5
5C6c6
5C6V6`6p6
5C6x6
5d5k5
5D5R5m5
5d5t6
5D6N6]6
5D9X=
5E5[5~5
5e5l5
5E5L5S5s5
5E6e6o6
5E6o6
5f{3'
5f5{5
5f5m5
5F5N5g5
5F5Q5X5
5F5s5
5F5z5
5F6~7
5G5h5
5g5l5v5
5G5X5|5
5G6\6
5G6f6
5G6N6
5GFc}w
5gr!<
5h5o5
5H5O5o5
5h5u5
5H5Y5}5
5I5i5w5
5I5Q5X5x5
5I5V5]5d5v5
5I6g6
5I6V6s6
5J5]5
5j5q5
5K5`5y5
5K5i5
5k5r5
5K5R5>6
5L5^5o5
5L5s5}5
5L5w5
5L6S6
5L6u6
5N5_5r5
5N5U5
5O5e5t5
5O5l5{5
5O5s5
5o5v5
5O5V5
5O6j6
5O6Y6x6
5P5g5p5|5
5P5l5
5P5r5
5P5W5
5p5w5
5P6p6
5Q5r5
5Q6X6
5R5_5f5m5
5R5I6
5R5r5
5R5Y5
5S5c5j5q5x5
5S5Z5
5t5{5
5t5~5
5U5\5
5U5'606L6U6
5U6|6
5WJYu
5X5c5j5
5Y5y5
5Z6a6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6:6K6
6 6+6
6 6+62696F6
6 6+686?6F6M6`6~6
6 6<6E6
6 6A6Z6a6
6 7e7
6 7V7
6!6*666g6~6
6!616A6Q6a6q6
6!626H6f6
6!656B6T6a6h6o6v6
6!6J6
6!7@7Z7s7
6!7+7l7
6!7F7^7w7
6!7L7Z7
6!7n7
6"6)606A6k6y6
6"6)6C6a6q6x6
6"6.6_6v6
6"6:6R6j6
6"6<6U6
6"656_6r6
6"6-6:6A6H6O6b6t6~6
6"6H6
6"6m6t6
6"6u6
6"6U6\6c6j6
6"6x6
6"6Y6^6w6
6"7[7
6#6*616
6#6*616@6x6
6#6/6`6w6
6#6+6M6j6
6#6<6{6
6#6=6F6K6
6#6=6Y6r6
6#6O6l6{6
6#7=7w7
6#7>7t7{7
6#70777>7P7m7v7}7
6#727
6#7R7k7
6$6+626D6L6S6Z6
6$6<6
6$6=6b6
6$6a6
6$6M6{6
6$7.7
6$7_7|7
6$7+7
6$7+7{7
6$7+7o7v7
6$71787?7X7n7y7
6$717U7x7
6$748
6$7J7o7
6$7l7
6$7P7
6$7P7|7
6%6,636:6W6g6n6u6|6
6%6?6X6
6%646
6%686a6w6
6%686K6c6v6
6%6B6
6%6X6_6
6%7,7|7
6%7?7H7W7
6%7a7
6%7b7j7o7
6%7Q7
6%7x7
6%7Z7s7
6&6.6B6T6b6k6q6v6{6
6&6-646F6X6b6m6z6
6&676j6t6
6&686r6}6
6&6C6
6&6F6
6&6l6(7<7J7V7]7
6&6N6Y6`6g6
6&7.7G7
6&7_7|7
6&7+7i7n7
6&7-7
6&7-747;7Q7q7{7
6&787O7{7
6(6^6e6
6(676
6(6G6Z6
6(6L6c6l6
6(6L6i6
6(6L6r6|6
6(7^7e7
6(767d7l7
6(7c7
6(7T7
6(7w7
6)6]6
6)6_6f6
6)6`6
6)6`6|6
6)626^6k6r6y6
6)626c6z6
6)646;6B6p6
6)646p6
6)6B6}6
6)6C6\6
6)6k6
6)6S6
6)707
6)707}7
6)7B7M7Z7a7h7z7
6)7E7`7|7
6)7I7
6)7q7
6)7w7
6*6=6f6|6
6*6b6
6*6C6k6
6*6L6i6{6
6*6N6q6
6*6o6
6*7@7
6*7^7
6*717
6*7D7K7x7
6*7L7f7m7
6,6;6
6,6?6h6~6
6,636:6L6^6h6s6
6,636S6m6
6,656
6,6E6
6,6F6T6
6,6G6u6
6,6X6i6
6,757Y7
6,7c7
6,7l7
6.6D6c6v6
6.6k6
6.7_7
6.7B7
6.7Q7
6/696D6Q6X6_6f6y6
6/6a6p6
6/6B6k6
6/6P6
6/6S6b6
6/6Y6g6o6
6/7:7?7v7~7
6/7_7j7o7
6/767
6/7F7O7[7
6/7J7
6/7L7[7
6/7q7
6/7r7|7
6:6C6X6}6
6:6H6j6x6
6:6n6
6:6S6
6:6U6h6o6
6:7A7H7h7
6:7r7
6;6B6
6;6Q6d6
6;6q6x6
6;7B7
6;7G7N7
6;7H7Z7s7
6?6\6k6
6?6c6r6
6?6F6M6T6j6
6?6r6y6
6?6u6|6
6?6U6d6
6?6V6d6
6?7c7
6?7Z7
6@6b6
6@6H6N6y6
6@6J6O6`6
6@6W6`6
6@7^7
6@7T7
6@7Y7
6[6h6
6\6c6
6\7e7
6]6q6
6^6f6
6^7e7
6_6|6
6_7 8Q8[8e8
6`6y6
6+6a6t6
6+6s6
6+707_7u7
6+727
6+7x7
6+7y7
6<6_6
6<6C6
6<6J6o6
6<6K6
6<6K6{6
6<6N6
6<6W6
6<6X6
6<6Y6
6<7|7
6<7C7
6<7E7
6<7E7\7e7|7
6<7o7
6<7O7
6<7s7
6=6D6
6=7[7
6=7E7L7l7
6=7O7b7
6=7q7
6=7V7e7
6>6E6
6>6p6
6>6Z6m6
6>7a7
6>7v7
6>7W7z7
60@0_0
60`0g0n0u0
606}6
60696e6r6y6
606B6L6W6d6k6r6y6
606J6c6
606M6
607D7
607I7
607K7\7
607m7
607u7
607X7
60g]qH
60j0s0x0
616D6
616L6g6
616P6
616P6c6
617;7c7m7
61787?7_7y7
617Y7r7
626|6
626a6z6
626D6Q6d6p6
626i6
626U6
626V6
62797
627o7
627S7q7
6-2qFH
636B6
636L6S6s6
636M6
636q6
636Q6V6o6
636W6n6w6
637?7l7w7
637{7
637>7P7v7
637j7
637N7
646?6L6S6Z6l6~6
646?6Q6e6
646E6|6
646G6p6
646j6q6
646L6n6
647>7M7
647A7e7
647k7
647X7t7
656>6J6{6
656B6I6P6i6
656D6t6
656E6L6S6Z6k6
657<7
657B7[7P8g8
657e7
657O7X7g7
6'6_6|6
6'6`6x6
6'606
6-646D6U6
666?6K6|6
666~6
666M6V6b6
666N6U6
666O6
666P6
666W6
667G7P7
667j7
667Z7v7
6'6A6[6s6
6'6A6Z6
6'6B6M6_6'<
6'6d6
6-6D6u6
6'6G6_6
6'6I6
6'6K6n6
6-6N6f6y6
6-6Q6h6q6
6'6S6
6-6V6l6
6'6w6
6'7,7E7y7
6'7\7o7
6-7_7|7
6-7{7
6'7=7\7o7
6'767
676l6
676M6q6
676n6
676V6
677\7
677_7u7
677m7t7
677Q7p7
6'7B7x7
6-7E7d7|7
6'7g7
6'7G7
6'7H7
6-7Q7m7<8C8
686F6R6]6d6k6x6
686N6\6
686n6u6
686S6i6
686Y6y6
687E7i7
687t7
696C6\6
696O6n6
696o6v6
697c7n7
697F7j7
697S7
6A6H6
6a6l6~6
6A6q6
6a6u6
6A7o7
6B6h6
6b6i6
6b6x6
6b6y6
6B7X7
6B7Y7
6C6]6d6
6C6^6
6C6O6[6c6
6C6T6]6
6C7J7
6C7x7
6D6K6
6D6y6
6D7a7
6d7k7
6D7k7
6D7K7
6D7N7]7
6E6_6h6w6
6E6}6
6E6j6
6E6L6a6
6E6y6
6E7[7
6E7`7
6E7L7
6F6{6
6F6M6
6f6m6
6F6S6Z6a6z6
6F6z6
6F7Q7o7
6G6h6
6g6n6
6G7[7}7
6H6|6
6H6O6
6H6t6
6H6z6
6H9y9
6I6P6W6w6
6I7i7y7
6J6~6
6J6c6z6
6J6y6
6K6R6
6k6r6
6K6R6Y6y6
6K7l7s7z7
6K7Q7W7^7e7n7
6K7R7
6L6c6l6x6
6l6s6
6L6U6
6L7g7x7
6M6h6
6M7T7
6N6o6}6
6N6q6
6n6u6
6n7!8J8T8^8
6N7m7
6N7q7
6O6b6
6O6l6{6
6O6o6
6O6s6
6O6V6
6O7j7
6P7[7`7y7
6p7w7
6Q6q6
6Q6w6
6Q7a7q7
6R6k6
6R6w6
6R6Y6`6
6S6g6
6S6t6{6
6t6{6
6T7[7
6T7{7 848
6u6|6
6U6o6x6
6U6r6
6U7\7
6U7b7{7
6U7j7
6v6}6
6w6U8H9
6W7^7
6X7b7q7
6Y6s6
6Y6w6
6Z6a6h6~6
6Z7a7
6Z7q7y8
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7<7E7
7 70777>7E7V7
7 717?7s7}7
7 777c7
7 7-787?7F7S7
7 7'7G7a7z7
7 7-7H7U7q7y7
7 7D7[7d7
7 8+82898F8
7 8<8
7 8<8P9g9
7 818U8l8u8
7 848
7 8'8
7 888Q8
7 898o8
7 8D8\8u8
7 8e8
7 8V8]8
7 8Y8b8
7!7/787>7C7H7O7W7}7
7!7>7t7
7!797_7r7
7!7J7`7
7!7l7
7!7O7h7m7
7!8b8
7!8d8,9C9f9|9
7!8O8l8{8
7!8V8
7!8W8^8
7"7)707F7y7
7"7)707I7_7j7w7~7
7"7)7B7P7
7"7:7M7e7x7
7"747H7h7t7
7"8)8y8
7"8-8R8o8
7"8B8}8
7"8v8
7#7)7/757
7#7*7@7s7z7
7#7<7R7]7j7q7x7
7#7<7y7
7#767_7u7
7#7b7v7|7
7#7v7
7#8:8C8t8
7#8+828R8l8
7#8>8t8{8
7#828
7#828z8
7#8C8M8f8
7#8O8
7#8o8
7#8O8l8{8
7#8Z8
7$7+7=7M7V7]7y7
7$767@7K7X7_7f7m7
7$777`7v7
7$7B7I7P7f7
7$7D7
7$7D7U7r7
7$7E7L7S7o7
7$7J7k7
7$8[8
7$8_8
7$8+8K8e8
7$818U8x8
7$878`8v8
7$878t8
7$8K8b8x8
7%7?7\7
7%7?7`7y7
7%7<7E7\7e7
7%70777>7K7
7%767c7m7
7%7d7
7%7E7_7
7%7k7
7%7N7a7
7%8,8y8
7%8?8H8W8
7%8_8
7%8<8F8K8\8
7%8=8D8y8
7%8w8
7%8Y8
7&7?7\7
7&7?7{7
7&7_7|7
7&7=7{7
7&747k7
7&7-7>7f7m7
7&7-747;7~7
7&7C7b7
7&7J7m7
7&8_8u8
7&898
7(7?7
7(737:7A7o7
7(7G7
7(7G7Z7
7(7h7w7
7(7L7o7
7(7p7
7(7u7
7(8a8
7(8H8
7(8j8
7)7;7k7
7)7@7]7i7x7
7)7_7f7
7)7`7|7
7)7>7h7s7
7)7B7`7e7~7
7)7F7c7}7
7)7O7
7)7S7
7)8?8p8
7)838
7*7`7g7
7*757<7C7P7
7*757F7^7k7y7
7*7F7
7*7l7~7
7*7x7
7*8@8
7*8^8
7*8_8
7*818
7*898
7*8l8
7*8P8
7*8Q8u8
7*8y8
7,7;7
7,757
7,757L7U7
7,7T7_7f7m7
7,8:8A8a8{8
7,8`8
7,8|8
7,858L8U8l8u8
7,8c8
7,8y8
7.7;7D7K7
7.7?7v7
7.7I7\7
7.7X7n7
7.7X7u7
7.898W8
7.8l8u8
7/787G7
7/7A7]7j7q7
7/7f7y7
7/7H7m7
7/7I7j7
7/7L7v7
7/7W7
7/868
7/878s8
7/8E8T8
7/8L8[8
7/8S8k8
7/8Z8i8
7:7C7H7c7
7:8A8
7;7O7q7
7;7T7}7
7;8B8I8i8
7;8H8l8
7;8I8j8
7?7\7k7
7?7a7z7
7?7c7r7
7?7F7
7?7Q7`7
7?7R7v7
7?7U7d7
7@7\7
7@7~7
7@7N7V7q7
7@7O7~7
7@7v7}7
7@7W7`7
7@8T8
7@8Y8
7[7h7
7[7q7
7\7e7|7
7\7r7
7^7|7
7^8w8
7`7w7
7{8&9G9Q9[9
7+7[7q7
7+727:7_7f7n7
7+7b7s7
7+7s7
7+7Y7g7
7+868=8
7+868H8`8
7+888\8
7+888\8y8
7+8c8
7+8W8x8
7<7I7P7W7i7
7<7K7
7<7M7q7
7<7W7
7<8|8
7<8x8
7=7K7p7~7
7=7T7b7
7=7V7o7
7=7w7
7=7Z7b7i7p7{7
7=8[8
7>7\7c7
7>7j7{7
7>7Q7
7>7r7
7>8E8
7>8W8z8
70[0w0
70\0t0
707?7
707}7
707>7g7v7
707a7
707d7
707J7c7
707L7S7
708s8
70D0K0R0k0
717_7x7
717B7
717J7o7
717N7n7
718m8
727E7n7
727H7`7
727J7
727K7i7n7
727z7
728H8
728M8^8
728o8
737:7A7H7^7
737B7r7
737i7p7
737I7S7
737L7h7
747[7b7j7
747\7
747=7n7
747G7
747O7{7
747U7
748;8
748=8D8]8k8
748A8e8
757@7G7N7
757_7~7
757|7
757<7C7J7o7
757D7|7
757D7t7
757N7
757N7s7
757X7
758<8
758O8X8g8
767o7
768=8
768>8W8
768j8
768v8
7'7?7W7o7
777)8
777\7e7
777]7
777>7
777Q7r7
777V7u7
777X7r7
777Z7
778^8
778B8T8l8
778d8w8
778w8
7'7A7Z7
7-7d7m7|7
7-7h7o7v7
7-7S7
7'7Y7
7'8.868c8
7'8_8
7-8>8
787F7f7t7
787I7_7z7
787N7q7
787P7d7
787R7Y7
787X7
788E8b8
788S8a8
788t8
788Y8`8g8n8
7-8a8
7-8c8j8
7-8D8S8
7'8G8
7-8g8
7'8H8
7'8s8
79\$0t
79\$8t
797{7
797G7U7f7t7
797K7
797m7
797P7Y7
798F8c8
798O8l8
798U8_8j8w8~8
7A7L7S7Z7
7A7o7
7A7Z7
7A7Z7v7
7a8f9]:
7A8H8O8o8
7B7^7
7B7e7
7B7f7
7b7i7
7B7l7
7B7U7
7b7y7
7C7e7t7
7C7J7
7C7P7W7^7p7
7C7R7
7C8z8
7D7\7c7
7D7]7
7D7K7k7
7D7Q7X7_7x7
7D7W7
7d8$9
7D8k8
7E7!8"9;9N9l9
7E7}7
7E7L7S7s7
7E8V8
7F7W7{7
7F7Y7
7F7z7
7F8Z8
7F8z8
7G7L7e7
7g7n7
7h7o7
7h7u7
7H8U8y8
7I7P7W7^7
7I8_8
7I8i8y8
7I8k8
7I8P8
7i8p8
7J7e7
7j7q7
7J7y7
7J8o8
7k7!8,8J8
7k7r7
7K7S7Z7z7
7K8R8
7K8w8
7L7^7o7
7l7s7
7L7y7
7L8a8
7L8S8Z8a8
7M7T7
7n7t7
7N7U7
7O7V7]7}7
7P7i7x7
7p7w7
7P8]8
7Q7|7
7Q7u7
7q8U96:0;
7R7|7
7R7i7
7R7Y7
7S7w7
7s7z7
7T7a7
7T8^8m8
7U7\7
7U7o7x7
7U7w7
7U8\8
7u8|8
7u8}8
7W7w7
7W8z8
7x7#8
7y8-9N9X9b9
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(808t8x8
8 8(8.8f8k8w8}8
8 8;8o8
8 8<8E8
8 8'8X8c8
8 8d8q8
8 8H8S8Z8a8
8 8I8
8 8s8z8
8 9/9_9r9
8 969
8 979
8 979c9
8 979q9
8 9D9\9u9
8 9m9
8 9R9
8!8(8/8B8`8g8n8
8!8)8E8a8
8!8=8X8n8
8!848q8
8!8H8
8!8H8k8
8!8I8
8!8J8`8
8!8q8x8
8!9(9x9
8!9:9A9j9
8!9]9
8!9k9
8!9r9
8!9V9
8"8(8X8^8d8k8
8"8*8M8V8d8k8r8
8"8;8U8
8"8@8_8~8
8"8[8
8"848>8I8V8]8d8k8~8
8"888C8P8W8^8p8
8"9*9/9S9^9c9|9
8"989
8"9F9^9w9
8"9q9
8#8(8J8O8U8r8y8
8#8D8
8#9*9
8#929
8#9W9f9
8$8/898
8$8+8>8P8Z8e8r8y8
8$8<8O8g8x8
8$8C8
8$8l8
8$8p8
8$9.9=9
8$9;9^9
8$9[9
8$9_9u9
8$9`9
8$9+9
8$9+9{9
8$9=9V9
8$979t9
8$989T9n9
8$9D9
8$9Y9t9
8%8,8?8
8%8?8X8}8
8%8\8o8
8%848
8%848|8
8%868c8m8
8%8E8_8
8%8L8f8|8
8%9,9
8%9/999b9u9
8%9]9
8%9_9|9
8%9~9
8%969?9
8%9e9
8%9E9e9
8%9m9
8%9T9
8&8@8y8
8&818H8U8q8y8
8&8-848G8Y8c8n8{8
8&8A8Y8
8&8H8V8u8
8&9;9B9b9|9
8&9?9`9~9
8&91989?9
8&939:9A9S9p9y9
8&9-9
8&9W9
8&9Z9
8(8;8Q8
8(8{8
8(8B8c8
8(8C8[8z8
8(8f8
8(8w8
8(8Y8p8y8
8(9_9u9
8(929<9e9x9
8(939>9s9
8(9c9
8(9d9
8(9h9
8(9J9p9
8(9Z9l9
8)8;8J8Z8s8
8)8^8
8)8`8|8
8)8<8e8{8
8)868=8D8K8^8|8
8)878E8V8g8
8)8C8`8
8)8k8
8)8m8{8
8)8M8p8
8)8w8
8)8W8
8)8y8
8)9\9
8)9_9f9
8)909}9
8)979`9
8)9B9y9
8)9D9o9
8)9E9`9|9
8)9K9Y9t9R:
8*8/8f8n8
8*8=8_8s8
8*838?8p8
8*8l8~8
8*8N8q8
8*999
8,8?8I8X8u8
8,8@9W9y9
8,858
8,858L8U8
8,878F8
8,8D8S8
8,8U8k8
8,8X8
8,9_9
8,939
8,9C9L9}9
8,9L9
8,9l9
8.9[9z9
8.959
8.989B9k9~9
8.9E9
8.9J9U9]9z9
8.9Q9
8.9r9
8/8F8]8
8/8F8g8
8/8L8[8
8/8N8a8
8/8S8b8
8/8W8u8
8/969
8/9E9
8/9L9[9
8/9n9y9
8/9S9b9
8:<O<a<x<
8:8{8
8:8M8v8
8:8o8
8:8w8
8:9|9
8:9o9
8;:C:
8;8W8x8
8;9g9
8;9V9u9
8?8\8k8
8?8c8r8
8?8F8
8?8M8p8
8?8U8d8
8?9c9r9
8@8G8
8@8K8]8
8@8Q8z8
8@8v8}8
8@9[9
8@9`9p9
8[8b8
8\$8t9
8\8c8
8\8i8
8\8n8
8]8d8
8^:j:q:
8_8|8
8_899D9b9
8_8f8
8_8l8
8_9n9
8`:g:}:
8`8{8
8~9/:K:b:
8+82898K8h8q8x8
8+8E8P8g8
8+8H8c8
8+8M8[8}8
8+8n8
8+8N8
8+929
8+989m9
8+9H9t9
8+9u9G:P:l:u:
8+9w9
8<8_8
8<8I8Q8V8\8g8
8<8K8
8<8K8f8
8<8N8_8
8<8Q8
8<9|9
8<9E9\9e9|9
8<9G9e9
8<9M9V9
8<Y/;
8=9[9
8=9r9
8=9w9
8>8E8
8>8Q8z8
808b8
808C8l8
808J8
808J8c8
808J8f8
808s8
808t8
808T8z8
809;9@9Y9
80979
809H9
80d0w0
818<8C8J8
818A8
818K8
818N8m8
819\9j9
819m9
828h8o8
828L8e8
828L8g8
829:9?9c9n9s9
82999@9`9z9
829N9b9
838:8Z8t8
838]8d8k8r8
838<8H8p8
838B8
838y8
839:9
839@9[9
839o9
84:d:z>
848;8[8u8
848=8I8z8
848B8a8
848L8e8
848M8r8
848o8
849;9
849=9L9
849A9e9~9
849D:
849O9`9
858C8J8j8
858D8
858D8t8
858O8y8
858R8a8
859<9
859O9X9g9
859w9
868\8t8
868`8~8
868Z8y8
869|9
869o9
869W9^9e9l9
878<8A8h8x8}8
878>8
878>8E8L8q8
878i8
878S8
879R9
879w9
8'8.8[8
8'8.858<8O8m8t8{8
8'8.858B8
8'8:8_8
8-8[8o8
8-878B8O8V8]8d8w8
8'878P8f8
888?8F8M8r8
888^8
888J8
888n8u8
888O8X8d8
888P8i8
888Q8
889q9
889S9
889t9
8-8g8y8
8'8J8
8'8X8
8-9_9|9
8-949
898e8v8
898V8n8
8-9a9
8-9F9
8'9g9
8'9G9l9u9
8'9G9y9
8'9H9
8-9I9u9
8'9l9
8'9p9
8-9V9o9
8'9Z9
8'9Z9o9
8a8s8z8x;
8A8T8}8
8A8W8z8
8A8X8a8m8
8a8y8
8A8z8
8A9H9
8a9l9
8B8[8a8
8B8b8
8B8f8
8b8x8
8B8x8
8B8X8q8
8b8y8
8B9b9
8B9o9
8C8K8R8r8
8C8Z8c8o8
8D8]8l8
8D8h8
8D8K8
8d8t9
8D8W8a8f8w8
8D9k9
8D9K9
8D9k9
8D9T:
8E8}8
8E8q8
8E8S8Z8z8
8E8X8t8
8E9d9
8E9f9R;u;
8E9L9
8E9l9~9
8e9p9
8E9v9
8F8j8
8F8M8
8F9f9
8G8w8
8G8y8
8G9g9q9
8G9N9
8H8V8^8y8
8H9|9
8H9h9
8I8\8
8I8r8
8I8W8_8z8
8I8x8
8I9g9
8J8~8
8J8g8
8J8R8Y8`8k8
8J8s8
8J9l9w9~9
8J9Q9
8k:p:u:z:
8K8b8k8
8K8h8
8k8x8
8L8^8o8
8L8n8
8L8U8
8L8U8l8u8
8L9d9u9
8l9w9
8M8u8
8M9T9
8m9u9
8n8.9
8N8n8
8N8q8
8N8r8
8N8U8
8N9g9
8O8^8~8
8O8b8
8O8e8t8
8O8l8{8
8o8v8
8o9':H;
8O9\9
8O9l9{9V:
8O9Y9x9
8P8g8
8P8i8
8P8W8
8p9#:L:V:`:
8Q8X8
8R8m8
8r8y8
8R9p9
8s8u9}9
8S9x9
8S9z9
8t8}8
8t8~8
8T8d9
8T8m8
8T9]9d9}9
8u8|8
8U9|9
8v8}8
8V8i8
8V8p8w8
8VWj8
8W8{8
8W9^9
8X9e9
8Y9y9
8Z8s8
9 :*:1:Q:u:
9 :':r:
9 :@:v:}:
9 :+:B:Y:i:
9 :<:P;g;
9 :7:c:
9 :7:q:
9 :j:
9 :M:`:
9 :O:{:
9 :O:e:t:
9 :X:
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 90979>9E9V9
9 969A9N9U9\9n9
9 9'9.9D9l9w9~9
9 999p9
9!:':C:
9!:{:
9!:E:a:
9!:L:Z:
9!:r:
9!:y:
9!9(9E9U9\9c9j9{9
9!929C9i9
9!9A9[9
9!9o9(:U:
9!9t9
9":-:?:e:
9":':@:t:
9":5:^:t:
9":8:
9":9:
9"9)909^9
9"9)9P9
9"9@9i9x9
9"9~9
9"959L9
9"9E9]9p9
9"9j9
9"9O9e9t9
9"9u9
9"9x9
9"9y9
9#:.:3:L:
9#:2:
9#:k:x:
9#9;9J9c9j9r9
9#9|9
9#90979>9P9b9l9w9
9#9q9
9#9T9k9t9
9#9v9
9$:[:
9$:[:o:|:
9$:_:u:
9$:+:{:
9$:Z:a:
9$9:9b9m9t9{9
9$9?9y9
9$9+9e9
9$9+9K9e9
9$909G9W9
9$969A9H9[9o9
9$969F9O9V9r9
9$9-9@9G9R9_9k9
9$9a9
9$9I9
9$9M9c9
9$9p9
9%:,:
9%:,:3:S:m:
9%:E:^:
9%:L:^:o:
9%:O:l:{:
9%:Q:j:
9%9\9
9%9\9o9
9%9<9E9
9%949|9
9%949d9w9
9%9a9
9%9c9
9%9M9
9&:3:::A:S:p:y:
9&:8:O:{:
9&:p:
9&:Z:
9&9`9
9&9-9?9Q9[9f9s9z9
9&9-9C9k9v9}9
9&9a9h9o9
9&9C9
9&9O9e9
9&9X9c9p9w9~9
9(:_:u:
9(:|:
9(:A:F:
9(:h:
9(:w:
9(9;9_9
9(9B9[9
9(9F9
9(9F9M9T9j9
9(9L9o9
9):<:[:t:
9):d:
9):u:z:
9):w:
9)9_9|9
9)9`9
9)9>9W9y9
9)979\9
9)9D9R9`9q9
9)9e9l9
9)9F9O9V9o9}9
9)9w9
9*:@:
9*:`:g:
9*:8:e:
9*:g:
9*:W:j:
9*:y:
9*9=9\9
9*9B9[9
9*9C9
9*9D9
9*9d9w9
9*9l9~9
9*9L9T9m9
9*9M9
9*9Y9
9,:7:U:
9,9;9
9,959x9
9,9B9a9t9
9,9f9}9
9,9i9
9,9I9
9.:5:
9.:b:
9.:I:^:
9.:r:
9.9?9v9
9.9G9_9j9t9
9/:<:V:h:
9/:6:
9/:8:?:X:f:
9/:8:\:
9/:K:l:
9/:v:
9/9}9
9/969m9
9/969t9
9/989d9q9x9
9/9f9y9
9/9G9f9y9
9/9l9
9':.:N:h:
9::G:k:
9::G:N:U:n:
9':^:
9':=:\:o:
9:9p9w9
9':A:`:
9':c:
9':C:o:
9-:g:
9-:K:
9':l:
9':v:
9':w:
9-:W:
9;:B:
9;;Z;
9;9B9I9P9[9
9;9c9
9;9n9u9
9;9o9
9;9O9k9
9;9Q9p9
9;9q9x9
9?:#;+;g;
9?:c:{:
9?:F:M:m:
9?9\9k9
9?9`9o9
9?9|9
9?9c9r9
9?9j9y9
9?9U9d9
9?9U9y9
9@:Y:
9@9J9T9i9}9
9@9W9`9
9[9b9
9\$ t
9\$(t
9\$,t
9\$@v_
9\$@vW
9\$0t
9\$8t
9\$Dw
9\$Ht
9\9c9
9\9e9
9\9e9::D:V:
9]9p9
9^:w:
9^9k9
9_:f:
9`9~9
9`9k9p9
9~(s+j
9+:|:
9+:A:T:
9+:D:
9+:W:x:
9+9[9q9
9+949e9|9
9+9A9e9|9
9+9K9u9|9
9+9P9^9}9
9+9s9
9<:~:
9<:M:V:
9<:s:
9<:y:
9<9K9
9<9Y9
9=:[:
9=:D:
9=:M:T:[:l:
9=:n:
9=:X:
9=:z:
9=9s9z9
9>:W:z:
9>9h9t9
9>9X9w9
90:7:
90:u:
909M9V9]9v9
909n9
909R9
91:B:
91:o:
91999@9F9L9z9
919G9f9y9
919g9n9
919I9a9y9
919Z9x9
92:f:
929<9V9u9
929D9N9Y9f9m9t9{9
929E9i9
929h9o9
929I9R9w9
929K9
929L9S9
929T9
93:h:
93:j:
93:Q:
939>9K9R9Y9k9}9
939B9
939E9O9t9
93ud!
94:k:
949`9
949`9q9
949G9Q9V9g9
949J9i9|9
949j9q9
949r9
949s9
95:\:n:
95:<:
95:P:
959D9
959D9t9
959F9j9
959H9b9y9
96:=:
96:>:W:
96:C:
96:j:s:x:
96:Z:r:
969[9n9
969e9
969x9
97:~:
97:>:
97:D:
97:o:
97:Q:p:
97:w:
979\9v9
979>9
979o9
979S9
98:?:
98:\:t:
98:f:
98:t:
989n9u9
989P9i9
989R9s9
989v9
989X9
99!#Z
99:@:
99:D:O:|:
99:e:
99\$0t
9'9~9
9-9<9w9
9'9>9K9i9q9~9
9'939[9
999O9
999o9v9
999R9
999R9Y9y9
9'9E9
9-9F9
9-9F9M9m9
9'9I9
9'9J9
9-9L9k9
9-9Q9i9
9-9W9R:
9-9z9
9A:g:
9A9e9}9
9A9H9O9o9
9A9X9_9o9
9A9Y9
9B:O:
9B:W:
9B9^9-:4:
9B9i9
9b9i9
9b9o9
9B9w9
9b9x9
9B9X9w9
9C:x:
9C9g9
9D:d:
9D:K:
9D9l9
9D9W9
9E9[9z9
9E9_9h9w9
9e9l9
9E9O9V9v9
9F9_9
9f9|9
9f9m9
9F9Q9X9_9
9F9Y9
9G:S:
9G:T:x:
9G|~M
9G9[9f9o9}9
9G9]9
9G9h9
9H:c:
9H9~9
9H9a9z9
9H9f9
9H9O9
9H9O9V9]9s9
9J9~9
9J9n9
9J9Q9X9x9
9K:b:
9K:w:
9K0t?9K8t:9K<t5
9K9d9
9L9_9
9l9s9
9M:e:w:
9M:Z:~:
9M9}9
9M9k9
9N:g:
9N9q9
9O$vP3
9O:j:
9O9h9
9O9l9{9
9O9s9
9O9V9]9d9z9
9O9Z9_9
9P$v4
9P:[:`:y:
9P:x:
9P9]9
9P9g9p9
9P9n9
9p9w9
9Q tQ9Q$tL
9Q,t h
9Q,tP
9Q:V:l:
9Q}%Q
9Q9^9
9Q9}9
9Q9u9
9R:r:
9R9h9
9r9y9
9R9Z9_9
9S9`9{9
9S9q9x9
9Se<O
9T:^:m:
9t9{9
9t9~9
9T9a9
9U:\:
9U9':0:L:U:
9u9|9
9V9^9w9
9V9i9
9V9q9
9W9i9
9X$vB
9Y,tg9]
9Y,tQ
9Y,tS9]
9Y:o:
9Y9w9
9z9::
9Z9~9
A$;A(
A$9Y,u
A&.EI'
A0;B@
AActivationUser
AccessControlFlags
AcquireSRWLockExclusive
AcquireSRWLockShared
Action
action
Action
activatibleClassId
Activation
Activation\Data
Activation\Data\
ActivationKey
ActivationKey\
ActivationStatics::ActivateInstance
ActivationStatics::ctor
ActivationStatics::dtor
ActivationStatics::Exists
ActivationStatics::ExistsByActivationKey
ActivationStatics::Find
ActivationStatics::TryGet
ActivationStatics::TryGetByActivationKey
ActivationUser
ActivationUser\Data
ActivationUser\Data\
ActivationUserStatics::ActivateInstance
ActivationUserStatics::ctor
ActivationUserStatics::dtor
ActivationUserStatics::Exists
ActivationUserStatics::ExistsByActivation
ActivationUserStatics::ExistsByUser
ActivationUserStatics::ExistsByUserAndActivation
ActivationUserStatics::Find
ActivationUserStatics::FindByActivation
ActivationUserStatics::FindByUser
ActivationUserStatics::TryGet
ActivationUserStatics::TryGetByUserAndActivation
ActivityError
ActivityFailure
ActivityIntermediateStop
ActivityStoppedAutomatically
After:DeploymentJournalSize
After:DeploymentSize
After:MachineJournalSize
After:MachineSize
Ah;Qt|
ai5sc
Analyze
ANALYZE;
Analyze_Incremental
Aonecore\base\appmodel\staterepository\winrt\client\lib\notificationchannelsshutdown.cpp
api-ms-win-appmodel-runtime-internal-l1-1-1.dll
api-ms-win-appmodel-runtime-internal-l1-1-3.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l2-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-psapi-l1-1-0.dll
api-ms-win-core-realtime-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-1.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-windowserrorreporting-l1-1-1.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-accesshlpr-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-lsalookup-l1-1-0.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-service-core-l1-1-0.dll
ApiSetQueryApiSetPresence
AppExecutionAlias
AppExecutionAliasStatics::ActivateInstance
AppExecutionAliasStatics::ctor
AppExecutionAliasStatics::dtor
AppExecutionAliasStatics::Exists
AppExecutionAliasStatics::ExistsByAlias
AppExecutionAliasStatics::ExistsByAliasAndExtension
AppExecutionAliasStatics::ExistsByExtension
AppExecutionAliasStatics::ExistsByUserAndAlias
AppExecutionAliasStatics::Find
AppExecutionAliasStatics::FindByAlias
AppExecutionAliasStatics::FindByExtension
AppExecutionAliasStatics::FindByUserAndAlias
AppExecutionAliasStatics::FindByUserAndAliasAndNotDisabled_SortedByEnabledAndInstallTime
AppExecutionAliasStatics::FindByUserAndApplicationUserModelId
AppExecutionAliasStatics::Get
AppExecutionAliasStatics::GetByAliasAndExtension
AppExecutionAliasStatics::TryGet
AppExecutionAliasStatics::TryGetByAliasAndExtension
AppExecutionAliasUser
AppExecutionAliasUserStatics::ActivateInstance
AppExecutionAliasUserStatics::Add
AppExecutionAliasUserStatics::ctor
AppExecutionAliasUserStatics::Delete
AppExecutionAliasUserStatics::DeleteByApplicationIdentityAndUser
AppExecutionAliasUserStatics::dtor
AppExecutionAliasUserStatics::Exists
AppExecutionAliasUserStatics::ExistsByApplicationIdentity
AppExecutionAliasUserStatics::ExistsByApplicationIdentityAndUser
AppExecutionAliasUserStatics::ExistsByUser
AppExecutionAliasUserStatics::Find
AppExecutionAliasUserStatics::FindByApplicationIdentity
AppExecutionAliasUserStatics::FindByUser
AppExecutionAliasUserStatics::Get
AppExecutionAliasUserStatics::GetByApplicationIdentityAndUser
AppExecutionAliasUserStatics::TryGet
AppExecutionAliasUserStatics::TryGetByApplicationIdentityAndUser
AppExecutionAliasUserStatics::Update
AppExtension
AppExtensionHost
AppExtensionHostStatics::ActivateInstance
AppExtensionHostStatics::ctor
AppExtensionHostStatics::dtor
AppExtensionHostStatics::Exists
AppExtensionHostStatics::ExistsByExtension
AppExtensionHostStatics::ExistsByExtensionAndName
AppExtensionHostStatics::ExistsByUserAndApplicationUserModelIdAndName
AppExtensionHostStatics::Find
AppExtensionHostStatics::FindByExtension
AppExtensionHostStatics::Get
AppExtensionHostStatics::GetByExtensionAndName
AppExtensionHostStatics::TryGet
AppExtensionHostStatics::TryGetByExtensionAndName
AppExtensionStatics::ActivateInstance
AppExtensionStatics::ctor
AppExtensionStatics::dtor
AppExtensionStatics::Exists
AppExtensionStatics::ExistsByExtension
AppExtensionStatics::ExistsByExtensionAndName
AppExtensionStatics::ExistsByName
AppExtensionStatics::Find
AppExtensionStatics::FindByExtension
AppExtensionStatics::FindByName
AppExtensionStatics::FindByUserOrDefaultAccountAndName
AppExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndName
AppExtensionStatics::Get
AppExtensionStatics::GetByExtensionAndName
AppExtensionStatics::TryGet
AppExtensionStatics::TryGetByExtensionAndName
AppInstaller
AppInstallerStatics::ActivateInstance
AppInstallerStatics::ctor
AppInstallerStatics::dtor
AppInstallerStatics::Exists
AppInstallerStatics::ExistsByUri
AppInstallerStatics::Find
AppInstallerStatics::Get
AppInstallerStatics::GetByUri
AppInstallerStatics::TryGet
AppInstallerStatics::TryGetByUri
Application
Application\
Application\Data
Application\Data\
Application\Index\Package
ApplicationAndCategory
ApplicationAndCategory\
ApplicationBackgroundTask
ApplicationBackgroundTaskStatics::ActivateInstance
ApplicationBackgroundTaskStatics::ctor
ApplicationBackgroundTaskStatics::dtor
ApplicationBackgroundTaskStatics::Exists
ApplicationBackgroundTaskStatics::ExistsByExtension
ApplicationBackgroundTaskStatics::ExistsByExtensionAndIndex
ApplicationBackgroundTaskStatics::ExistsByType
ApplicationBackgroundTaskStatics::ExistsByTypeAndExtension
ApplicationBackgroundTaskStatics::ExistsByUserAndType
ApplicationBackgroundTaskStatics::Find
ApplicationBackgroundTaskStatics::FindByExtension
ApplicationBackgroundTaskStatics::FindByType
ApplicationBackgroundTaskStatics::FindByUserAndType
ApplicationBackgroundTaskStatics::Get
ApplicationBackgroundTaskStatics::GetByExtensionAndIndex
ApplicationBackgroundTaskStatics::GetByTypeAndExtension
ApplicationBackgroundTaskStatics::TryGet
ApplicationBackgroundTaskStatics::TryGetByExtensionAndIndex
ApplicationBackgroundTaskStatics::TryGetByTypeAndExtension
ApplicationContentUriRule
ApplicationContentUriRuleStatics::ActivateInstance
ApplicationContentUriRuleStatics::ctor
ApplicationContentUriRuleStatics::dtor
ApplicationContentUriRuleStatics::Exists
ApplicationContentUriRuleStatics::ExistsByApplication
ApplicationContentUriRuleStatics::ExistsByApplicationAndIndex
ApplicationContentUriRuleStatics::Find
ApplicationContentUriRuleStatics::FindByApplication
ApplicationContentUriRuleStatics::FindByApplication_SortedByIndex
ApplicationContentUriRuleStatics::Get
ApplicationContentUriRuleStatics::GetByApplicationAndIndex
ApplicationContentUriRuleStatics::TryGet
ApplicationContentUriRuleStatics::TryGetByApplicationAndIndex
ApplicationExtension
ApplicationExtension\Data
ApplicationExtension\Data\
ApplicationExtensionStatics::ActivateInstance
ApplicationExtensionStatics::ctor
ApplicationExtensionStatics::dtor
ApplicationExtensionStatics::Exists
ApplicationExtensionStatics::ExistsByApplication
ApplicationExtensionStatics::ExistsByApplicationAndCategory
ApplicationExtensionStatics::ExistsByApplicationAndIndex
ApplicationExtensionStatics::ExistsByCategory
ApplicationExtensionStatics::ExistsByUserAndCategory
ApplicationExtensionStatics::Find
ApplicationExtensionStatics::FindByApplication
ApplicationExtensionStatics::FindByCategory
ApplicationExtensionStatics::FindByUserAndCategory
ApplicationExtensionStatics::FindByUserAndCategoryAndApplicationUserModelId
ApplicationExtensionStatics::FindByUserAndCategoryAndPackageFullName
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndCategory
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndFileType
ApplicationExtensionStatics::FindByUserOrDefaultAccountAndPackageFullNameAndProtocolName
ApplicationExtensionStatics::Get
ApplicationExtensionStatics::GetByApplicationAndIndex
ApplicationExtensionStatics::TryGet
ApplicationExtensionStatics::TryGetByApplicationAndIndex
ApplicationExtensionStatics::TryGetByUserAndApplicationUserModelIdAndFileType
ApplicationExtensionStatics::TryGetByUserAndApplicationUserModelIdAndProtocolName
ApplicationIdentity
applicationIdentity
ApplicationIdentityStatics::ActivateInstance
ApplicationIdentityStatics::ctor
ApplicationIdentityStatics::dtor
ApplicationIdentityStatics::Exists
ApplicationIdentityStatics::ExistsByApplicationUserModelId
ApplicationIdentityStatics::Find
ApplicationIdentityStatics::TryGet
ApplicationIdentityStatics::TryGetByApplicationUserModelId
ApplicationProperty
ApplicationPropertyStatics::ActivateInstance
ApplicationPropertyStatics::ctor
ApplicationPropertyStatics::dtor
ApplicationPropertyStatics::Exists
ApplicationPropertyStatics::ExistsByApplication
ApplicationPropertyStatics::ExistsByApplicationAndIndex
ApplicationPropertyStatics::ExistsByApplicationAndName
ApplicationPropertyStatics::ExistsByName
ApplicationPropertyStatics::ExistsByUserAndName
ApplicationPropertyStatics::Find
ApplicationPropertyStatics::FindByApplication
ApplicationPropertyStatics::FindByApplicationAndName
ApplicationPropertyStatics::FindByName
ApplicationPropertyStatics::FindByUserAndName
ApplicationPropertyStatics::Get
ApplicationPropertyStatics::GetByApplicationAndIndex
ApplicationPropertyStatics::TryGet
ApplicationPropertyStatics::TryGetByApplicationAndIndex
ApplicationStatics::ActivateInstance
ApplicationStatics::ctor
ApplicationStatics::dtor
ApplicationStatics::Exists
ApplicationStatics::ExistsByApplicationUserModelId
ApplicationStatics::ExistsByEditionId
ApplicationStatics::ExistsByPackage
ApplicationStatics::ExistsByPackageAndPackageRelativeApplicationId
ApplicationStatics::ExistsByPackageFamilyName
ApplicationStatics::ExistsByPackageFullName
ApplicationStatics::ExistsByUserAndApplicationUserModelId
ApplicationStatics::ExistsByUserAndPackage
ApplicationStatics::ExistsByUserAndPackageFamily
ApplicationStatics::ExistsByUserAndPackageFamilyAndPackageType
ApplicationStatics::ExistsByUserAndPackageFamilyName
ApplicationStatics::ExistsByUserAndPackageFamilyNameAndPackageType
ApplicationStatics::ExistsByUserAndPackageFullName
ApplicationStatics::ExistsByUserOrDefaultAccountAndApplicationUserModelId
ApplicationStatics::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
ApplicationStatics::ExistsByUserOrDefaultAccountAndPackageFullName
ApplicationStatics::FindByApplicationUserModelId
ApplicationStatics::FindByEditionId
ApplicationStatics::FindByPackage
ApplicationStatics::FindByPackageFamilyName
ApplicationStatics::FindByPackageFullName
ApplicationStatics::FindByUser
ApplicationStatics::FindByUserAndAnyAppExecutionAlias
ApplicationStatics::FindByUserAndAppListEntry
ApplicationStatics::FindByUserAndPackage
ApplicationStatics::FindByUserAndPackageFamily
ApplicationStatics::FindByUserAndPackageFamilyAndPackageType
ApplicationStatics::FindByUserAndPackageFamilyName
ApplicationStatics::FindByUserAndPackageFamilyNameAndPackageType
ApplicationStatics::FindByUserAndPackageFullName
ApplicationStatics::FindByUserOrDefaultAccount
ApplicationStatics::FindByUserOrDefaultAccountAnd_ApplicationID
ApplicationStatics::FindByUserOrDefaultAccountAndApplicationUserModelId
ApplicationStatics::FindByUserOrDefaultAccountAndAppListEntry
ApplicationStatics::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
ApplicationStatics::FindByUserOrDefaultAccountAndPackageFullName
ApplicationStatics::Get
ApplicationStatics::GetApplicationTypeByUserAndApplicationUserModelId
ApplicationStatics::GetByPackageAndPackageRelativeApplicationId
ApplicationStatics::GetByUserAnd_ApplicationId
ApplicationStatics::GetByUserAndApplicationUserModelId
ApplicationStatics::GetCurrent
ApplicationStatics::TryGet
ApplicationStatics::TryGetActivationInfoByUserAndApplicationUserModelId
ApplicationStatics::TryGetByPackageAndPackageRelativeApplicationId
ApplicationUser
ApplicationUser\Data
ApplicationUser\Data\
ApplicationUser\Index\Application
ApplicationUser\Index\UserAndApplication\
ApplicationUser\Index\UserAndApplicationUserModelId\
ApplicationUserModelId
AppModelPackageRepository
AppService
AppServiceStatics::ActivateInstance
AppServiceStatics::ctor
AppServiceStatics::dtor
AppServiceStatics::Exists
AppServiceStatics::ExistsByExtension
AppServiceStatics::ExistsByExtensionAndIndex
AppServiceStatics::ExistsByName
AppServiceStatics::ExistsByNameAndExtension
AppServiceStatics::ExistsByUserAndName
AppServiceStatics::Find
AppServiceStatics::FindByExtension
AppServiceStatics::FindByName
AppServiceStatics::FindByUserAndName
AppServiceStatics::Get
AppServiceStatics::GetByExtensionAndIndex
AppServiceStatics::GetByNameAndExtension
AppServiceStatics::TryGet
AppServiceStatics::TryGetByExtensionAndIndex
AppServiceStatics::TryGetByNameAndExtension
AppUriHandler
AppUriHandler\Data
AppUriHandler\Data\
AppUriHandlerGroup
AppUriHandlerGroup\Data
AppUriHandlerGroup\Data\
AppUriHandlerGroupStatics::ActivateInstance
AppUriHandlerGroupStatics::ctor
AppUriHandlerGroupStatics::dtor
AppUriHandlerGroupStatics::Exists
AppUriHandlerGroupStatics::ExistsByExtension
AppUriHandlerGroupStatics::ExistsByName
AppUriHandlerGroupStatics::ExistsByNameAndExtension
AppUriHandlerGroupStatics::Find
AppUriHandlerGroupStatics::FindByExtension
AppUriHandlerGroupStatics::FindByName
AppUriHandlerGroupStatics::TryGet
AppUriHandlerGroupStatics::TryGetByNameAndExtension
AppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyNameAndName
AppUriHandlerStatics::ActivateInstance
AppUriHandlerStatics::ctor
AppUriHandlerStatics::dtor
AppUriHandlerStatics::Exists
AppUriHandlerStatics::ExistsByExtension
AppUriHandlerStatics::ExistsByHostName
AppUriHandlerStatics::ExistsByHostNameAndExtension
AppUriHandlerStatics::ExistsByProgID
AppUriHandlerStatics::ExistsByProgIDAndExtension
AppUriHandlerStatics::ExistsByUser
AppUriHandlerStatics::ExistsByUserAndHostName
AppUriHandlerStatics::ExistsByUserAndProgId
AppUriHandlerStatics::ExistsByUserOrDefaultAccountAndHostName
AppUriHandlerStatics::ExistsByUserOrDefaultAccountAndHostNameAndPackageFamilyName
AppUriHandlerStatics::Find
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcarded
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPackageFamilyName
AppUriHandlerStatics::FindAllLauncherInfoByUserOrDefaultAccountAndProgId
AppUriHandlerStatics::FindByExtension
AppUriHandlerStatics::FindByHostName
AppUriHandlerStatics::FindByProgID
AppUriHandlerStatics::FindByUser
AppUriHandlerStatics::FindByUserAndHostName
AppUriHandlerStatics::FindByUserAndProgId
AppUriHandlerStatics::FindByUserOrDefaultAccount
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostName
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameAndPackageFamilyName
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcarded
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPackageFamilyName
AppUriHandlerStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
AppUriHandlerStatics::Get
AppUriHandlerStatics::GetByHostNameAndExtension
AppUriHandlerStatics::GetByProgIDAndExtension
AppUriHandlerStatics::TryGet
AppUriHandlerStatics::TryGetByHostNameAndExtension
AppUriHandlerStatics::TryGetByProgIDAndExtension
AppxExtension
AppxExtensionStatics::ActivateInstance
AppxExtensionStatics::ctor
AppxExtensionStatics::dtor
AppxExtensionStatics::Exists
AppxExtensionStatics::ExistsByUser
AppxExtensionStatics::ExistsByUserAndCategory
AppxExtensionStatics::ExistsByUserAndCategoryAndKeyString
AppxExtensionStatics::ExistsByUserAndPackage
AppxExtensionStatics::ExistsByUserAndPackageAndCategory
AppxExtensionStatics::ExistsByUserAndPackageAndCategoryAndKeyString
AppxExtensionStatics::ExistsByUserAndPackageAndCategoryAndKeyStringAndRegistrationInformation
AppxExtensionStatics::Find
AppxExtensionStatics::FindByUser
AppxExtensionStatics::FindByUserAndCategory
AppxExtensionStatics::FindByUserAndCategoryAndKeyString
AppxExtensionStatics::FindByUserAndPackage
AppxExtensionStatics::FindByUserAndPackageAndCategory
AppxExtensionStatics::FindByUserAndPackageAndCategoryAndKeyString
AppxExtensionStatics::Get
AppxExtensionStatics::GetByUserAndPackageAndCategoryAndKeyStringAndRegistrationInformation
AppxExtensionStatics::TryGet
AppxExtensionStatics::TryGetByUserAndPackageAndCategoryAndKeyStringAndRegistrationInformation
AppxManifest
AppxManifestStatics::ActivateInstance
AppxManifestStatics::ctor
AppxManifestStatics::dtor
AppxManifestStatics::Exists
AppxManifestStatics::ExistsByPackage
AppxManifestStatics::Find
AppxManifestStatics::Get
AppxManifestStatics::GetByPackage
AppxManifestStatics::TryGet
AppxManifestStatics::TryGetByPackage
AppxMiniRepository
AppxPolicies
AppxRoot
Aq4B V
as.,k{n?,
Assert
assertVersion
ATTACH DATABASE '%s' AS '%s';
AutoCheckIntegrity
auttU
b#1p/
b]+t.
B0U0t0
Bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptCreateHash
BCryptDestroyHash
BCryptFinishHash
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
BD)Vu
Before:DeploymentJournalSize
Before:DeploymentSize
Before:MachineJournalSize
Before:MachineSize
BEGIN -> COMMIT;
BEGIN -> ROLLBACK;
BEGIN DEFERRED /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
BEGIN IMMEDIATE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
BiZ8S1
BoojU]
buffer error
BuildSecurityDescriptorForSharingAccess
Bundle
Bundle.Package+_WorkId duplicate keys
BundlePackage
BundlePackageStatics::ActivateInstance
BundlePackageStatics::ctor
BundlePackageStatics::dtor
BundlePackageStatics::Exists
BundlePackageStatics::ExistsByBundle
BundlePackageStatics::ExistsByBundleAndVersion
BundlePackageStatics::ExistsByBundleAndVersionAndArchitecture
BundlePackageStatics::ExistsByBundleAndVersionAndArchitectureAndResourceId
BundlePackageStatics::ExistsByPackageFamilyNameAndResourceId
BundlePackageStatics::ExistsByPackageType
BundlePackageStatics::ExistsByPackageTypeAndBundle
BundlePackageStatics::Find
BundlePackageStatics::FindByBundle
BundlePackageStatics::FindByBundleAndVersion
BundlePackageStatics::FindByBundleAndVersionAndArchitecture
BundlePackageStatics::FindByPackageType
BundlePackageStatics::FindByPackageTypeAndBundle
BundlePackageStatics::Get
BundlePackageStatics::GetByBundleAndVersionAndArchitectureAndResourceId
BundlePackageStatics::TryGet
BundlePackageStatics::TryGetByBundleAndVersionAndArchitectureAndResourceId
BundleResource
BundleResourceStatics::ActivateInstance
BundleResourceStatics::ctor
BundleResourceStatics::dtor
BundleResourceStatics::Exists
BundleResourceStatics::ExistsByBundlePackage
BundleResourceStatics::Find
BundleResourceStatics::FindByBundlePackage
BundleResourceStatics::Get
BundleResourceStatics::TryGet
BundleStatics::ActivateInstance
BundleStatics::ctor
BundleStatics::dtor
BundleStatics::Exists
BundleStatics::ExistsByPackage
BundleStatics::Find
BundleStatics::Get
BundleStatics::GetByPackage
BundleStatics::TryGet
BundleStatics::TryGetByPackage
busy_timeout
BusyCount
BusyDelayBetweenRetries
BusyMaxTimeout
BusyTimeout
C ;F t(
C ;G u
C ;G(u
C$;F$t(
C$;G$t%
C$;G$t0
C$;G,t(
C(;F(u
C,;A@
C,;F,t(
C<;{0
C0;A@
C0;F0u
C0_^[]
C4;F4t(
Cache.Count
Cache.Hits
Cache.Misses
Cache_CheckAllCascadingInMachinePartition
Cache_Initialize
Cache_Shutdown
Cache_Update
Cache_Update_SRJournalEntry
CacheActivation
CacheActivationUser
CacheApplication
CacheApplicationExtension
CacheAppUriHandler
CacheAppUriHandlerGroup
CacheDynamicAppUriHandler
CacheDynamicAppUriHandlerGroup
CacheFileTypeAssociation
CacheHit
CacheHostRuntime
CacheMiss
CachePackage
CachePackageExtension
CachePackageExternalLocation
CachePackageFamily
CachePackageMachineStatus
CachePackageUser
CachePackageUserStatus
CacheProtocol
CacheSpill
CacheUsed
CacheUser
CacheWrite
callContext
CallContext:[%hs] 
CallerProcessId
cannot start a transaction within a transaction
Category
Category\
CD;FPt0
cfK#Z
changeid_next_value
changeid_next_value() failed
ChannelName
Check
CheckAllCascadingInDeploymentPartition
CheckAllCascadingInMachinePartition
Checkpoint
Checkpoint() error 0x%08X in _Checkpoint([%u]=%s)
CheckpointInterval
CheckpointLastPerformed
CheckpointMaxClockDelta
CheckpointMode
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
Classes\CLSID\{AA00FB1F-4EC7-4b09-BDC1-E5D88D291440}
Clear
ClientId
CloseHandle
CloseThreadpoolTimer
CoCreateFreeThreadedMarshaler
CoCreateGuid
CoCreateInstance
CoDisconnectContext
CoGetCallContext
CoImpersonateClient
combase.dll
CommandLine
COMMIT /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
CompanyName
CompareStringOrdinal
compress
Compress(x[,level]) error: Invalid level (%d)
Compress(x[,level]) error: Invalid type for level (%d)
ConnectedSet
ConnectedSetPackageFamily
ConnectedSetPackageFamilyStatics::ActivateInstance
ConnectedSetPackageFamilyStatics::Add
ConnectedSetPackageFamilyStatics::ctor
ConnectedSetPackageFamilyStatics::Delete
ConnectedSetPackageFamilyStatics::DeleteByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::dtor
ConnectedSetPackageFamilyStatics::Exists
ConnectedSetPackageFamilyStatics::ExistsByConnectedSet
ConnectedSetPackageFamilyStatics::ExistsByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::Find
ConnectedSetPackageFamilyStatics::FindByConnectedSet
ConnectedSetPackageFamilyStatics::TryGet
ConnectedSetPackageFamilyStatics::TryGetByConnectedSetAndPackageFamily
ConnectedSetPackageFamilyStatics::Update
ConnectedSetStatics::ActivateInstance
ConnectedSetStatics::Add
ConnectedSetStatics::ctor
ConnectedSetStatics::Delete
ConnectedSetStatics::DeleteByName
ConnectedSetStatics::dtor
ConnectedSetStatics::Exists
ConnectedSetStatics::ExistsByName
ConnectedSetStatics::Find
ConnectedSetStatics::TryGet
ConnectedSetStatics::TryGetByName
ConnectedSetStatics::Update
ContentGroup
ContentGroupFile
ContentGroupFileStatics::ActivateInstance
ContentGroupFileStatics::ctor
ContentGroupFileStatics::dtor
ContentGroupFileStatics::Exists
ContentGroupFileStatics::ExistsByContentGroup
ContentGroupFileStatics::ExistsByContentGroupAndFile
ContentGroupFileStatics::Find
ContentGroupFileStatics::FindByContentGroup
ContentGroupFileStatics::Get
ContentGroupFileStatics::GetByContentGroupAndFile
ContentGroupFileStatics::TryGet
ContentGroupFileStatics::TryGetByContentGroupAndFile
ContentGroupStatics::ActivateInstance
ContentGroupStatics::ctor
ContentGroupStatics::dtor
ContentGroupStatics::Exists
ContentGroupStatics::ExistsByPackage
ContentGroupStatics::ExistsByPackageAndIndex
ContentGroupStatics::ExistsByPackageAndName
ContentGroupStatics::Find
ContentGroupStatics::FindByPackage
ContentGroupStatics::Get
ContentGroupStatics::GetByPackageAndIndex
ContentGroupStatics::GetByPackageAndName
ContentGroupStatics::TryGet
ContentGroupStatics::TryGetByPackageAndIndex
ContentGroupStatics::TryGetByPackageAndName
Context
ConvertSidToStringSidW
ConvertStringSecurityDescriptorToSecurityDescriptorW
ConvertStringSidToSidW
CopySid
CoRegisterClassObject
CoResumeClassObjects
CoRevertToSelf
CoRevokeClassObject
CortanaListenUIApp_1.1.0.0_neutral_neutral_cw5n1h2txyewy
CoTaskMemAlloc
CoTaskMemFree
CouldMultiUserAppsBehaviorBePossibleForPackage
count
Count
CountOfErrorsCorrected
CountOfErrorsDetected
Cpu:%d%s Io:%d%s Mem:%d%s
CpuPriority
CreateDatabase_Deployment
CreateDatabase_Machine
CreatedSchemaVersion
CreateEventW
CreateFileW
CreateMutexExW
CreateRepository
CreateSemaphoreExW
CreateThreadpoolTimer
CreateWellKnownSid
Critical
currentContextId
currentContextMessage
currentContextName
CustomInstall
CustomInstallProcess
CustomInstallProcessStatics::ActivateInstance
CustomInstallProcessStatics::ctor
CustomInstallProcessStatics::dtor
CustomInstallProcessStatics::Exists
CustomInstallProcessStatics::ExistsByCustomInstall
CustomInstallProcessStatics::ExistsByCustomInstallAndIndex
CustomInstallProcessStatics::Find
CustomInstallProcessStatics::FindByCustomInstall
CustomInstallProcessStatics::FindByCustomInstallAnd_WorkId
CustomInstallProcessStatics::TryGet
CustomInstallProcessStatics::TryGetByCustomInstallAndIndex
CustomInstallProcessUserStatus
CustomInstallProcessUserStatusStatics::ActivateInstance
CustomInstallProcessUserStatusStatics::ctor
CustomInstallProcessUserStatusStatics::dtor
CustomInstallProcessUserStatusStatics::Exists
CustomInstallProcessUserStatusStatics::ExistsByCustomInstallProcess
CustomInstallProcessUserStatusStatics::ExistsByUser
CustomInstallProcessUserStatusStatics::ExistsByUserAndCustomInstallProcess
CustomInstallProcessUserStatusStatics::Find
CustomInstallProcessUserStatusStatics::FindByUser
CustomInstallProcessUserStatusStatics::TryGet
CustomInstallProcessUserStatusStatics::TryGetByCustomInstallProcess
CustomInstallProcessUserStatusStatics::TryGetByUserAndCustomInstallProcess
CustomInstallProcessUserStatusStatics::TryGetByUserAndCustomInstallProcessAnd_WorkId
CustomInstallStatics::ActivateInstance
CustomInstallStatics::ctor
CustomInstallStatics::dtor
CustomInstallStatics::Exists
CustomInstallStatics::ExistsByPackageExtension
CustomInstallStatics::ExistsByPackageExtensionAndVerb
CustomInstallStatics::Find
CustomInstallStatics::FindByPackageExtension
CustomInstallStatics::TryGet
CustomInstallStatics::TryGetByPackageExtensionAndVerb
CustomInstallWork
CustomInstallWorkStatics::ActivateInstance
CustomInstallWorkStatics::Add
CustomInstallWorkStatics::ClearWorkByWorkId
CustomInstallWorkStatics::ctor
CustomInstallWorkStatics::Delete
CustomInstallWorkStatics::DeleteByUserAndPackageAndIndex
CustomInstallWorkStatics::DeleteByUserAndPackageAndName
CustomInstallWorkStatics::DeleteByWorkId
CustomInstallWorkStatics::dtor
CustomInstallWorkStatics::Exists
CustomInstallWorkStatics::ExistsByUser
CustomInstallWorkStatics::ExistsByUserAndPackage
CustomInstallWorkStatics::ExistsByUserAndPackageAndIndex
CustomInstallWorkStatics::ExistsByUserAndPackageAndName
CustomInstallWorkStatics::Find
CustomInstallWorkStatics::FindByUser
CustomInstallWorkStatics::FindByUserAndPackage
CustomInstallWorkStatics::FindByUserAndPackageAnd_WorkId
CustomInstallWorkStatics::TryGet
CustomInstallWorkStatics::TryGetByUserAndPackageAndIndex
CustomInstallWorkStatics::TryGetByUserAndPackageAndName
CustomInstallWorkStatics::Update
CustomInstallWorkStatics::UpdateWorkId
D$ (j
D$ |D
D$ 9D$
D$ h6
D$ hc
D$ j,
D$ p,
D$ Ph4X
D$ Pj
D$ PQ
D$ PQQ
D$ PV
D$ SP
D$ WRP
D$$ "
D$$ ]
D$$ ^
D$$ _
D$$ Q
D$$$,
D$$(\
D$$(R
D$$,$
D$$,|
D$$@,
D$$`N
D$$`W
D$$|l
D$$<g
D$$0(
D$$0\
D$$0D
D$$4{
D$$8J
D$$DA
D$$dm
D$$Dr
D$$Dv
D$$h~
D$$hJ
D$$hO
D$$hU
D$$L!
D$$Lm
D$$Ln
D$$P[
D$$p]
D$$P^
D$$P}
D$$Pg
D$$pm
D$$PQQWV
D$$PV
D$$xq
D$$xW
D$$Xy
D$( H
D$(!\$$
D$($+
D$((p
D$(,C
D$(,E
D$(,K
D$(@l
D$(@Q
D$(\~
D$(\C
D$(\V
D$(|i
D$(|l
D$(|x
D$(+D$,
D$(<U
D$(4:
D$(D|
D$(dE
D$(hI
D$(Hi
D$(l,
D$(Lh
D$(Pj
D$(pP
D$(PQ
D$(PS
D$(PV
D$(SP
D$(SPj
D$(xG
D$(xH
D$(xj
D$(XK
D$(xp
D$(xT
D$,,]
D$,0b
D$,f9
D$,LG
D$,p^
D$,Pj
D$,SP
D$,t6
D$,TX
D$,Vh
D$@9D$
D$@F;
D$@jdY
D$@Pj
D$@PQ
D$@PQQ
D$@SVW
D$\PR
D$\PV
D$`G;
D$`Pj
D$|Rh
D$|T L,Q
D$<85
D$<9D$
D$<jdY
D$<Pj
D$<SQ
D$<X4
D$0 X
D$0!|$4P
D$0Pj
D$0PQ
D$0SP
D$4 6
D$4(t
D$4@,
D$4\+
D$4|@
D$48l
D$4Hk
D$4Hw
D$4p6
D$4Pj
D$4Pj*hp[
D$4SP
D$4X3
D$4xy
D$8Pj
D$8SP
D$8X~
D$D9D$ 
D$D9D$ r
D$DjdY
D$DPj
D$DPQ
D$dPQQ
D$DWP
D$Hh6
D$hPj
D$HPj
D$hPj
D$HPj
D$hPj
D$HPj
D$HPQ
D$HPQQ
D$HPV
D$HQP
D$L9D$
D$LPQQ
D$lPQQ
D$LPQQ
D$P9D$
D$PF;
D$pF;
D$PF;
D$pF;
D$PF;
D$pF;
D$pG;
D$PG;
D$PPhU3
D$pPj
D$PPj
D$pPj
D$PPj
D$PPV
D$PQP
D$PSVW
D$pWP
D$Tf9
D$tjdY
D$TPQQ
D$XF;
D$xh6
D$XPj
D$XPQQ
D$XWj
D:(A;;GA;;;WD)
d0n0}0
data error
Data\
Database
Database.Checkpoint
DatabaseCache.Add
DatabaseCache.Get
DatabaseCache.Lifespan
DatabaseConnection
DatabaseCorruptionFirstDetectedUptime
DatabaseCorruptionFirstDetectedWhen
DatabaseCorruptionLastReported
DatabasePtr
DatabaseStatisticsUpdateInterval
DatabaseStatisticsUpdateMaintenanceTaskInterval
DatabaseStatisticsUpdateMaxClockDelta
DbzCP
DC,-~
DebugBreak
DecodePointer
DefaultTile
DefaultTileStatics::ActivateInstance
DefaultTileStatics::ctor
DefaultTileStatics::dtor
DefaultTileStatics::Exists
DefaultTileStatics::ExistsByApplication
DefaultTileStatics::Find
DefaultTileStatics::Get
DefaultTileStatics::GetByApplication
DefaultTileStatics::TryGet
DefaultTileStatics::TryGetByApplication
DelayLoadFailureHook
DELETE
DELETE FROM %s WHERE _WorkId=0;
DELETE FROM %s WHERE _WorkId>0 AND _WorkId<>0;
DELETE FROM %s WHERE WhenOccurred<=? AND _WorkId=0;
DELETE FROM Activation WHERE (_ActivationID NOT IN (SELECT Activation FROM ActivationUser)) AND (_ActivationID NOT IN (SELECT Activation FROM Application)) AND (_ActivationID NOT IN (SELECT Activation FROM ApplicationExtension)) AND (_ActivationID NOT IN (SELECT Activation FROM PackageExtension));
DELETE FROM ActivationUser WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM ActivationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=?;
DELETE FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=?;
DELETE FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppInstaller WHERE (_AppInstallerID NOT IN (SELECT AppInstaller FROM PackageAppInstaller));
DELETE FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationIdentity WHERE (ApplicationUserModelId NOT IN (SELECT ApplicationUserModelId FROM Application)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM AppExecutionAliasUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM PrimaryTileUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournal)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournalArchive)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SecondaryTileUser));
DELETE FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
DELETE FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
DELETE FROM ConnectedSet WHERE _ConnectedSetID=?;
DELETE FROM ConnectedSet WHERE Name=?;
DELETE FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
DELETE FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=?;
DELETE FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=?;
DELETE FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
DELETE FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
DELETE FROM CustomInstall WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM CustomInstallProcess WHERE (CustomInstall>0) AND (CustomInstall NOT IN (SELECT _CustomInstallID FROM CustomInstall));
DELETE FROM CustomInstallProcessUserStatus WHERE (CustomInstallProcess>0) AND (CustomInstallProcess NOT IN (SELECT _CustomInstallProcessID FROM CustomInstallProcess));
DELETE FROM CustomInstallProcessUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0;
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
DELETE FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
DELETE FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=?;
DELETE FROM DynamicAppUriHandler WHERE HostName=? AND DynamicAppUriHandlerGroup=?;
DELETE FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=?;
DELETE FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=?;
DELETE FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=?;
DELETE FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Enterprise WHERE (_EnterpriseID NOT IN (SELECT Enterprise FROM Package));
DELETE FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
DELETE FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
DELETE FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
DELETE FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
DELETE FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
DELETE FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
DELETE FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
DELETE FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamily WHERE (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ConnectedSetPackageFamily)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM DynamicAppUriHandlerGroup)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM EndOfLifePackage)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM Package)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyPolicy)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyUser)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageIdentity)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ProvisionedPackageExclude)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournal)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournalArchive));
DELETE FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0;
DELETE FROM PackageFamilyPolicy WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
DELETE FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=?;
DELETE FROM PackageFamilyUserResource WHERE PackageFamilyUser=? AND ResourceId=?;
DELETE FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageIdentity WHERE (PackageFullName NOT IN (SELECT PackageFullName FROM Package)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM DeploymentHistory)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageMachineStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageSuperceded)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageUserStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackage)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackageDeleted)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournal)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournalArchive));
DELETE FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageLocation WHERE Package IN (SELECT Package FROM PackageLocation WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PackageMachineStatus AS pmsINNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentityWHERE pi.PackageFullName=?;
DELETE FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0;
DELETE FROM PackagePolicy WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0;
DELETE FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE _PackageUserID IN (SELECT _PackageUserID FROM PackageUser INNER JOIN (SELECT User AS U, Package AS P FROM PackageUser WHERE _WorkId<0 AND _WorkId<>0) WHERE _WorkId=0 AND User=U AND Package=P);
DELETE FROM PackageUserStatus AS pusINNER JOIN User AS u ON u._UserID=pus.UserINNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentityWHERE u.UserSid=? AND pi.PackageFullName=?;
DELETE FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0;
DELETE FROM PrimaryTile WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTile WHERE Application=? AND _WorkId=0;
DELETE FROM PrimaryTile WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTile WHERE Application=? AND TileId=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserId IN (SELECT _PrimaryTileUserId FROM PrimaryTileUser INNER JOIN (SELECT ApplicationIdentity AS ai, User AS usr FROM PrimaryTileUser WHERE _WorkId<0 AND _WorkId<>0 ) WHERE _WorkId=0 AND ApplicationIdentity=ai AND User=usr);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM PrimaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM PrimaryTileUser WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE _WorkId=0 AND TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId<0 AND _WorkId<>0)) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE TileUniqueId=?1 AND (_WorkId=0 OR _WorkId=?2)) AND (_WorkId=0 OR _WorkId=?2);
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE TileUniqueId=?1 AND _WorkId=0) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0;
DELETE FROM SecondaryTile WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
DELETE FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
DELETE FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM SecondaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
DELETE FROM Source.Bundle WHERE _BundleID IN ( SELECT b._BundleId FROM Source.Bundle AS b WHERE b.Package NOT IN (SELECT p._PackageID FROM Source.Package AS p) UNION SELECT b._BundleID FROM Source.Bundle AS b INNER JOIN Source.Package AS p ON p._PackageID=b.Package WHERE p.SourceBundle<>b._BundleID);
DELETE FROM SRJournal WHERE (_WorkId=0 OR _WorkId=?);
DELETE FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRJournal WHERE _WorkId=0;
DELETE FROM SRJournal;
DELETE FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM User WHERE (_UserID NOT IN (SELECT User FROM ActivationUser)) AND (_UserID NOT IN (SELECT User FROM AppExecutionAliasUser)) AND (_UserID NOT IN (SELECT User FROM AppxExtension)) AND (_UserID NOT IN (SELECT User FROM CustomInstallProcessUserStatus)) AND (_UserID NOT IN (SELECT User FROM CustomInstallWork)) AND (_UserID NOT IN (SELECT User FROM DependencyGraph)) AND (_UserID NOT IN (SELECT User FROM DeploymentHistory)) AND (_UserID NOT IN (SELECT User FROM DynamicAppUriHandlerGroup)) AND (_UserID NOT IN (SELECT User FROM MrtUserPri)) AND (_UserID NOT IN (SELECT User FROM PackageExternalLocation)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyPolicy)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyUser)) AND (_UserID NOT IN (SELECT User FROM PackagePolicy)) AND (_UserID NOT IN (SELECT User FROM PackageSuperceded)) AND (_UserID NOT IN (SELECT User FROM PackageUser)) AND (_UserID NOT IN (SELECT User FROM PackageUserStatus)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUser)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM ProvisionedPackageExclude)) AND (_UserID NOT IN (SELECT User FROM SRJournal)) AND (_UserID NOT IN (SELECT User FROM SRJournalArchive)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUser)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM WowDependencyGraph));
DELETE FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM XboxPackage WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0;
DELETE FROM XboxPackage WHERE EditionId IN (SELECT EditionId FROM XboxPackage WHERE _WorkId<0 AND _WorkId<>0) AND _WorkId=0;
DELETE FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM XboxPackage WHERE EditionId=? AND _WorkId=0;
DeleteCriticalSection
Deleted
DeleteFileW
Dependency
DependencyGraph
DependencyGraphStatics::ActivateInstance
DependencyGraphStatics::ctor
DependencyGraphStatics::dtor
DependencyGraphStatics::Exists
DependencyGraphStatics::ExistsBySupplierPackage
DependencyGraphStatics::ExistsByUser
DependencyGraphStatics::ExistsByUserAndDependentPackage
DependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyType
DependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraphStatics::ExistsByUserAndDependentPackageAndHasExternalLocation
DependencyGraphStatics::ExistsByUserAndDependentPackageAndIndex
DependencyGraphStatics::ExistsByUserAndDependentPackageAndSupplierPackage
DependencyGraphStatics::ExistsByUserAndDependentPackageAndSupplierPackageFamilyName
DependencyGraphStatics::ExistsByUserAndDependentPackageFullNameAndHasExternalLocation
DependencyGraphStatics::ExistsByUserAndSupplierPackage
DependencyGraphStatics::Find
DependencyGraphStatics::FindBySupplierPackage
DependencyGraphStatics::FindByUser
DependencyGraphStatics::FindByUserAndDependentPackage
DependencyGraphStatics::FindByUserAndDependentPackage_SortedByIndex
DependencyGraphStatics::FindByUserAndDependentPackageAndDependencyType
DependencyGraphStatics::FindByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID
DependencyGraphStatics::FindByUserAndDependentPackageAndIndex
DependencyGraphStatics::FindByUserAndSupplierPackage
DependencyGraphStatics::Get
DependencyGraphStatics::GetByUserAndDependentPackageAndSupplierPackage
DependencyGraphStatics::GetMainPackageDependencyByUserAndSupplierPackage
DependencyGraphStatics::TryGet
DependencyGraphStatics::TryGetByUserAndDependentPackageAndSupplierPackage
DependencyStatics::ActivateInstance
DependencyStatics::ctor
DependencyStatics::dtor
DependencyStatics::Exists
DependencyStatics::ExistsByDependentPackage
DependencyStatics::ExistsByDependentPackageAndIndex
DependencyStatics::ExistsByDependentPackageAndName
DependencyStatics::ExistsByName
DependencyStatics::Find
DependencyStatics::FindByDependentPackage
DependencyStatics::FindByName
DependencyStatics::Get
DependencyStatics::GetByDependentPackageAndIndex
DependencyStatics::GetByDependentPackageAndName
DependencyStatics::TryGet
DependencyStatics::TryGetByDependentPackageAndIndex
DependencyStatics::TryGetByDependentPackageAndName
DependentPackage
Deployment
DeploymentDatabase
DeploymentDatabase_Pages
DeploymentDatabase_PagesCheckpointed
DeploymentDatabaseAutoCheckpoint
DeploymentDatabaseCheckpointThreshold
DeploymentDatabaseFileChunkSize
DeploymentDatabaseJournalSizeLimit
DeploymentDatabaseOptions
DeploymentDatabasePageSize
DeploymentDatabaseStatisticsLastUpdated
DeploymentDisposition
DeploymentHistory
DeploymentHistoryStatics::ActivateInstance
DeploymentHistoryStatics::ctor
DeploymentHistoryStatics::dtor
DeploymentHistoryStatics::Exists
DeploymentHistoryStatics::ExistsByPackageIdentity
DeploymentHistoryStatics::ExistsByUser
DeploymentHistoryStatics::ExistsByWhenOccurred
DeploymentHistoryStatics::Find
DeploymentHistoryStatics::FindByPackageIdentity
DeploymentHistoryStatics::FindByUser
DeploymentHistoryStatics::FindByWhenOccurred
DeploymentHistoryStatics::Get
DeploymentHistoryStatics::TryGet
DeploymentJournalSize_After
DeploymentJournalSize_Before
DeploymentSize_After
DeploymentSize_Before
DETACH DATABASE '%s';
Disposition
DoMaintenance
DoRepair
DownlevelMachineDatabase
DownlevelMachineDatabaseAutoCheckpoint
DownlevelMachineDatabaseCheckpointThreshold
DownlevelMachineDatabaseFileChunkSize
DownlevelMachineDatabaseJournalSizeLimit
DownlevelMachineDatabaseOptions
DownlevelMachineDatabasePageSize
DownlevelMachineDatabaseStatisticsLastUpdated
DROP INDEX IF EXISTS IDX_Activation_ActivationKey;CREATE UNIQUE INDEX IDX_Activation_ActivationKey ON Activation(ActivationKey) WHERE ActivationKey IS NOT NULL;DROP TRIGGER IF EXISTS TRG_IDX_Activation_ActivationKey;CREATE TRIGGER TRG_IDX_Activation_ActivationKey BEFORE INSERT ON Activation FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _ActivationID FROM Activation WHERE ActivationKey IS NEW.ActivationKey AND ActivationKey IS NOT NULL) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "Activation" violates the unique index "IDX_Activation_ActivationKey"')END;END;DROP INDEX IF EXISTS IDX_Activation_Flags_Executable_Entrypoint_RuntimeType_StartPage_ResourceGroup;CREATE UNIQUE INDEX IDX_Activation_Flags_Executable_Entrypoint_RuntimeType_StartPage_ResourceGroup ON Activation(Flags, IFNULL(HostId, ''), IFNULL(Executable, ''), IFNULL(Entrypoint, ''), IFNULL(RuntimeType, ''), IFNULL(StartPage, ''), IFNULL(ResourceGroup, ''));DROP INDEX IF EXISTS IDX_ActivationUser_User_Activation;CREATE UNIQUE INDEX IDX_ActivationUser_User_Activation ON ActivationUser(User, Activation);DROP INDEX IF EXISTS IDX_ActivationUser_Activation;CREATE INDEX IDX_ActivationUser_Activation ON ActivationUser(Activation);DROP INDEX IF EXISTS IDX_ActivationUser__WorkId;CREATE INDEX IDX_ActivationUser__WorkId ON ActivationUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppExecutionAlias_Alias_Extension;CREATE UNIQUE INDEX IDX_AppExecutionAlias_Alias_Extension ON AppExecutionAlias(Alias, Extension);DROP INDEX IF EXISTS IDX_AppExecutionAlias_Extension;CREATE INDEX IDX_AppExecutionAlias_Extension ON AppExecutionAlias(Extension);DROP INDEX IF EXISTS IDX_AppExecutionAlias__WorkId;CREATE INDEX IDX_AppExecutionAlias__WorkId ON AppExecutionAlias(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppExecutionAliasUser_ApplicationIdentity_User;CREATE UNIQUE INDEX IDX_AppExecutionAliasUser_ApplicationIdentity_User ON AppExecutionAliasUser(ApplicationIdentity, User);DROP INDEX IF EXISTS IDX_AppExecutionAliasUser_User;CREATE INDEX IDX_AppExecutionAliasUser_User ON AppExecutionAliasUser(User);DROP INDEX IF EXISTS IDX_AppExtension_Extension_Name;CREATE UNIQUE INDEX IDX_AppExtension_Extension_Name ON AppExtension(Extension, Name);DROP INDEX IF EXISTS IDX_AppExtension_Name;CREATE INDEX IDX_AppExtension_Name ON AppExtension(Name);DROP INDEX IF EXISTS IDX_AppExtension__WorkId;CREATE INDEX IDX_AppExtension__WorkId ON AppExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppExtensionHost_Extension_Name;CREATE UNIQUE INDEX IDX_AppExtensionHost_Extension_Name ON AppExtensionHost(Extension, Name);DROP INDEX IF EXISTS IDX_AppExtensionHost__WorkId;CREATE INDEX IDX_AppExtensionHost__WorkId ON AppExtensionHost(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppService_Extension_Index;CREATE UNIQUE INDEX IDX_AppService_Extension_Index ON AppService(Extension, "Index");DROP INDEX IF EXISTS IDX_AppService_Name_Extension;CREATE UNIQUE INDEX IDX_AppService_Name_Extension ON AppService(Name, Extension);DROP INDEX IF EXISTS IDX_AppService__WorkId;CREATE INDEX IDX_AppService__WorkId ON AppService(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppUriHandler_HostName_Extension;CREATE UNIQUE INDEX IDX_AppUriHandler_HostName_Extension ON AppUriHandler(HostName, Extension);DROP INDEX IF EXISTS IDX_AppUriHandler_ProgID_Extension;CREATE UNIQUE INDEX IDX_AppUriHandler_ProgID_Extension ON AppUriHandler(ProgID, Extension);DROP TRIGGER IF EXISTS TRG_IDX_AppUriHandler_ProgID_Extension;CREATE TRIGGER TRG_IDX_AppUriHandler_ProgID_Extension BEFORE INSERT ON AppUriHandler FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _AppUriHandlerID FROM AppUriHandler WHERE ProgID IS NEW.ProgID AND Extension=NEW.Extension) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "AppUriHandler" violates the unique index "IDX_AppUriHandler_ProgID_Extension"')END;END;DROP INDEX IF EXISTS IDX_AppUriHandler_Extension;CREATE INDEX IDX_AppUriHandler_Extension ON AppUriHandler(Extension);DROP INDEX IF EXISTS IDX_AppUriHandler__WorkId_Extension;CREATE INDEX IDX_AppUriHandler__WorkId_Extension ON AppUriHandler(_WorkId, Extension);DROP INDEX IF EXISTS IDX_AppUriHandler__WorkId;CREATE INDEX IDX_AppUriHandler__WorkId ON AppUriHandler(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppUriHandlerGroup_Name_Extension;CREATE UNIQUE INDEX IDX_AppUriHandlerGroup_Name_Extension ON AppUriHandlerGroup(Name, Extension);DROP INDEX IF EXISTS IDX_AppUriHandlerGroup_Extension;CREATE INDEX IDX_AppUriHandlerGroup_Extension ON AppUriHandlerGroup(Extension);DROP INDEX IF EXISTS IDX_AppUriHandlerGroup__WorkId;CREATE INDEX IDX_AppUriHandlerGroup__WorkId ON AppUriHandlerGroup(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Application_Package_PackageRelativeApplicationId;CREATE UNIQUE INDEX IDX_Application_Package_PackageRelativeApplicationId ON Application(Package, PackageRelativeApplicationId);DROP INDEX IF EXISTS IDX_Application_ApplicationUserModelId;CREATE INDEX IDX_Application_ApplicationUserModelId ON Application(ApplicationUserModelId);DROP INDEX IF EXISTS IDX_Application_EditionId;CREATE INDEX IDX_Application_EditionId ON Application(EditionId);DROP INDEX IF EXISTS IDX_Application__WorkId;CREATE INDEX IDX_Application__WorkId ON Application(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask_Extension_Index;CREATE UNIQUE INDEX IDX_ApplicationBackgroundTask_Extension_Index ON ApplicationBackgroundTask(Extension, "Index");DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask_Type_Extension;CREATE UNIQUE INDEX IDX_ApplicationBackgroundTask_Type_Extension ON ApplicationBackgroundTask(Type, Extension);DROP INDEX IF EXISTS IDX_ApplicationBackgroundTask__WorkId;CREATE INDEX IDX_ApplicationBackgroundTask__WorkId ON ApplicationBackgroundTask(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationContentUriRule_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationContentUriRule_Application_Index ON ApplicationContentUriRule(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationContentUriRule__WorkId;CREATE INDEX IDX_ApplicationContentUriRule__WorkId ON ApplicationContentUriRule(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationExtension_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationExtension_Application_Index ON ApplicationExtension(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationExtension_Application_Category;CREATE INDEX IDX_ApplicationExtension_Application_Category ON ApplicationExtension(Application, Category);DROP INDEX IF EXISTS IDX_ApplicationExtension_Category;CREATE INDEX IDX_ApplicationExtension_Category ON ApplicationExtension(Category);DROP INDEX IF EXISTS IDX_ApplicationExtension__WorkId;CREATE INDEX IDX_ApplicationExtension__WorkId ON ApplicationExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ApplicationIdentity_ApplicationUserModelId;CREATE UNIQUE INDEX IDX_ApplicationIdentity_ApplicationUserModelId ON ApplicationIdentity(ApplicationUserModelId);DROP INDEX IF EXISTS IDX_ApplicationProperty_Application_Index;CREATE UNIQUE INDEX IDX_ApplicationProperty_Application_Index ON ApplicationProperty(Application, "Index");DROP INDEX IF EXISTS IDX_ApplicationProperty_Application_Name;CREATE INDEX IDX_ApplicationProperty_Application_Name ON ApplicationProperty(Application, Name);DROP INDEX IF EXISTS IDX_ApplicationProperty_Name;CREATE INDEX IDX_ApplicationProperty_Name ON ApplicationProperty(Name);DROP INDEX IF EXISTS IDX_ApplicationProperty__WorkId;CREATE INDEX IDX_ApplicationProperty__WorkId ON ApplicationProperty(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation;CREATE UNIQUE INDEX IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation ON AppxExtension(User, Package, Category, KeyString, RegistrationInformation);DROP TRIGGER IF EXISTS TRG_IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation;CREATE TRIGGER TRG_IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation BEFORE INSERT ON AppxExtension FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _AppxExtensionID FROM AppxExtension WHERE User=NEW.User AND Package=NEW.Package AND Category=NEW.Category AND KeyString IS NEW.KeyString AND RegistrationInformation=NEW.RegistrationInformation) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "AppxExtension" violates the unique index "IDX_AppxExtension_User_Package_Category_KeyString_RegistrationInformation"')END;END;DROP INDEX IF EXISTS IDX_AppxExtension_User_Category_KeyString;CREATE INDEX IDX_AppxExtension_User_Category_KeyString ON AppxExtension(User, Category, KeyString);DROP INDEX IF EXISTS IDX_AppxExtension__WorkId;CREATE INDEX IDX_AppxExtension__WorkId ON AppxExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Bundle_Package__WorkId;CREATE UNIQUE INDEX IDX_Bundle_Package__WorkId ON Bundle(Package, _WorkId);DROP INDEX IF EXISTS IDX_Bundle__WorkId;CREATE INDEX IDX_Bundle__WorkId ON Bundle(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId;CREATE UNIQUE INDEX IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId ON BundlePackage(Bundle, Version, Architecture, ResourceId, _WorkId) WHERE Bundle<>0;DROP TRIGGER IF EXISTS TRG_IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId;CREATE TRIGGER TRG_IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId BEFORE INSERT ON BundlePackage FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _BundlePackageID FROM BundlePackage WHERE Bundle=NEW.Bundle AND Version=NEW.Version AND Architecture=NEW.Architecture AND ResourceId IS NEW.ResourceId AND _WorkId=NEW._WorkId AND Bundle<>0) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "BundlePackage" violates the unique index "IDX_BundlePackage_Bundle_Version_Architecture_ResourceId__WorkId"')END;END;DROP INDEX IF EXISTS IDX_BundlePackage_PackageType_Bundle;CREATE INDEX IDX_BundlePackage_PackageType_Bundle ON BundlePackage(PackageType, Bundle);DROP INDEX IF EXISTS IDX_BundlePackage__WorkId;CREATE INDEX IDX_BundlePackage__WorkId ON BundlePackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_BundleResource_BundlePackage;CREATE INDEX IDX_BundleResource_BundlePackage ON BundleResource(BundlePackage);DROP INDEX IF EXISTS IDX_BundleResource__WorkId;CREATE INDEX IDX_BundleResource__WorkId ON BundleResource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ConnectedSet_Name;CREATE UNIQUE INDEX IDX_ConnectedSet_Name ON ConnectedSet(Name);DROP INDEX IF EXISTS IDX_ConnectedSetPackageFamily_ConnectedSet_PackageFamily;CREATE UNIQUE INDEX IDX_ConnectedSetPackageFamily_ConnectedSet_PackageFamily ON ConnectedSetPackageFamily(ConnectedSet, PackageFamily);DROP INDEX IF EXISTS IDX_CustomInstall_PackageExtension_Verb__WorkId;CREATE UNIQUE INDEX IDX_CustomInstall_PackageExtension_Verb__WorkId ON CustomInstall(PackageExtension, Verb, _WorkId);DROP INDEX IF EXISTS IDX_CustomInstallProcess_CustomInstall_Index__WorkId;CREATE UNIQUE INDEX IDX_CustomInstallProcess_CustomInstall_Index__WorkId ON CustomInstallProcess(CustomInstall, "Index", _WorkId);DROP INDEX IF EXISTS IDX_CustomInstallProcessUserStatus_User_CustomInstallProcess;CREATE UNIQUE INDEX IDX_CustomInstallProcessUserStatus_User_CustomInstallProcess ON CustomInstallProcessUserStatus(User, CustomInstallProcess);DROP INDEX IF EXISTS IDX_CustomInstallProcessUserStatus_CustomInstallProcess;CREATE UNIQUE INDEX IDX_CustomInstallProcessUserStatus_CustomInstallProcess ON CustomInstallProcessUserStatus(CustomInstallProcess);DROP INDEX IF EXISTS IDX_CustomInstallWork_User_Package_Name__WorkId;CREATE UNIQUE INDEX IDX_CustomInstallWork_User_Package_Name__WorkId ON CustomInstallWork(User, Package, Name, _WorkId);DROP INDEX IF EXISTS IDX_CustomInstallWork_User_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_CustomInstallWork_User_Package_Index__WorkId ON CustomInstallWork(User, Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_DefaultTile_Application;CREATE UNIQUE INDEX IDX_DefaultTile_Application ON DefaultTile(Application);DROP INDEX IF EXISTS IDX_DefaultTile__WorkId;CREATE INDEX IDX_DefaultTile__WorkId ON DefaultTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Dependency_DependentPackage_Name;CREATE UNIQUE INDEX IDX_Dependency_DependentPackage_Name ON Dependency(DependentPackage, Name);DROP INDEX IF EXISTS IDX_Dependency_DependentPackage_Index;CREATE UNIQUE INDEX IDX_Dependency_DependentPackage_Index ON Dependency(DependentPackage, "Index");DROP INDEX IF EXISTS IDX_Dependency_Name;CREATE INDEX IDX_Dependency_Name ON Dependency(Name);DROP INDEX IF EXISTS IDX_Dependency__WorkId;CREATE INDEX IDX_Dependency__WorkId ON Dependency(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_SupplierPackage__WorkId;CREATE UNIQUE INDEX IDX_DependencyGraph_User_DependentPackage_SupplierPackage__WorkId ON DependencyGraph(User, DependentPackage, SupplierPackage, _WorkId);DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_Index__WorkId;CREATE INDEX IDX_DependencyGraph_User_DependentPackage_Index__WorkId ON DependencyGraph(User, DependentPackage, "Index", _WorkId);DROP INDEX IF EXISTS IDX_DependencyGraph_User_DependentPackage_DependencyType__DependencyGraphID;CREATE INDEX IDX_DependencyGraph_User_DependentPackage_DependencyType__DependencyGraphID ON DependencyGraph(User, DependentPackage, DependencyType, _DependencyGraphID);DROP INDEX IF EXISTS IDX_DependencyGraph_User_SupplierPackage;CREATE INDEX IDX_DependencyGraph_User_SupplierPackage ON DependencyGraph(User, SupplierPackage);DROP INDEX IF EXISTS IDX_DependencyGraph_SupplierPackage;CREATE INDEX IDX_DependencyGraph_SupplierPackage ON DependencyGraph(SupplierPackage);DROP INDEX IF EXISTS IDX_DependencyGraph__WorkId;CREATE INDEX IDX_DependencyGraph__WorkId ON DependencyGraph(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DeploymentHistory_PackageIdentity;CREATE INDEX IDX_DeploymentHistory_PackageIdentity ON DeploymentHistory(PackageIdentity);DROP INDEX IF EXISTS IDX_DeploymentHistory_User;CREATE INDEX IDX_DeploymentHistory_User ON DeploymentHistory(User);DROP INDEX IF EXISTS IDX_DeploymentHistory_WhenOccurred;CREATE INDEX IDX_DeploymentHistory_WhenOccurred ON DeploymentHistory(WhenOccurred);DROP INDEX IF EXISTS IDX_DeploymentHistory__WorkId;CREATE INDEX IDX_DeploymentHistory__WorkId ON DeploymentHistory(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_HostName_DynamicAppUriHandlerGroup;CREATE UNIQUE INDEX IDX_DynamicAppUriHandler_HostName_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(HostName, DynamicAppUriHandlerGroup);DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup;CREATE UNIQUE INDEX IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(ProgID, DynamicAppUriHandlerGroup);DROP TRIGGER IF EXISTS TRG_IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup;CREATE TRIGGER TRG_IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup BEFORE INSERT ON DynamicAppUriHandler FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _DynamicAppUriHandlerID FROM DynamicAppUriHandler WHERE ProgID IS NEW.ProgID AND DynamicAppUriHandlerGroup=NEW.DynamicAppUriHandlerGroup) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "DynamicAppUriHandler" violates the unique index "IDX_DynamicAppUriHandler_ProgID_DynamicAppUriHandlerGroup"')END;END;DROP INDEX IF EXISTS IDX_DynamicAppUriHandler_DynamicAppUriHandlerGroup;CREATE INDEX IDX_DynamicAppUriHandler_DynamicAppUriHandlerGroup ON DynamicAppUriHandler(DynamicAppUriHandlerGroup);DROP INDEX IF EXISTS IDX_DynamicAppUriHandlerGroup_User_PackageFamily_Name;CREATE UNIQUE INDEX IDX_DynamicAppUriHandlerGroup_User_PackageFamily_Name ON DynamicAppUriHandlerGroup(User, PackageFamily, Name);DROP INDEX IF EXISTS IDX_EndOfLifePackage_PackageFamily;CREATE UNIQUE INDEX IDX_EndOfLifePackage_PackageFamily ON EndOfLifePackage(PackageFamily);DROP INDEX IF EXISTS IDX_Enterprise_EnterpriseId;CREATE UNIQUE INDEX IDX_Enterprise_EnterpriseId ON Enterprise(EnterpriseId);DROP INDEX IF EXISTS IDX_FileTypeAssociation_Extension_Index;CREATE UNIQUE INDEX IDX_FileTypeAssociation_Extension_Index ON FileTypeAssociation(Extension, "Index");DROP INDEX IF EXISTS IDX_FileTypeAssociation_FileType_Extension;CREATE INDEX IDX_FileTypeAssociation_FileType_Extension ON FileTypeAssociation(FileType, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation_ContentType_Extension;CREATE INDEX IDX_FileTypeAssociation_ContentType_Extension ON FileTypeAssociation(ContentType, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation_ProgID_Extension;CREATE INDEX IDX_FileTypeAssociation_ProgID_Extension ON FileTypeAssociation(ProgID, Extension);DROP INDEX IF EXISTS IDX_FileTypeAssociation__WorkId;CREATE INDEX IDX_FileTypeAssociation__WorkId ON FileTypeAssociation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_HostRuntime_PackageExtension_HostId;CREATE UNIQUE INDEX IDX_HostRuntime_PackageExtension_HostId ON HostRuntime(PackageExtension, HostId);DROP INDEX IF EXISTS IDX_HostRuntime_HostId;CREATE INDEX IDX_HostRuntime_HostId ON HostRuntime(HostId);DROP INDEX IF EXISTS IDX_HostRuntime__WorkId;CREATE INDEX IDX_HostRuntime__WorkId ON HostRuntime(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MigratorPatch_PatchId;CREATE INDEX IDX_MigratorPatch_PatchId ON MigratorPatch(PatchId);DROP INDEX IF EXISTS IDX_MigratorPatch__WorkId;CREATE INDEX IDX_MigratorPatch__WorkId ON MigratorPatch(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtApplication_Application;CREATE UNIQUE INDEX IDX_MrtApplication_Application ON MrtApplication(Application);DROP INDEX IF EXISTS IDX_MrtApplication__WorkId;CREATE INDEX IDX_MrtApplication__WorkId ON MrtApplication(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtDefaultTile_DefaultTile;CREATE UNIQUE INDEX IDX_MrtDefaultTile_DefaultTile ON MrtDefaultTile(DefaultTile);DROP INDEX IF EXISTS IDX_MrtDefaultTile__WorkId;CREATE INDEX IDX_MrtDefaultTile__WorkId ON MrtDefaultTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtPackage_Package;CREATE UNIQUE INDEX IDX_MrtPackage_Package ON MrtPackage(Package);DROP INDEX IF EXISTS IDX_MrtPackage__WorkId;CREATE INDEX IDX_MrtPackage__WorkId ON MrtPackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtSharedPri_Filename;CREATE UNIQUE INDEX IDX_MrtSharedPri_Filename ON MrtSharedPri(Filename);DROP INDEX IF EXISTS IDX_MrtSharedPri_Package;CREATE INDEX IDX_MrtSharedPri_Package ON MrtSharedPri(Package);DROP INDEX IF EXISTS IDX_MrtSharedPri__WorkId;CREATE INDEX IDX_MrtSharedPri__WorkId ON MrtSharedPri(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_MrtUserPri_Package_User__WorkId;CREATE UNIQUE INDEX IDX_MrtUserPri_Package_User__WorkId ON MrtUserPri(Package, User, _WorkId);DROP INDEX IF EXISTS IDX_MrtUserPri_MrtSharedPri;CREATE INDEX IDX_MrtUserPri_MrtSharedPri ON MrtUserPri(MrtSharedPri);DROP INDEX IF EXISTS IDX_MrtUserPri_User;CREATE INDEX IDX_MrtUserPri_User ON MrtUserPri(User);DROP INDEX IF EXISTS IDX_MrtUserPri__WorkId;CREATE INDEX IDX_MrtUserPri__WorkId ON MrtUserPri(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_NamedDependency_Package_DependencyType_Index__WorkId;CREATE UNIQUE INDEX IDX_NamedDependency_Package_DependencyType_Index__WorkId ON NamedDependency(Package, DependencyType, "Index", _WorkId);DROP INDEX IF EXISTS IDX_NamedDependency__WorkId;CREATE INDEX IDX_NamedDependency__WorkId ON NamedDependency(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundle_MainBundle_Name_Publisher__WorkId;CREATE UNIQUE INDEX IDX_OptionalBundle_MainBundle_Name_Publisher__WorkId ON OptionalBundle(MainBundle, Name, Publisher, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle_Name_Publisher__WorkId;CREATE INDEX IDX_OptionalBundle_Name_Publisher__WorkId ON OptionalBundle(Name, Publisher, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle_MainBundle__WorkId;CREATE INDEX IDX_OptionalBundle_MainBundle__WorkId ON OptionalBundle(MainBundle, _WorkId);DROP INDEX IF EXISTS IDX_OptionalBundle__WorkId;CREATE INDEX IDX_OptionalBundle__WorkId ON OptionalBundle(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId;CREATE UNIQUE INDEX IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId ON OptionalBundlePackage(OptionalBundle, Version, Architecture, ResourceId, _WorkId) WHERE OptionalBundle<>0;DROP TRIGGER IF EXISTS TRG_IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId;CREATE TRIGGER TRG_IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId BEFORE INSERT ON OptionalBundlePackage FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _OptionalBundlePackageID FROM OptionalBundlePackage WHERE OptionalBundle=NEW.OptionalBundle AND Version=NEW.Version AND Architecture=NEW.Architecture AND ResourceId IS NEW.ResourceId AND _WorkId=NEW._WorkId AND OptionalBundle<>0) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "OptionalBundlePackage" violates the unique index "IDX_OptionalBundlePackage_OptionalBundle_Version_Architecture_ResourceId__WorkId"')END;END;DROP INDEX IF EXISTS IDX_OptionalBundlePackage__WorkId;CREATE INDEX IDX_OptionalBundlePackage__WorkId ON OptionalBundlePackage(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_OptionalBundleResource_OptionalBundlePackage;CREATE INDEX IDX_OptionalBundleResource_OptionalBundlePackage ON OptionalBundleResource(OptionalBundlePackage);DROP INDEX IF EXISTS IDX_OptionalBundleResource__WorkId;CREATE INDEX IDX_OptionalBundleResource__WorkId ON OptionalBundleResource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Package_PackageFullName__WorkId;CREATE UNIQUE INDEX IDX_Package_PackageFullName__WorkId ON Package(PackageFullName, _WorkId);DROP INDEX IF EXISTS IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId;CREATE UNIQUE INDEX IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId ON Package(PackageFamily, ResourceId, Architecture, Version, _WorkId);DROP TRIGGER IF EXISTS TRG_IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId;CREATE TRIGGER TRG_IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId BEFORE INSERT ON Package FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _PackageID FROM Package WHERE PackageFamily=NEW.PackageFamily AND ResourceId IS NEW.ResourceId AND Architecture=NEW.Architecture AND Version=NEW.Version AND _WorkId=NEW._WorkId) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "Package" violates the unique index "IDX_Package_PackageFamily_ResourceId_Architecture_Version__WorkId"')END;END;DROP INDEX IF EXISTS IDX_Package_PackageFamily;CREATE INDEX IDX_Package_PackageFamily ON Package(PackageFamily);DROP INDEX IF EXISTS IDX_Package_PackageFamily_PackageType_ResourceId_Version;CREATE INDEX IDX_Package_PackageFamily_PackageType_ResourceId_Version ON Package(PackageFamily, PackageType, ResourceId, Version);DROP INDEX IF EXISTS IDX_Package_SourceBundle_PackageType;CREATE INDEX IDX_Package_SourceBundle_PackageType ON Package(SourceBundle, PackageType);DROP INDEX IF EXISTS IDX_Package_EditionId;CREATE INDEX IDX_Package_EditionId ON Package(EditionId);DROP INDEX IF EXISTS IDX_Package__WorkId_PackageFamily;CREATE INDEX IDX_Package__WorkId_PackageFamily ON Package(_WorkId, PackageFamily);DROP INDEX IF EXISTS IDX_Package__WorkId;CREATE INDEX IDX_Package__WorkId ON Package(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageExtension_Package_Index;CREATE UNIQUE INDEX IDX_PackageExtension_Package_Index ON PackageExtension(Package, "Index");DROP INDEX IF EXISTS IDX_PackageExtension_Package_Category;CREATE INDEX IDX_PackageExtension_Package_Category ON PackageExtension(Package, Category);DROP INDEX IF EXISTS IDX_PackageExtension_Category;CREATE INDEX IDX_PackageExtension_Category ON PackageExtension(Category);DROP INDEX IF EXISTS IDX_PackageExtension__WorkId;CREATE INDEX IDX_PackageExtension__WorkId ON PackageExtension(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageExternalLocation_User_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageExternalLocation_User_Package__WorkId ON PackageExternalLocation(User, Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation_User__WorkId;CREATE INDEX IDX_PackageExternalLocation_User__WorkId ON PackageExternalLocation(User, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation_Package__WorkId;CREATE INDEX IDX_PackageExternalLocation_Package__WorkId ON PackageExternalLocation(Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageExternalLocation__WorkId;CREATE INDEX IDX_PackageExternalLocation__WorkId ON PackageExternalLocation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageFamily_PackageFamilyName;CREATE UNIQUE INDEX IDX_PackageFamily_PackageFamilyName ON PackageFamily(PackageFamilyName);DROP INDEX IF EXISTS IDX_PackageFamily_Name_PublisherId;CREATE UNIQUE INDEX IDX_PackageFamily_Name_PublisherId ON PackageFamily(Name, PublisherId);DROP INDEX IF EXISTS IDX_PackageFamily_PackageSID;CREATE INDEX IDX_PackageFamily_PackageSID ON PackageFamily(PackageSID);DROP INDEX IF EXISTS IDX_PackageFamily_PublisherId;CREATE INDEX IDX_PackageFamily_PublisherId ON PackageFamily(PublisherId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_Index__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_PackageFamily_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackageFamilyPolicy_PackageFamily_Name_Index__WorkId ON PackageFamilyPolicy(PackageFamily, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueString__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_PackageFamily_Name_ValueNumber__WorkId ON PackageFamilyPolicy(User, PackageFamily, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_Index_ValueString__WorkId ON PackageFamilyPolicy(User, Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_Index_ValueString__WorkId ON PackageFamilyPolicy(Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_Index_ValueNumber__WorkId ON PackageFamilyPolicy(User, Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_Index_ValueNumber__WorkId ON PackageFamilyPolicy(Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_ValueString__WorkId ON PackageFamilyPolicy(User, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_ValueString__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_ValueString__WorkId ON PackageFamilyPolicy(Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_User_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_User_Name_ValueNumber__WorkId ON PackageFamilyPolicy(User, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackageFamilyPolicy_Name_ValueNumber__WorkId ON PackageFamilyPolicy(Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackageFamilyPolicy__WorkId;CREATE INDEX IDX_PackageFamilyPolicy__WorkId ON PackageFamilyPolicy(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageFamilyUser_User_PackageFamily;CREATE UNIQUE INDEX IDX_PackageFamilyUser_User_PackageFamily ON PackageFamilyUser(User, PackageFamily);DROP INDEX IF EXISTS IDX_PackageFamilyUser_PackageFamily;CREATE INDEX IDX_PackageFamilyUser_PackageFamily ON PackageFamilyUser(PackageFamily);DROP INDEX IF EXISTS IDX_PackageFamilyUserResource_PackageFamilyUser_ResourceId;CREATE UNIQUE INDEX IDX_PackageFamilyUserResource_PackageFamilyUser_ResourceId ON PackageFamilyUserResource(PackageFamilyUser, ResourceId);DROP INDEX IF EXISTS IDX_PackageIdentity_PackageFullName;CREATE UNIQUE INDEX IDX_PackageIdentity_PackageFullName ON PackageIdentity(PackageFullName);DROP INDEX IF EXISTS IDX_PackageIdentity_PackageFamily;CREATE INDEX IDX_PackageIdentity_PackageFamily ON PackageIdentity(PackageFamily);DROP INDEX IF EXISTS IDX_PackageLocation_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageLocation_Package__WorkId ON PackageLocation(Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageLocation_Volume;CREATE INDEX IDX_PackageLocation_Volume ON PackageLocation(Volume);DROP INDEX IF EXISTS IDX_PackageLocation_InstalledLocation;CREATE INDEX IDX_PackageLocation_InstalledLocation ON PackageLocation(InstalledLocation);DROP INDEX IF EXISTS IDX_PackageLocation__WorkId;CREATE INDEX IDX_PackageLocation__WorkId ON PackageLocation(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageMachineStatus_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageMachineStatus_PackageIdentity ON PackageMachineStatus(PackageIdentity);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackagePolicy_User_Package_Name_Index__WorkId ON PackagePolicy(User, Package, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Package_Name_Index__WorkId;CREATE UNIQUE INDEX IDX_PackagePolicy_Package_Name_Index__WorkId ON PackagePolicy(Package, Name, "Index", _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Package_Name_ValueString__WorkId ON PackagePolicy(User, Package, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Package_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Package_Name_ValueNumber__WorkId ON PackagePolicy(User, Package, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_Index_ValueString__WorkId ON PackagePolicy(User, Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_Index_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_Name_Index_ValueString__WorkId ON PackagePolicy(Name, "Index", ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_Index_ValueNumber__WorkId ON PackagePolicy(User, Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_Index_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_Name_Index_ValueNumber__WorkId ON PackagePolicy(Name, "Index", ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_ValueString__WorkId ON PackagePolicy(User, Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_ValueString__WorkId;CREATE INDEX IDX_PackagePolicy_Name_ValueString__WorkId ON PackagePolicy(Name, ValueString, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_User_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_User_Name_ValueNumber__WorkId ON PackagePolicy(User, Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy_Name_ValueNumber__WorkId;CREATE INDEX IDX_PackagePolicy_Name_ValueNumber__WorkId ON PackagePolicy(Name, ValueNumber, _WorkId);DROP INDEX IF EXISTS IDX_PackagePolicy__WorkId;CREATE INDEX IDX_PackagePolicy__WorkId ON PackagePolicy(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageProperty_Package_Index;CREATE UNIQUE INDEX IDX_PackageProperty_Package_Index ON PackageProperty(Package, "Index");DROP INDEX IF EXISTS IDX_PackageProperty_Package_Name;CREATE INDEX IDX_PackageProperty_Package_Name ON PackageProperty(Package, Name);DROP INDEX IF EXISTS IDX_PackageProperty_Name;CREATE INDEX IDX_PackageProperty_Name ON PackageProperty(Name);DROP INDEX IF EXISTS IDX_PackageProperty__WorkId;CREATE INDEX IDX_PackageProperty__WorkId ON PackageProperty(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageSuperceded_User_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageSuperceded_User_PackageIdentity ON PackageSuperceded(User, PackageIdentity);DROP INDEX IF EXISTS IDX_PackageSuperceded_PackageIdentity;CREATE INDEX IDX_PackageSuperceded_PackageIdentity ON PackageSuperceded(PackageIdentity);DROP INDEX IF EXISTS IDX_PackageUser_User_Package__WorkId;CREATE UNIQUE INDEX IDX_PackageUser_User_Package__WorkId ON PackageUser(User, Package, _WorkId);DROP INDEX IF EXISTS IDX_PackageUser_User__WorkId;CREATE INDEX IDX_PackageUser_User__WorkId ON PackageUser(User, _WorkId);DROP INDEX IF EXISTS IDX_PackageUser_Package;CREATE INDEX IDX_PackageUser_Package ON PackageUser(Package);DROP INDEX IF EXISTS IDX_PackageUser_User_DeploymentState_IsExplicitlyInstalled;CREATE INDEX IDX_PackageUser_User_DeploymentState_IsExplicitlyInstalled ON PackageUser(User, DeploymentState, IsExplicitlyInstalled);DROP INDEX IF EXISTS IDX_PackageUser_AppDataVolume;CREATE INDEX IDX_PackageUser_AppDataVolume ON PackageUser(AppDataVolume);DROP INDEX IF EXISTS IDX_PackageUser_DeploymentState__WorkId_Package;CREATE INDEX IDX_PackageUser_DeploymentState__WorkId_Package ON PackageUser(DeploymentState, _WorkId, Package);DROP INDEX IF EXISTS IDX_PackageUser__WorkId;CREATE INDEX IDX_PackageUser__WorkId ON PackageUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageUserStatus_User_PackageIdentity;CREATE UNIQUE INDEX IDX_PackageUserStatus_User_PackageIdentity ON PackageUserStatus(User, PackageIdentity);DROP INDEX IF EXISTS IDX_PrimaryTile_Application_TileId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTile_Application_TileId__WorkId ON PrimaryTile(Application, TileId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTile_Application__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTile_Application__WorkId ON PrimaryTile(Application, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTile_Package;CREATE INDEX IDX_PrimaryTile_Package ON PrimaryTile(Package);DROP INDEX IF EXISTS IDX_PrimaryTile__WorkId;CREATE INDEX IDX_PrimaryTile__WorkId ON PrimaryTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PrimaryTile_Package_Application;CREATE INDEX IDX_PrimaryTile_Package_Application ON PrimaryTile(Package, Application);DROP INDEX IF EXISTS IDX_PrimaryTileUser_User_ApplicationIdentity__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUser_User_ApplicationIdentity__WorkId ON PrimaryTileUser(User, ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUser_TileUniqueId__WorkId ON PrimaryTileUser(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser_ApplicationIdentity__WorkId;CREATE INDEX IDX_PrimaryTileUser_ApplicationIdentity__WorkId ON PrimaryTileUser(ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUser__Created;CREATE INDEX IDX_PrimaryTileUser__Created ON PrimaryTileUser(_Created);DROP INDEX IF EXISTS IDX_PrimaryTileUser__Modified;CREATE INDEX IDX_PrimaryTileUser__Modified ON PrimaryTileUser(_Modified);DROP INDEX IF EXISTS IDX_PrimaryTileUser__WorkId;CREATE INDEX IDX_PrimaryTileUser__WorkId ON PrimaryTileUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__Created;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog__Created ON PrimaryTileUserChangelog(_Created);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__Deleted;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog__Deleted ON PrimaryTileUserChangelog(_Deleted);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_User_TileUniqueId;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog_User_TileUniqueId ON PrimaryTileUserChangelog(User, TileUniqueId);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_PrimaryTileUserChangelog_TileUniqueId__WorkId ON PrimaryTileUserChangelog(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog_WhenOccurred;CREATE INDEX IDX_PrimaryTileUserChangelog_WhenOccurred ON PrimaryTileUserChangelog(WhenOccurred);DROP INDEX IF EXISTS IDX_PrimaryTileUserChangelog__WorkId;CREATE INDEX IDX_PrimaryTileUserChangelog__WorkId ON PrimaryTileUserChangelog(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Protocol_Extension_Index;CREATE UNIQUE INDEX IDX_Protocol_Extension_Index ON Protocol(Extension, "Index");DROP INDEX IF EXISTS IDX_Protocol_ProtocolName_Extension;CREATE INDEX IDX_Protocol_ProtocolName_Extension ON Protocol(ProtocolName, Extension);DROP INDEX IF EXISTS IDX_Protocol_ProtocolName_ReturnResults;CREATE INDEX IDX_Protocol_ProtocolName_ReturnResults ON Protocol(ProtocolName, ReturnResults);DROP INDEX IF EXISTS IDX_Protocol_ProgID_Extension;CREATE INDEX IDX_Protocol_ProgID_Extension ON Protocol(ProgID, Extension);DROP INDEX IF EXISTS IDX_Protocol__WorkId;CREATE INDEX IDX_Protocol__WorkId ON Protocol(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ProvisionedPackage_PackageIdentity;CREATE UNIQUE INDEX IDX_ProvisionedPackage_PackageIdentity ON ProvisionedPackage(PackageIdentity);DROP INDEX IF EXISTS IDX_ProvisionedPackage_Path;CREATE UNIQUE INDEX IDX_ProvisionedPackage_Path ON ProvisionedPackage(Path);DROP INDEX IF EXISTS IDX_ProvisionedPackageDeleted_PackageIdentity;CREATE UNIQUE INDEX IDX_ProvisionedPackageDeleted_PackageIdentity ON ProvisionedPackageDeleted(PackageIdentity);DROP INDEX IF EXISTS IDX_ProvisionedPackageDeleted_Path;CREATE UNIQUE INDEX IDX_ProvisionedPackageDeleted_Path ON ProvisionedPackageDeleted(Path);DROP INDEX IF EXISTS IDX_ProvisionedPackageExclude_PackageFamily;CREATE UNIQUE INDEX IDX_ProvisionedPackageExclude_PackageFamily ON ProvisionedPackageExclude(PackageFamily);DROP INDEX IF EXISTS IDX_PublisherCacheFolder_PackageExtension_Index;CREATE UNIQUE INDEX IDX_PublisherCacheFolder_PackageExtension_Index ON PublisherCacheFolder(PackageExtension, "Index");DROP INDEX IF EXISTS IDX_PublisherCacheFolder_PackageExtension_FolderName;CREATE UNIQUE INDEX IDX_PublisherCacheFolder_PackageExtension_FolderName ON PublisherCacheFolder(PackageExtension, FolderName);DROP TRIGGER IF EXISTS TRG_IDX_PublisherCacheFolder_PackageExtension_FolderName;CREATE TRIGGER TRG_IDX_PublisherCacheFolder_PackageExtension_FolderName BEFORE INSERT ON PublisherCacheFolder FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _PublisherCacheFolderID FROM PublisherCacheFolder WHERE PackageExtension=NEW.PackageExtension AND FolderName IS NEW.FolderName) IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "PublisherCacheFolder" violates the unique index "IDX_PublisherCacheFolder_PackageExtension_FolderName"')END;END;DROP INDEX IF EXISTS IDX_PublisherCacheFolder_FolderName;CREATE INDEX IDX_PublisherCacheFolder_FolderName ON PublisherCacheFolder(FolderName);DROP INDEX IF EXISTS IDX_PublisherCacheFolder__WorkId;CREATE INDEX IDX_PublisherCacheFolder__WorkId ON PublisherCacheFolder(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Resource_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_Resource_Package_Index__WorkId ON Resource(Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_Resource__WorkId;CREATE INDEX IDX_Resource__WorkId ON Resource(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SRJournal_ObjectType_Action_ObjectId;CREATE INDEX IDX_SRJournal_ObjectType_Action_ObjectId ON SRJournal(ObjectType, "Action", ObjectId);DROP INDEX IF EXISTS IDX_SRJournal_SequenceId;CREATE INDEX IDX_SRJournal_SequenceId ON SRJournal(SequenceId);DROP INDEX IF EXISTS IDX_SRJournal__WorkId;CREATE INDEX IDX_SRJournal__WorkId ON SRJournal(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SRJournalArchive_ObjectType_Action_ObjectId;CREATE INDEX IDX_SRJournalArchive_ObjectType_Action_ObjectId ON SRJournalArchive(ObjectType, "Action", ObjectId);DROP INDEX IF EXISTS IDX_SRJournalArchive_SequenceId;CREATE INDEX IDX_SRJournalArchive_SequenceId ON SRJournalArchive(SequenceId);DROP INDEX IF EXISTS IDX_SecondaryTile__WorkId;CREATE INDEX IDX_SecondaryTile__WorkId ON SecondaryTile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SecondaryTileUser_User_SecondaryTile__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUser_User_SecondaryTile__WorkId ON SecondaryTileUser(User, SecondaryTile, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUser_TileUniqueId__WorkId ON SecondaryTileUser(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser_User_ApplicationIdentity__WorkId;CREATE INDEX IDX_SecondaryTileUser_User_ApplicationIdentity__WorkId ON SecondaryTileUser(User, ApplicationIdentity, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUser__Created;CREATE INDEX IDX_SecondaryTileUser__Created ON SecondaryTileUser(_Created);DROP INDEX IF EXISTS IDX_SecondaryTileUser__Modified;CREATE INDEX IDX_SecondaryTileUser__Modified ON SecondaryTileUser(_Modified);DROP INDEX IF EXISTS IDX_SecondaryTileUser__WorkId;CREATE INDEX IDX_SecondaryTileUser__WorkId ON SecondaryTileUser(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__Created;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog__Created ON SecondaryTileUserChangelog(_Created);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__Deleted;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog__Deleted ON SecondaryTileUserChangelog(_Deleted);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_User_TileUniqueId;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog_User_TileUniqueId ON SecondaryTileUserChangelog(User, TileUniqueId);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_TileUniqueId__WorkId;CREATE UNIQUE INDEX IDX_SecondaryTileUserChangelog_TileUniqueId__WorkId ON SecondaryTileUserChangelog(TileUniqueId, _WorkId);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog_WhenOccurred;CREATE INDEX IDX_SecondaryTileUserChangelog_WhenOccurred ON SecondaryTileUserChangelog(WhenOccurred);DROP INDEX IF EXISTS IDX_SecondaryTileUserChangelog__WorkId;CREATE INDEX IDX_SecondaryTileUserChangelog__WorkId ON SecondaryTileUserChangelog(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_Sequence_Id;CREATE UNIQUE INDEX IDX_Sequence_Id ON Sequence(Id);DROP INDEX IF EXISTS IDX_TargetDeviceFamily_Package_Index__WorkId;CREATE UNIQUE INDEX IDX_TargetDeviceFamily_Package_Index__WorkId ON TargetDeviceFamily(Package, "Index", _WorkId);DROP INDEX IF EXISTS IDX_TargetDeviceFamily__WorkId;CREATE INDEX IDX_TargetDeviceFamily__WorkId ON TargetDeviceFamily(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_User_UserSid;CREATE UNIQUE INDEX IDX_User_UserSid ON User(UserSid);DROP INDEX IF EXISTS IDX_WorkInProgress_Key;CREATE UNIQUE INDEX IDX_WorkInProgress_Key ON WorkInProgress("Key");DROP TRIGGER IF EXISTS TRG_IDX_WorkInProgress_Key;CREATE TRIGGER TRG_IDX_WorkInProgress_Key BEFORE INSERT ON WorkInProgress FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT _WorkInProgressID FROM WorkInProgress WHERE "Key" IS NEW."Key") IS NOT NULL)THEN RAISE(ABORT, 'INSERT INTO "WorkInProgress" violates the unique index "IDX_WorkInProgress_Key"')END;END;DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_SupplierPackage__WorkId;CREATE UNIQUE INDEX IDX_WowDependencyGraph_User_DependentPackage_SupplierPackage__WorkId ON WowDependencyGraph(User, DependentPackage, SupplierPackage, _WorkId);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_Index__WorkId;CREATE INDEX IDX_WowDependencyGraph_User_DependentPackage_Index__WorkId ON WowDependencyGraph(User, DependentPackage, "Index", _WorkId);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_DependentPackage_DependencyType__WowDependencyGraphID;CREATE INDEX IDX_WowDependencyGraph_User_DependentPackage_DependencyType__WowDependencyGraphID ON WowDependencyGraph(User, DependentPackage, DependencyType, _WowDependencyGraphID);DROP INDEX IF EXISTS IDX_WowDependencyGraph_User_SupplierPackage;CREATE INDEX IDX_WowDependencyGraph_User_SupplierPackage ON WowDependencyGraph(User, SupplierPackage);DROP INDEX IF EXISTS IDX_WowDependencyGraph_SupplierPackage;CREATE INDEX IDX_WowDependencyGraph_SupplierPackage ON WowDependencyGraph(SupplierPackage);DROP INDEX IF EXISTS IDX_WowDependencyGraph__WorkId;CREATE INDEX IDX_WowDependencyGraph__WorkId ON WowDependencyGraph(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_XboxPackage_EditionId__WorkId;CREATE UNIQUE INDEX IDX_XboxPackage_EditionId__WorkId ON XboxPackage(EditionId, _WorkId);DROP INDEX IF EXISTS IDX_XboxPackage_Package;CREATE INDEX IDX_XboxPackage_Package ON XboxPackage(Package);DROP INDEX IF EXISTS IDX_XboxPackage_ContentId;CREATE INDEX IDX_XboxPackage_ContentId ON XboxPackage(ContentId);DROP INDEX IF EXISTS IDX_XboxPackage_ProductId;CREATE INDEX IDX_XboxPackage_ProductId ON XboxPackage(ProductId);DROP INDEX IF EXISTS IDX_XboxPackage_DeviceId;CREATE INDEX IDX_XboxPackage_DeviceId ON XboxPackage(DeviceId);DROP INDEX IF EXISTS IDX_XboxPackage_TitleId;CREATE INDEX IDX_XboxPackage_TitleId ON XboxPackage(TitleId);DROP INDEX IF EXISTS IDX_XboxPackage_EscrowedKeyBlobId;CREATE INDEX IDX_XboxPackage_EscrowedKeyBlobId ON XboxPackage(EscrowedKeyBlobId);DROP INDEX IF EXISTS IDX_XboxPackage__WorkId;CREATE INDEX IDX_XboxPackage__WorkId ON XboxPackage(_WorkId) WHERE _WorkId<>0;
DROP INDEX IF EXISTS IDX_AppInstaller_Uri;CREATE UNIQUE INDEX IDX_AppInstaller_Uri ON AppInstaller(Uri);DROP INDEX IF EXISTS IDX_AppxManifest_Package;CREATE UNIQUE INDEX IDX_AppxManifest_Package ON AppxManifest(Package);DROP INDEX IF EXISTS IDX_AppxManifest__WorkId;CREATE INDEX IDX_AppxManifest__WorkId ON AppxManifest(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ContentGroup_Package_Name;CREATE UNIQUE INDEX IDX_ContentGroup_Package_Name ON ContentGroup(Package, Name);DROP INDEX IF EXISTS IDX_ContentGroup_Package_Index;CREATE UNIQUE INDEX IDX_ContentGroup_Package_Index ON ContentGroup(Package, "Index");DROP INDEX IF EXISTS IDX_ContentGroup__WorkId;CREATE INDEX IDX_ContentGroup__WorkId ON ContentGroup(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_ContentGroupFile_ContentGroup_File;CREATE UNIQUE INDEX IDX_ContentGroupFile_ContentGroup_File ON ContentGroupFile(ContentGroup, File);DROP INDEX IF EXISTS IDX_ContentGroupFile__WorkId;CREATE INDEX IDX_ContentGroupFile__WorkId ON ContentGroupFile(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_File_Package_RelativeFilePath__WorkId;CREATE UNIQUE INDEX IDX_File_Package_RelativeFilePath__WorkId ON File(Package, RelativeFilePath, _WorkId);DROP INDEX IF EXISTS IDX_File_Package__WorkId;CREATE INDEX IDX_File_Package__WorkId ON File(Package, _WorkId);DROP INDEX IF EXISTS IDX_File_Digest__WorkId;CREATE INDEX IDX_File_Digest__WorkId ON File(Digest, _WorkId);DROP INDEX IF EXISTS IDX_File__WorkId;CREATE INDEX IDX_File__WorkId ON File(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageAppInstaller_Package_AppInstaller__WorkId;CREATE UNIQUE INDEX IDX_PackageAppInstaller_Package_AppInstaller__WorkId ON PackageAppInstaller(Package, AppInstaller, _WorkId);DROP INDEX IF EXISTS IDX_PackageAppInstaller_AppInstaller__WorkId;CREATE INDEX IDX_PackageAppInstaller_AppInstaller__WorkId ON PackageAppInstaller(AppInstaller, _WorkId);DROP INDEX IF EXISTS IDX_PackageAppInstaller__WorkId;CREATE INDEX IDX_PackageAppInstaller__WorkId ON PackageAppInstaller(_WorkId) WHERE _WorkId<>0;DROP INDEX IF EXISTS IDX_PackageSourceUri_Package_Kind;CREATE INDEX IDX_PackageSourceUri_Package_Kind ON PackageSourceUri(Package, Kind);DROP INDEX IF EXISTS IDX_PackageSourceUri__WorkId;CREATE INDEX IDX_PackageSourceUri__WorkId ON PackageSourceUri(_WorkId) WHERE _WorkId<>0;
DROP TABLE IF EXISTS Activation;CREATE TABLE Activation(_ActivationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ActivationKey TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ActivationUser;CREATE TABLE ActivationUser(_ActivationUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Activation INTEGER NOT NULL,User INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS AppExecutionAlias;CREATE TABLE AppExecutionAlias(_AppExecutionAliasID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Alias TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS AppExecutionAliasUser;CREATE TABLE AppExecutionAliasUser(_AppExecutionAliasUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS AppExtension;CREATE TABLE AppExtension(_AppExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Id TEXT NOT NULL COLLATE NOCASE,PublicFolder TEXT COLLATE NOCASE,DisplayName TEXT NOT NULL,Description TEXT,Extension INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS AppExtensionHost;CREATE TABLE AppExtensionHost(_AppExtensionHostID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Extension INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS AppService;CREATE TABLE AppService(_AppServiceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS AppUriHandler;CREATE TABLE AppUriHandler(_AppUriHandlerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,HostName TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,AppUriHandlerGroup INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS AppUriHandlerGroup;CREATE TABLE AppUriHandlerGroup(_AppUriHandlerGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS Application;CREATE TABLE Application(_ApplicationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,ApplicationType INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,Subsystem INTEGER NOT NULL DEFAULT 0,PackageRelativeApplicationId TEXT NOT NULL COLLATE NOCASE,ApplicationUserModelId TEXT NOT NULL COLLATE NOCASE,DisplayName TEXT NOT NULL,Description TEXT NOT NULL,Square150x150Logo TEXT COLLATE NOCASE,Square44x44Logo TEXT NOT NULL COLLATE NOCASE,Wide310x150Logo TEXT COLLATE NOCASE,Square310x310Logo TEXT COLLATE NOCASE,Square71x71Logo TEXT COLLATE NOCASE,ForegroundText TEXT,BackgroundColor INTEGER NOT NULL,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,LockScreenNotification INTEGER NOT NULL DEFAULT 0,LockScreenBadgeLogo TEXT COLLATE NOCASE,SplashScreenImage TEXT COLLATE NOCASE,SplashScreenBackgroundColor INTEGER NOT NULL DEFAULT 0,InitialRotationPreference INTEGER NOT NULL DEFAULT 0,ApplicationViewMinWidth INTEGER NOT NULL DEFAULT 0,AppListEntry INTEGER NOT NULL DEFAULT 0,EditionId TEXT COLLATE NOCASE,VisualGroup TEXT COLLATE NOCASE,Parameters TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationBackgroundTask;CREATE TABLE ApplicationBackgroundTask(_BackgroundTaskID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Type TEXT NOT NULL COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationContentUriRule;CREATE TABLE ApplicationContentUriRule(_ApplicationContentUriRuleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Uri TEXT NOT NULL COLLATE NOCASE,Type INTEGER NOT NULL,WindowsRuntimeAccess INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationExtension;CREATE TABLE ApplicationExtension(_ApplicationExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Category TEXT NOT NULL COLLATE NOCASE,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,ResourceGroup TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Subsystem INTEGER NOT NULL DEFAULT 0,Parameters TEXT COLLATE NOCASE,_LocalizedDictionary BLOB,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationIdentity;CREATE TABLE ApplicationIdentity(_ApplicationIdentityID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ApplicationUserModelId TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ApplicationProperty;CREATE TABLE ApplicationProperty(_ApplicationPropertyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS AppxExtension;CREATE TABLE AppxExtension(_AppxExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Category TEXT NOT NULL,KeyString TEXT,RegistrationInformation TEXT NOT NULL,ExtensionStatus INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS Bundle;CREATE TABLE Bundle(_BundleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,UniqueLanguage TEXT COLLATE NOCASE,UniqueScale INTEGER NOT NULL,UniqueDXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS BundlePackage;CREATE TABLE BundlePackage(_BundlePackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Bundle INTEGER NOT NULL,PackageType INTEGER NOT NULL DEFAULT 0,Version INTEGER NOT NULL,Architecture INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Filename TEXT NOT NULL COLLATE NOCASE,"Offset" INTEGER NOT NULL,Size INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS BundleResource;CREATE TABLE BundleResource(_BundleResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,BundlePackage INTEGER NOT NULL,Language TEXT COLLATE NOCASE,Scale INTEGER NOT NULL,DXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS CacheActivation;CREATE VIEW CacheActivation AS SELECT a._ActivationID AS _CacheActivationID,a.ActivationKey AS ActivationKey,a.Flags AS Flags,a.HostId AS HostId,a.Executable AS Executable,a.Entrypoint AS Entrypoint,a.RuntimeType AS RuntimeType,a.StartPage AS StartPage,a.ResourceGroup AS ResourceGroup FROM Activation AS a;DROP VIEW IF EXISTS CacheActivationUser;CREATE VIEW CacheActivationUser AS SELECT au._ActivationUserID AS _CacheActivationUserID,au.Activation AS Activation,au.User AS User FROM ActivationUser AS au;DROP VIEW IF EXISTS CacheAppUriHandler;CREATE VIEW CacheAppUriHandler AS SELECT auh._AppUriHandlerID AS _CacheAppUriHandlerID,auh.HostName AS HostName,auh.Extension AS Extension,auh.ProgID AS ProgID,auh.AppUriHandlerGroup AS AppUriHandlerGroup FROM AppUriHandler AS auh;DROP VIEW IF EXISTS CacheAppUriHandlerGroup;CREATE VIEW CacheAppUriHandlerGroup AS SELECT auhg._AppUriHandlerGroupID AS _CacheAppUriHandlerGroupID,auhg.Name AS Name,auhg.Extension AS Extension FROM AppUriHandlerGroup AS auhg;DROP VIEW IF EXISTS CacheApplication;CREATE VIEW CacheApplication AS SELECT a._ApplicationID AS _CacheApplicationID,a.Package AS Package,a."Index" AS "Index",a.Flags & 0xFFFF | CASE WHEN a.Subsystem==1 THEN 0x00010000 ELSE 0 END As Flags,a.PackageRelativeApplicationId AS PackageRelativeApplicationId,a.ApplicationUserModelId AS ApplicationUserModelId,a.Activation AS Activation,a.HostId AS HostId,a.Parameters AS Parameters,a.Executable AS Executable,a.Entrypoint AS Entrypoint,a.StartPage AS StartPage FROM Application AS a WHERE a._WorkId=0;DROP VIEW IF EXISTS CacheApplicationExtension;CREATE VIEW CacheApplicationExtension AS SELECT ae._ApplicationExtensionID AS _CacheApplicationExtensionID,ae.Application AS Application,ae."Index" AS "Index",ae.Flags AS Flags,ae.Category AS Category,ae.Activation AS Activation,ae.HostId AS HostId,ae.Parameters AS Parameters FROM ApplicationExtension AS ae;DROP VIEW IF EXISTS CacheApplicationUser;CREATE VIEW CacheApplicationUser AS SELECT 0 AS _CacheApplicationUserID,a._ApplicationID AS Application,pu.User AS User,a.ApplicationUserModelId AS ApplicationUserModelId FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 ORDER BY a."Index";DROP VIEW IF EXISTS CacheDynamicAppUriHandler;CREATE VIEW CacheDynamicAppUriHandler AS SELECT dauh._DynamicAppUriHandlerID AS _CacheDynamicAppUriHandlerID,dauh.DynamicAppUriHandlerGroup AS DynamicAppUriHandlerGroup,dauh.HostName AS HostName,dauh.ProgID AS ProgID FROM DynamicAppUriHandler AS dauh;DROP VIEW IF EXISTS CacheDynamicAppUriHandlerGroup;CREATE VIEW CacheDynamicAppUriHandlerGroup AS SELECT dauhg._DynamicAppUriHandlerGroupID AS _CacheDynamicAppUriHandlerGroupID,dauhg.User AS User,dauhg.PackageFamily AS PackageFamily,dauhg.Name AS Name FROM DynamicAppUriHandlerGroup AS dauhg;DROP VIEW IF EXISTS CacheFileTypeAssociation;CREATE VIEW CacheFileTypeAssociation AS SELECT fta._FileTypeAssociationID AS _CacheFileTypeAssociationID,fta.Extension AS Extension,fta.FileType AS FileType,fta.ProgID AS ProgID FROM FileTypeAssociation AS fta;DROP VIEW IF EXISTS CacheHostRuntime;CREATE VIEW CacheHostRuntime AS SELECT hr._HostRuntimeID AS _CacheHostRuntimeID,hr.HostId AS HostId,hr.PackageExtension AS PackageExtension FROM HostRuntime AS hr;DROP VIEW IF EXISTS CachePackage;CREATE VIEW CachePackage AS SELECT p._PackageID AS _CachePackageID,p.PackageFullName AS PackageFullName,p.PackageFamily AS PackageFamily,p.PackageType AS PackageType,(p.Flags & 0xFEFFFFFF) | CASE WHEN p.SupportedUsers==2 THEN 0x01000000 ELSE 0 END AS Flags,p.Flags2 AS Flags2,p.PackageOrigin AS PackageOrigin,pl.Volume AS Volume,p.OSMaxVersionTested AS OSMaxVersionTested,pl.InstalledLocation AS InstalledLocation,pl.MutableLink AS MutableLink,pl.MutableLocation AS MutableLocation,IFNULL(tdf.Name, 0) AS TargetDeviceFamilyName FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID LEFT JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE p._WorkId=0 AND pl._WorkId=0;DROP VIEW IF EXISTS CachePackageExtension;CREATE VIEW CachePackageExtension AS SELECT pe._PackageExtensionID AS _CachePackageExtensionID,pe.Package AS Package,pe."Index" AS "Index",pe.Flags AS Flags,pe.Category AS Category,pe.Activation AS Activation,pe.HostId AS HostId,pe.Parameters AS Parameters FROM PackageExtension AS pe WHERE pe.Category NOT LIKE 'windows.activatableClass%';DROP VIEW IF EXISTS CachePackageExternalLocation;CREATE VIEW CachePackageExternalLocation AS SELECT pel._PackageExternalLocationID AS _CachePackageExternalLocationID,pel.User AS User,pel.Package AS Package,pel.Path AS Path FROM PackageExternalLocation AS pel;DROP VIEW IF EXISTS CachePackageFamily;CREATE VIEW CachePackageFamily AS SELECT p._PackageFamilyID AS _CachePackageFamilyID,p.PackageFamilyName AS PackageFamilyName,p.PackageSID AS PackageSID,p.Publisher AS Publisher FROM PackageFamily AS p;DROP VIEW IF EXISTS CachePackageMachineStatus;CREATE VIEW CachePackageMachineStatus AS SELECT pms._PackageMachineStatusID AS _CachePackageMachineStatusID,pms.PackageIdentity AS PackageIdentity,pi.PackageFullName AS PackageFullName,pms.Status AS Status FROM PackageMachineStatus AS pms INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentity;DROP VIEW IF EXISTS CachePackageUser;CREATE VIEW CachePackageUser AS SELECT pu._PackageUserID AS _CachePackageUserID,pu.Package AS Package,pu.User AS User FROM PackageUser AS pu WHERE pu._WorkId=0;DROP VIEW IF EXISTS CachePackageUserStatus;CREATE VIEW CachePackageUserStatus AS SELECT pus._PackageUserStatusID AS _CachePackageUserStatusID,pus.User AS User,pus.PackageIdentity AS PackageIdentity,pi.PackageFullName AS PackageFullName,pus.Status AS Status FROM PackageUserStatus AS pus INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity;DROP VIEW IF EXISTS CacheProtocol;CREATE VIEW CacheProtocol AS SELECT p._ProtocolID AS _CacheProtocolID,p.Extension AS Extension,p.ProtocolName AS Name,p.ProgID AS ProgID FROM Protocol AS p;DROP VIEW IF EXISTS CacheUser;CREATE VIEW CacheUser AS SELECT u._UserID AS _CacheUserID,u.UserSid AS UserSid FROM User AS u;DROP TABLE IF EXISTS ConnectedSet;CREATE TABLE ConnectedSet(_ConnectedSetID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,Name TEXT NOT NULL COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS ConnectedSetPackageFamily;CREATE TABLE ConnectedSetPackageFamily(_ConnectedSetPackageFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,ConnectedSet INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS CustomInstall;CREATE TABLE CustomInstall(_CustomInstallID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageExtension INTEGER NOT NULL,Verb INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS CustomInstallProcess;CREATE TABLE CustomInstallProcess(_CustomInstallProcessID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,CustomInstall INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,File TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS CustomInstallProcessUserStatus;CREATE TABLE CustomInstallProcessUserStatus(_CustomInstallProcessStatusID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,CustomInstallProcess INTEGER NOT NULL,User INTEGER NOT NULL,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS CustomInstallWork;CREATE TABLE CustomInstallWork(_CustomInstallWorkID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,File TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS DefaultTile;CREATE TABLE DefaultTile(_DefaultTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,UpdateRecurrence INTEGER NOT NULL DEFAULT 0,UpdateUriTemplate TEXT COLLATE NOCASE,ShowNameOnTiles INTEGER NOT NULL DEFAULT 0,ShortName TEXT COLLATE NOCASE,DefaultSize INTEGER NOT NULL DEFAULT 0,HoloContentChoice TEXT COLLATE NOCASE,MixedRealityModel TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS Dependency;CREATE TABLE Dependency(_DependencyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL,DependencyType INTEGER NOT NULL DEFAULT 2,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT COLLATE NOCASE,MinVersion INTEGER NOT NULL,MaxVersion INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS DependencyGraph;CREATE TABLE DependencyGraph(_DependencyGraphID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_ShadowId INTEGER NOT NULL DEFAULT 0,_IsMarkedForDeletion INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,SupplierPackage INTEGER NOT NULL,DependencyType INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS DeploymentHistory;CREATE TABLE DeploymentHistory(_DeploymentHistoryID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageIdentity INTEGER NOT NULL,User INTEGER NOT NULL,HResult INTEGER NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS DynamicAppUriHandler;CREATE TABLE DynamicAppUriHandler(_DynamicAppUriHandlerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,DynamicAppUriHandlerGroup INTEGER NOT NULL,HostName TEXT NOT NULL COLLATE NOCASE,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS DynamicAppUriHandlerGroup;CREATE TABLE DynamicAppUriHandlerGroup(_DynamicAppUriHandlerGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS EndOfLifePackage;CREATE TABLE EndOfLifePackage(_EndOfLifePackage INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS Enterprise;CREATE TABLE Enterprise(_EnterpriseID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,EnterpriseId BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS FileTypeAssociation;CREATE TABLE FileTypeAssociation(_FileTypeAssociationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,FileType TEXT NOT NULL COLLATE NOCASE,ContentType TEXT COLLATE NOCASE,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS HostRuntime;CREATE TABLE HostRuntime(_HostRuntimeID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,HostId TEXT NOT NULL COLLATE NOCASE,PackageExtension INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS MigratorPatch;CREATE TABLE MigratorPatch(_MigratorPatchID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PatchId TEXT NOT NULL COLLATE NOCASE,HResult INTEGER NOT NULL,StateRepositoryVersion INTEGER NOT NULL,"When" INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS MrtApplication;CREATE TABLE MrtApplication(_MrtApplicationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL,DisplayNameReference TEXT NOT NULL,DescriptionReference TEXT NOT NULL,Square150x150LogoReference TEXT NOT NULL,Square44x44LogoReference TEXT NOT NULL,Wide310x150LogoReference TEXT,Square310x310LogoReference TEXT,Square71x71LogoReference TEXT,StartPageReference TEXT,SplashScreenImageReference TEXT,VisualGroupReference TEXT,_Dictionary BLOB);DROP TABLE IF EXISTS MrtDefaultTile;CREATE TABLE MrtDefaultTile(_MrtDefaultTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DefaultTile INTEGER NOT NULL,ShortNameReference TEXT NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS MrtPackage;CREATE TABLE MrtPackage(_MrtPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,DisplayNameReference TEXT NOT NULL,PublisherDisplayNameReference TEXT NOT NULL,DescriptionReference TEXT,LogoReference TEXT NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS MrtSharedPri;CREATE TABLE MrtSharedPri(_MrtSharedPriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Filename TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS MrtUserPri;CREATE TABLE MrtUserPri(_MrtUserPriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,User INTEGER NOT NULL,Filename TEXT NOT NULL COLLATE NOCASE,MrtSharedPri INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS NamedDependency;CREATE TABLE NamedDependency(_NamedDependncyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,DependencyType INTEGER NOT NULL,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,Version INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS OptionalBundle;CREATE TABLE OptionalBundle(_OptionalBundleID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,MainBundle INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT NOT NULL,Version INTEGER NOT NULL,Filename TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS OptionalBundlePackage;CREATE TABLE OptionalBundlePackage(_OptionalBundlePackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,OptionalBundle INTEGER NOT NULL DEFAULT 0,PackageType INTEGER NOT NULL DEFAULT 0,Version INTEGER NOT NULL,Architecture INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Filename TEXT NOT NULL COLLATE NOCASE,"Offset" INTEGER NOT NULL,Size INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS OptionalBundleResource;CREATE TABLE OptionalBundleResource(_OptionalBundleResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,OptionalBundlePackage INTEGER NOT NULL,Language TEXT COLLATE NOCASE,Scale INTEGER NOT NULL,DXFeatureLevel INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS Package;CREATE TABLE Package(_PackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL,ResourceId TEXT COLLATE NOCASE,Architecture INTEGER NOT NULL,Version INTEGER NOT NULL,PackageFullName TEXT NOT NULL COLLATE NOCASE,IsInbox INTEGER NOT NULL,PackageType INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,Flags2 INTEGER NOT NULL DEFAULT 0,DisplayName TEXT NOT NULL,PublisherDisplayName TEXT NOT NULL,Description TEXT,Logo TEXT NOT NULL COLLATE NOCASE,OSMinVersion INTEGER NOT NULL,OSMaxVersionTested INTEGER NOT NULL,TargetDeviceFamily INTEGER NOT NULL DEFAULT 0,Capabilities INTEGER NOT NULL,SupportedUsers INTEGER NOT NULL DEFAULT 0,SignatureOrigin INTEGER NOT NULL DEFAULT 0,PackageOrigin INTEGER NOT NULL DEFAULT 0,Enterprise INTEGER NOT NULL DEFAULT 0,SourceBundle INTEGER NOT NULL DEFAULT 0,EditionId TEXT COLLATE NOCASE,OSVersionWhenIndexed INTEGER NOT NULL DEFAULT 0,InPlaceUpdateBaseline INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS PackageExtension;CREATE TABLE PackageExtension(_PackageExtensionID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Category TEXT NOT NULL COLLATE NOCASE,Activation INTEGER NOT NULL DEFAULT 0,HostId TEXT COLLATE NOCASE,Executable TEXT COLLATE NOCASE,Entrypoint TEXT,RuntimeType TEXT COLLATE NOCASE,StartPage TEXT COLLATE NOCASE,Flags INTEGER NOT NULL DEFAULT 0,Parameters TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageExternalLocation;CREATE TABLE PackageExternalLocation(_PackageExternalLocationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,Package INTEGER NOT NULL,Path TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageFamily;CREATE TABLE PackageFamily(_PackageFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,Name TEXT NOT NULL COLLATE NOCASE,Publisher TEXT NOT NULL,PublisherId TEXT NOT NULL COLLATE NOCASE,PackageFamilyName TEXT NOT NULL COLLATE NOCASE,PackageSID BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageFamilyPolicy;CREATE TABLE PackageFamilyPolicy(_PackageFamilyPolicyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,ValueString TEXT COLLATE NOCASE,ValueNumber INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS PackageFamilyUser;CREATE TABLE PackageFamilyUser(_PackageFamilyUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,User INTEGER NOT NULL,WhenInstalled INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageFamilyUserResource;CREATE TABLE PackageFamilyUserResource(_PackageFamilyUserResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamilyUser INTEGER NOT NULL,ResourceId TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageIdentity;CREATE TABLE PackageIdentity(_PackageIdentityID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageFamily INTEGER NOT NULL,PackageFullName TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageLocation;CREATE TABLE PackageLocation(_PackageLocationID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Volume INTEGER NOT NULL,InstalledLocation TEXT NOT NULL COLLATE NOCASE,MutableLink TEXT COLLATE NOCASE,MutableLocation TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageMachineStatus;CREATE TABLE PackageMachineStatus(_PackageMachineStatusID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS PackagePolicy;CREATE TABLE PackagePolicy(_PackagePolicyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,"Index" INTEGER NOT NULL,ValueString TEXT COLLATE NOCASE,ValueNumber INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS PackageProperty;CREATE TABLE PackageProperty(_PackagePropertyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PackageSuperceded;CREATE TABLE PackageSuperceded(_PackageSupercededID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,User INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageUser;CREATE TABLE PackageUser(_PackageUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,User INTEGER NOT NULL,InstallTime INTEGER NOT NULL,OSVersionWhenInstalled INTEGER NOT NULL DEFAULT 0,WhenRestored INTEGER,IsExplicitlyInstalled INTEGER NOT NULL,DeploymentState INTEGER NOT NULL,AppDataVolume INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageUserStatus;CREATE TABLE PackageUserStatus(_PackageUserStatusID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP VIEW IF EXISTS PrimaryPreviewTileView;CREATE VIEW PrimaryPreviewTileView AS SELECT pt._PrimaryTileID AS _PrimaryTileID,pt._Revision AS _Revision,ptu._WorkId AS _WorkId,pt.Application AS Application,pt.Package AS Package,pt.Flags AS Flags,1 AS TileType,pt.TileTemplate AS TileTemplate,pt.TileId AS TileId,pt.Arguments AS Arguments,pt.EditionId AS EditionId,IFNULL(ptu._Dictionary, pt._Dictionary) AS _Dictionary,ptu._PrimaryTileUserID AS _PrimaryTileUserID,ptu._Revision AS _PrimaryTileUser_Revision,ptu._Created AS _Created,ptu._Modified AS _Modified,ptu.User AS User,ptu.ApplicationIdentity AS ApplicationIdentity,2 AS State,ptu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTileUser AS ptu INNER JOIN ApplicationIdentity AS ai ON ptu.ApplicationIdentity=ai._ApplicationIdentityID INNER JOIN Application AS a ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN Package AS p ON a.Package=p._PackageID INNER JOIN PrimaryTile AS pt ON pt.Package=p._PackageID AND pt.Application=a._ApplicationID WHERE ptu._WorkId=0 AND ptu._PrimaryTileUserID NOT IN (SELECT _PrimaryTileUserID FROM PrimaryTileUser AS ptu INNER JOIN PackageUser AS pu ON pu.User=ptu.User INNER JOIN ApplicationIdentity AS ai ON ai._ApplicationIdentityID=ptu.ApplicationIdentity INNER JOIN Application AS a ON a.ApplicationUserModelID=ai.ApplicationUserModelID WHERE pu.Package=a.Package)GROUP BY ptu.User, ptu.ApplicationIdentity, ptu._WorkId;DROP TABLE IF EXISTS PrimaryTile;CREATE TABLE PrimaryTile(_PrimaryTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Application INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,TileTemplate INTEGER NOT NULL DEFAULT 0,TileId TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,EditionId TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS PrimaryTileUser;CREATE TABLE PrimaryTileUser(_PrimaryTileUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL DEFAULT 0,_Modified INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,State INTEGER NOT NULL DEFAULT 0,TileUniqueId BLOB NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS PrimaryTileUser_Add;CREATE VIEW PrimaryTileUser_Add AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Created>0;DROP VIEW IF EXISTS PrimaryTileUser_Update;CREATE VIEW PrimaryTileUser_Update AS SELECT _WorkId,_Modified AS ChangeId,2 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Modified>0;DROP VIEW IF EXISTS PrimaryTileUser_Delete;CREATE VIEW PrimaryTileUser_Delete AS SELECT 0 AS _WorkId,_Deleted AS ChangeId,3 AS Disposition,TileUniqueId,User FROM PrimaryTileUserChangelog WHERE _Deleted>0;DROP VIEW IF EXISTS PrimaryTileUser_AddNoUpdate;CREATE VIEW PrimaryTileUser_AddNoUpdate AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM PrimaryTileUser WHERE _Created>0 AND _Modified<=0;DROP VIEW IF EXISTS PrimaryTileUserDataChange;CREATE VIEW PrimaryTileUserDataChange AS SELECT * FROM PrimaryTileUser_AddNoUpdate UNION ALL SELECT * FROM PrimaryTileUser_Update UNION ALL SELECT * FROM PrimaryTileUser_Delete;DROP TABLE IF EXISTS PrimaryTileUserChangelog;CREATE TABLE PrimaryTileUserChangelog(_PrimaryTileUserChangelogID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL,_Deleted INTEGER NOT NULL,User INTEGER NOT NULL,TileUniqueId BLOB NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS PrimaryTileView;CREATE VIEW PrimaryTileView AS SELECT pt._PrimaryTileID AS _PrimaryTileID,pt._Revision AS _Revision,ptu._WorkId AS _WorkId,pt.Application AS Application,pt.Package AS Package,pt.Flags AS Flags,1 AS TileType,pt.TileTemplate AS TileTemplate,pt.TileId AS TileId,pt.Arguments AS Arguments,pt.EditionId AS EditionId,IFNULL(ptu._Dictionary, pt._Dictionary) AS _Dictionary,ptu._PrimaryTileUserID AS _PrimaryTileUserID,ptu._Revision AS _PrimaryTileUser_Revision,ptu._Created AS _Created,ptu._Modified AS _Modified,ptu.User AS User,ptu.ApplicationIdentity AS ApplicationIdentity,1 AS State,ptu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTile AS pt INNER JOIN Application AS a ON (pt.Application=a._ApplicationID AND a._WorkId=0) INNER JOIN PackageUser AS pu ON (a.Package=pu.Package AND ptu.User=pu.User AND pu._WorkId=0) INNER JOIN ApplicationIdentity AS ai ON a.ApplicationUserModelId=ai.ApplicationUserModelId INNER JOIN PrimaryTileUser AS ptu ON (ptu.ApplicationIdentity=ai._ApplicationIdentityID AND ptu._WorkId=0) WHERE pt._WorkId=0;DROP TABLE IF EXISTS Protocol;CREATE TABLE Protocol(_ProtocolID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ProtocolName TEXT NOT NULL COLLATE NOCASE,ReturnResults INTEGER NOT NULL DEFAULT 0,Extension INTEGER NOT NULL,"Index" INTEGER NOT NULL,ProgID TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ProvisionedPackage;CREATE TABLE ProvisionedPackage(_ProvisionedPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Path TEXT NOT NULL COLLATE NOCASE,SignatureOrigin INTEGER NOT NULL DEFAULT 0,Region TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ProvisionedPackageDeleted;CREATE TABLE ProvisionedPackageDeleted(_ProvisionedPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,PackageIdentity INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,Path TEXT NOT NULL COLLATE NOCASE,SignatureOrigin INTEGER NOT NULL DEFAULT 0,Region TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS ProvisionedPackageExclude;CREATE TABLE ProvisionedPackageExclude(_ProvisionedPackageExcludeID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PublisherCacheFolder;CREATE TABLE PublisherCacheFolder(_PublisherCacheFolderID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,PackageExtension INTEGER NOT NULL,"Index" INTEGER NOT NULL,FolderName TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS Resource;CREATE TABLE Resource(_ResourceID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Language TEXT NOT NULL COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS SRJournal;CREATE TABLE SRJournal(_SRJournalID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ObjectType INTEGER NOT NULL DEFAULT 0,"Action" INTEGER NOT NULL DEFAULT 0,ObjectId INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL DEFAULT 0,PackageFamily INTEGER NOT NULL DEFAULT 0,PackageIdentity INTEGER NOT NULL DEFAULT 0,ApplicationIdentity INTEGER NOT NULL DEFAULT 0,WhenOccurred INTEGER NOT NULL,SequenceId INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS SRJournalArchive;CREATE TABLE SRJournalArchive(_SRJournalArchiveID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL,ObjectType INTEGER NOT NULL DEFAULT 0,"Action" INTEGER NOT NULL DEFAULT 0,ObjectId INTEGER NOT NULL,Flags INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,PackageFamily INTEGER NOT NULL,PackageIdentity INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,WhenOccurred INTEGER NOT NULL,SequenceId INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS SecondaryTile;CREATE TABLE SecondaryTile(_SecondaryTileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Flags INTEGER NOT NULL DEFAULT 0,TileTemplate INTEGER NOT NULL DEFAULT 0,TileId TEXT NOT NULL COLLATE NOCASE,Arguments TEXT COLLATE NOCASE,EditionId TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS SecondaryTileUser;CREATE TABLE SecondaryTileUser(_SecondaryTileUserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL DEFAULT 0,_Modified INTEGER NOT NULL DEFAULT 0,SecondaryTile INTEGER NOT NULL,User INTEGER NOT NULL,ApplicationIdentity INTEGER NOT NULL,State INTEGER NOT NULL DEFAULT 0,TileUniqueId BLOB NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS SecondaryTileUser_Add;CREATE VIEW SecondaryTileUser_Add AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Created>0;DROP VIEW IF EXISTS SecondaryTileUser_Update;CREATE VIEW SecondaryTileUser_Update AS SELECT _WorkId,_Modified AS ChangeId,2 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Modified>0;DROP VIEW IF EXISTS SecondaryTileUser_Delete;CREATE VIEW SecondaryTileUser_Delete AS SELECT 0 AS _WorkId,_Deleted AS ChangeId,3 AS Disposition,TileUniqueId,User FROM SecondaryTileUserChangelog WHERE _Deleted>0;DROP VIEW IF EXISTS SecondaryTileUser_AddNoUpdate;CREATE VIEW SecondaryTileUser_AddNoUpdate AS SELECT _WorkId,_Created AS ChangeId,1 AS Disposition,TileUniqueId,User FROM SecondaryTileUser WHERE _Created>0 AND _Modified<=0;DROP VIEW IF EXISTS SecondaryTileUserDataChange;CREATE VIEW SecondaryTileUserDataChange AS SELECT * FROM SecondaryTileUser_AddNoUpdate UNION ALL SELECT * FROM SecondaryTileUser_Update UNION ALL SELECT * FROM SecondaryTileUser_Delete;DROP TABLE IF EXISTS SecondaryTileUserChangelog;CREATE TABLE SecondaryTileUserChangelog(_SecondaryTileUserChangelogID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_Created INTEGER NOT NULL,_Deleted INTEGER NOT NULL,User INTEGER NOT NULL,TileUniqueId BLOB NOT NULL,WhenOccurred INTEGER NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS SecondaryTileView;CREATE VIEW SecondaryTileView AS SELECT st._SecondaryTileID AS _SecondaryTileID,st._Revision AS _Revision,st._WorkId AS _WorkId,a._ApplicationID AS Application,a.Package AS Package,st.Flags AS Flags,2 AS TileType,st.TileTemplate AS TileTemplate,st.TileId AS TileId,st.Arguments AS Arguments,st.EditionId AS EditionId,IFNULL(stu._Dictionary, st._Dictionary) AS _Dictionary,stu._SecondaryTileUserID AS _SecondaryTileUserID,stu._Revision AS _SecondaryTileUser_Revision,stu._Created AS _Created,stu._Modified AS _Modified,stu.User AS User,stu.ApplicationIdentity AS ApplicationIdentity,1 AS State,stu.TileUniqueId AS TileUniqueId,ai.ApplicationUserModelId AS ApplicationUserModelId FROM SecondaryTile AS st INNER JOIN SecondaryTileUser AS stu ON (stu.SecondaryTile=st._SecondaryTileID AND stu._WorkId=0) INNER JOIN ApplicationIdentity AS ai ON stu.ApplicationIdentity=ai._ApplicationIdentityID INNER JOIN Application AS a ON (a.ApplicationUserModelId=ai.ApplicationUserModelId AND a._WorkId=0) INNER JOIN PackageUser AS pu ON (pu.Package=a.Package AND pu.User=stu.User AND pu._WorkId=0) WHERE st._WorkId=0 ORDER BY st._SecondaryTileID;DROP TABLE IF EXISTS Sequence;CREATE TABLE Sequence(_SequenceID INTEGER PRIMARY KEY NOT NULL,Id INTEGER NOT NULL,LastValue INTEGER NOT NULL);INSERT INTO Sequence (Id, LastValue) VALUES(1, 0);INSERT INTO Sequence (Id, LastValue) VALUES(2, 0);INSERT INTO Sequence (Id, LastValue) VALUES(3, 0);DROP TABLE IF EXISTS TargetDeviceFamily;CREATE TABLE TargetDeviceFamily(_TargetDeviceFamilyID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL,Name INTEGER NOT NULL,MinVersion INTEGER NOT NULL,MaxVersion INTEGER NOT NULL,_Dictionary BLOB);DROP VIEW IF EXISTS TileView;CREATE VIEW TileView AS SELECT ptv._PrimaryTileID AS _TileViewID,ptv._Revision AS _Revision,ptv._WorkId AS _WorkId,ptv.Application AS Application,ptv.Package AS Package,ptv.Flags AS Flags,ptv.TileType AS TileType,ptv.TileTemplate AS TileTemplate,ptv.TileId AS TileId,ptv.Arguments AS Arguments,ptv.EditionId AS EditionId,ptv._Dictionary AS _Dictionary,ptv._PrimaryTileUserID AS _TileUserID,ptv._PrimaryTileUser_Revision AS _TileUser_Revision,ptv._Created AS _Created,ptv._Modified AS _Modified,ptv.User AS User,ptv.ApplicationIdentity AS ApplicationIdentity,ptv.State AS State,ptv.TileUniqueId AS TileUniqueId,ptv.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryTileView AS ptv UNION SELECT pptv._PrimaryTileID AS _TileViewID,pptv._Revision AS _Revision,pptv._WorkId AS _WorkId,pptv.Application AS Application,pptv.Package AS Package,pptv.Flags AS Flags,pptv.TileType AS TileType,pptv.TileTemplate AS TileTemplate,pptv.TileId AS TileId,pptv.Arguments AS Arguments,pptv.EditionId AS EditionId,pptv._Dictionary AS _Dictionary,pptv._PrimaryTileUserID AS _TileUserID,pptv._PrimaryTileUser_Revision AS _TileUser_Revision,pptv._Created AS _Created,pptv._Modified AS _Modified,pptv.User AS User,pptv.ApplicationIdentity AS ApplicationIdentity,pptv.State AS State,pptv.TileUniqueId AS TileUniqueId,pptv.ApplicationUserModelId AS ApplicationUserModelId FROM PrimaryPreviewTileView AS pptv UNION SELECT stv._SecondaryTileID AS _TileViewID,stv._Revision AS _Revision,stv._WorkId AS _WorkId,stv.Application AS Application,stv.Package AS Package,stv.Flags AS Flags,stv.TileType AS TileType,stv.TileTemplate AS TileTemplate,stv.TileId AS TileId,stv.Arguments AS Arguments,stv.EditionId AS EditionId,stv._Dictionary AS _Dictionary,stv._SecondaryTileUserID AS _TileUserID,stv._SecondaryTileUser_Revision AS _TileUser_Revision,stv._Created AS _Created,stv._Modified AS _Modified,stv.User AS User,stv.ApplicationIdentity AS ApplicationIdentity,stv.State AS State,stv.TileUniqueId AS TileUniqueId,stv.ApplicationUserModelId AS ApplicationUserModelId FROM SecondaryTileView AS stv;DROP VIEW IF EXISTS TileUserDataChange;CREATE VIEW TileUserDataChange AS SELECT * FROM PrimaryTileUserDataChange UNION ALL SELECT * FROM SecondaryTileUserDataChange;DROP TABLE IF EXISTS User;CREATE TABLE User(_UserID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,UserSid BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS WorkInProgress;CREATE TABLE WorkInProgress(_WorkInProgressID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,"Key" TEXT COLLATE NOCASE,_Dictionary BLOB);DROP TABLE IF EXISTS WowDependencyGraph;CREATE TABLE WowDependencyGraph(_WowDependencyGraphID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,_ShadowId INTEGER NOT NULL DEFAULT 0,_IsMarkedForDeletion INTEGER NOT NULL DEFAULT 0,User INTEGER NOT NULL,DependentPackage INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,SupplierPackage INTEGER NOT NULL,DependencyType INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS XboxPackage;CREATE TABLE XboxPackage(_XboxPackageID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL DEFAULT 0,EditionId TEXT NOT NULL COLLATE NOCASE,BuildId BLOB NOT NULL,DeviceId BLOB NOT NULL,BuildVersion INTEGER NOT NULL,ContentId BLOB NOT NULL,ProductId BLOB NOT NULL,MediaId TEXT COLLATE NOCASE,PackageSize INTEGER NOT NULL DEFAULT 0,TitleId INTEGER DEFAULT 0,PrimaryServiceConfigId BLOB,EraVersion INTEGER NOT NULL DEFAULT 0,EscrowedKeyBlobId BLOB,_Dictionary BLOB);
DROP TABLE IF EXISTS AppInstaller;CREATE TABLE AppInstaller(_AppInstallerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,Uri TEXT NOT NULL COLLATE NOCASE,Version INTEGER NOT NULL,LastChecked INTEGER NOT NULL,CheckUpdateInterval INTEGER NOT NULL DEFAULT 1440,Flags INTEGER NOT NULL DEFAULT 2,_Dictionary BLOB);DROP TABLE IF EXISTS AppxManifest;CREATE TABLE AppxManifest(_AppxManifestID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Xml BLOB NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS ContentGroup;CREATE TABLE ContentGroup(_ContentGroupID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,"Index" INTEGER NOT NULL DEFAULT 0,Name TEXT NOT NULL,ContentGroupType INTEGER NOT NULL DEFAULT 0,Status INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);DROP TABLE IF EXISTS ContentGroupFile;CREATE TABLE ContentGroupFile(_ContentGroupFileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,ContentGroup INTEGER NOT NULL,File INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS File;CREATE TABLE File(_FileID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,RelativeFilePath TEXT NOT NULL COLLATE NOCASE,Size INTEGER NOT NULL,Digest BLOB,_Dictionary BLOB);DROP TABLE IF EXISTS PackageAppInstaller;CREATE TABLE PackageAppInstaller(_PackageAppInstallerID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,AppInstaller INTEGER NOT NULL,_Dictionary BLOB);DROP TABLE IF EXISTS PackageSourceUri;CREATE TABLE PackageSourceUri(_PackageSourceUriID INTEGER PRIMARY KEY NOT NULL,_Revision INTEGER NOT NULL DEFAULT 1,_WorkId INTEGER NOT NULL DEFAULT 0,Package INTEGER NOT NULL,Uri TEXT NOT NULL COLLATE NOCASE,Kind INTEGER NOT NULL DEFAULT 0,_Dictionary BLOB);
DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Activation_ActivationKey;CREATE TRIGGER TRG_AFTERINSERT_Activation_ActivationKey AFTER INSERT ON Activation FOR EACH ROW WHEN NEW.ActivationKey IS NULL BEGIN UPDATE Activation SET ActivationKey=hash_base32(NEW.Flags, NEW.Executable, NEW.Entrypoint, NEW.RuntimeType, NEW.StartPage, NEW.ResourceGroup)WHERE _ActivationID=NEW._ActivationID;END;DROP INDEX IF EXISTS IDX_Application_ApplicationUserModelId_Package;CREATE INDEX IDX_Application_ApplicationUserModelId_Package ON Application(ApplicationUserModelId, Package);DROP INDEX IF EXISTS IDX_Application_Package;CREATE INDEX IDX_Application_Package ON Application(Package);DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Application;CREATE TRIGGER TRG_AFTERINSERT_Application AFTER INSERT ON Application FOR EACH ROW BEGIN INSERT OR IGNORE INTO ApplicationIdentity (ApplicationUserModelId) VALUES(NEW.ApplicationUserModelId);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Package;CREATE TRIGGER TRG_AFTERINSERT_Package AFTER INSERT ON Package FOR EACH ROW BEGIN INSERT OR IGNORE INTO PackageIdentity (PackageFamily, PackageFullName) VALUES(NEW.PackageFamily, NEW.PackageFullName);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUser_PackageFamilyUser;CREATE TRIGGER TRG_AFTERINSERT_PackageUser_PackageFamilyUser AFTER INSERT ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN INSERT OR IGNORE INTO PackageFamilyUser (PackageFamily, User, WhenInstalled, _Revision)SELECT p.PackageFamily, NEW.User, now(), 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE (SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=NEW.User AND UserSid<>X'010100000000000512000000'))AND NEW.Package=p._PackageID;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUser_PackageFamilyUser;CREATE TRIGGER TRG_BEFOREDELETE_PackageUser_PackageFamilyUser BEFORE DELETE ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN DELETE FROM PackageFamilyUser WHERE (SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=OLD.User AND UserSid<> X'010100000000000512000000'))AND User=OLD.User AND PackageFamily IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE OLD.Package=pu.Package AND OLD.User=pu.User LIMIT 1) AND (SELECT EXISTS(SELECT 1 WHERE (SELECT COUNT(*) AS count FROM PackageUser AS pu INNER JOIN Package AS p ON p.rowid=pu.Package WHERE p.PackageFamily IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE OLD.Package=pu.Package AND OLD.User=pu.User)) <= 1));END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_PackageUser_AppExecutionAliasUser_DynamicAppUriHandlerGroup;CREATE TRIGGER TRG_AFTERDELETE_PackageUser_AppExecutionAliasUser_DynamicAppUriHandlerGroup AFTER DELETE ON PackageUser FOR EACH ROW WHEN is_triggers_enabled()BEGIN DELETE FROM AppExecutionAliasUser WHERE User=OLD.User AND ApplicationIdentity NOT IN (SELECT ai._ApplicationIdentityID FROM ApplicationIdentity AS ai INNER JOIN Application AS a ON a.ApplicationUserModelId=ai.ApplicationUserModelId INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=OLD.User);DELETE FROM DynamicAppUriHandlerGroup WHERE User=OLD.User AND PackageFamily NOT IN (SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=OLD.User);END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PrimaryTileUser_Key;CREATE TRIGGER TRG_AFTERINSERT_PrimaryTileUser_Key AFTER INSERT ON PrimaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND NEW._WorkId=0 AND NEW._Created=0 BEGIN DELETE FROM PrimaryTileUserChangelog WHERE NEW._Created=0 AND User=NEW.User AND TileUniqueId=NEW.TileUniqueId;END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_PrimaryTileUser_Key;CREATE TRIGGER TRG_AFTERDELETE_PrimaryTileUser_Key AFTER DELETE ON PrimaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND OLD._WorkId=0 BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=1;INSERT OR REPLACE INTO PrimaryTileUserChangelog(_Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT 1, workid(), OLD._Created, s.LastValue, OLD.User, OLD.TileUniqueId, now(), NULL FROM Sequence AS s WHERE s.Id=1;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_SRJournal_SRJournalArchive;CREATE TRIGGER TRG_BEFOREDELETE_SRJournal_SRJournalArchive BEFORE DELETE ON SRJournal FOR EACH ROW WHEN sroptions() & 0x00100000 != 0 BEGIN INSERT INTO SRJournalArchive(_Revision, _WorkId, ObjectType, "Action", ObjectId, Flags,User, PackageFamily, PackageIdentity, ApplicationIdentity,WhenOccurred, SequenceId, _Dictionary)SELECT OLD._Revision, OLD._WorkId, OLD.ObjectType, OLD."Action", OLD.ObjectId, OLD.Flags,OLD.User, OLD.PackageFamily, OLD.PackageIdentity, OLD.ApplicationIdentity,OLD.WhenOccurred, OLD.SequenceId, OLD._Dictionary;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_SecondaryTileUser_Key;CREATE TRIGGER TRG_AFTERINSERT_SecondaryTileUser_Key AFTER INSERT ON SecondaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND NEW._WorkId=0 AND NEW._Created=0 BEGIN DELETE FROM SecondaryTileUserChangelog WHERE NEW._Created=0 AND User=NEW.User AND TileUniqueId=NEW.TileUniqueId;END;DROP TRIGGER IF EXISTS TRG_AFTERDELETE_SecondaryTileUser_Key;CREATE TRIGGER TRG_AFTERDELETE_SecondaryTileUser_Key AFTER DELETE ON SecondaryTileUser FOR EACH ROW WHEN is_triggers_enabled() AND OLD._WorkId=0 BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=1;INSERT OR REPLACE INTO SecondaryTileUserChangelog(_Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT 1, workid(), OLD._Created, s.LastValue, OLD.User, OLD.TileUniqueId, now(), NULL FROM Sequence AS s WHERE s.Id=1;END;DROP INDEX IF EXISTS IDX_SecondaryTileUser_User;CREATE INDEX IDX_SecondaryTileUser_User ON SecondaryTileUser(User);
DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Activation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Activation_SRJournal AFTER INSERT ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 1, workid(), 15, 1, NEW._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_Activation_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_Activation_SRJournal AFTER UPDATE ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 1, workid(), 15, 2, NEW._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Activation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Activation_SRJournal BEFORE DELETE ON Activation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, WhenOccurred, SequenceId)SELECT 1, workid(), 15, 3, OLD._ActivationID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_ActivationUser_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_ActivationUser_SRJournal AFTER INSERT ON ActivationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 16, 1, NEW._ActivationUserID, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_ActivationUser_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_ActivationUser_SRJournal AFTER UPDATE ON ActivationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 16, 2, NEW._ActivationUserID, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_ActivationUser_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_ActivationUser_SRJournal BEFORE DELETE ON ActivationUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 16, 3, OLD._ActivationUserID, OLD.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_AppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_AppUriHandler_SRJournal AFTER INSERT ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 9, 1, NEW._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_AppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_AppUriHandler_SRJournal AFTER UPDATE ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 9, 2, NEW._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_AppUriHandler_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_AppUriHandler_SRJournal BEFORE DELETE ON AppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 9, 3, OLD._AppUriHandlerID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_AppUriHandlerGroup_SRJournal AFTER INSERT ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 8, 1, NEW._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_AppUriHandlerGroup_SRJournal AFTER UPDATE ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 8, 2, NEW._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_AppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_AppUriHandlerGroup_SRJournal BEFORE DELETE ON AppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 8, 3, OLD._AppUriHandlerGroupID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Application;CREATE TRIGGER TRG_AFTERINSERT_Application AFTER INSERT ON Application FOR EACH ROW BEGIN INSERT OR IGNORE INTO ApplicationIdentity (ApplicationUserModelId) VALUES(NEW.ApplicationUserModelId);UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 3, 1, NEW._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE is_srjournal_enabled()AND s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package AND ai.ApplicationUserModelId=NEW.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_Application_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_Application_SRJournal AFTER UPDATE ON Application FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 3, 2, NEW._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package AND ai.ApplicationUserModelId=NEW.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Application_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Application_SRJournal BEFORE DELETE ON Application FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 3, 3, OLD._ApplicationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package AND ai.ApplicationUserModelId=OLD.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_ApplicationExtension_SRJournal AFTER INSERT ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 7, 1, NEW._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_ApplicationExtension_SRJournal AFTER UPDATE ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 7, 2, NEW._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_ApplicationExtension_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_ApplicationExtension_SRJournal BEFORE DELETE ON ApplicationExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 7, 3, OLD._ApplicationExtensionID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD._ApplicationExtensionID;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_DynamicAppUriHandler_SRJournal AFTER INSERT ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 11, 1, NEW._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=NEW.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_DynamicAppUriHandler_SRJournal AFTER UPDATE ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 11, 2, NEW._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=NEW.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_DynamicAppUriHandler_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_DynamicAppUriHandler_SRJournal BEFORE DELETE ON DynamicAppUriHandler FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 11, 3, OLD._DynamicAppUriHandlerID, dauhg.User, dauhg.PackageFamily, now(), s.LastValue FROM Sequence AS s CROSS JOIN DynamicAppUriHandlerGroup AS dauhg WHERE s.Id=2 AND dauhg._DynamicAppUriHandlerGroupID=OLD.DynamicAppUriHandlerGroup;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_DynamicAppUriHandlerGroup_SRJournal AFTER INSERT ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 10, 1, NEW._DynamicAppUriHandlerGroupID, NEW.User, NEW.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_DynamicAppUriHandlerGroup_SRJournal AFTER UPDATE ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 10, 2, NEW._DynamicAppUriHandlerGroupID, NEW.User, NEW.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_DynamicAppUriHandlerGroup_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_DynamicAppUriHandlerGroup_SRJournal BEFORE DELETE ON DynamicAppUriHandlerGroup FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 10, 3, OLD._DynamicAppUriHandlerGroupID, OLD.User, OLD.PackageFamily, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;DELETE FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=OLD._DynamicAppUriHandlerGroupID;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_FileTypeAssociation_SRJournal AFTER INSERT ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 19, 1, NEW._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_FileTypeAssociation_SRJournal AFTER UPDATE ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 19, 2, NEW._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_FileTypeAssociation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_FileTypeAssociation_SRJournal BEFORE DELETE ON FileTypeAssociation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 19, 3, OLD._FileTypeAssociationID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_HostRuntime_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_HostRuntime_SRJournal AFTER INSERT ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 18, 1, NEW._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=NEW.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_HostRuntime_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_HostRuntime_SRJournal AFTER UPDATE ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 18, 2, NEW._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=NEW.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_HostRuntime_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_HostRuntime_SRJournal BEFORE DELETE ON HostRuntime FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 18, 3, OLD._HostRuntimeID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN PackageExtension AS pe WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=pe.Package AND pe._PackageExtensionID=OLD.PackageExtension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Package;CREATE TRIGGER TRG_AFTERINSERT_Package AFTER INSERT ON Package FOR EACH ROW BEGIN INSERT OR IGNORE INTO PackageIdentity (PackageFamily, PackageFullName) VALUES(NEW.PackageFamily, NEW.PackageFullName);UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 1, 1, NEW._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE is_srjournal_enabled()AND s.Id=2 AND pi.PackageFullName=NEW.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_Package_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_Package_SRJournal AFTER UPDATE ON Package FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 1, 2, NEW._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE s.Id=2 AND pi.PackageFullName=NEW.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Package_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Package_SRJournal BEFORE DELETE ON Package FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 1, 3, OLD._PackageID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi WHERE s.Id=2 AND pi.PackageFullName=OLD.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageExtension_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageExtension_SRJournal AFTER INSERT ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 6, 1, NEW._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageExtension_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageExtension_SRJournal AFTER UPDATE ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 6, 2, NEW._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageExtension_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageExtension_SRJournal BEFORE DELETE ON PackageExtension FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 6, 3, OLD._PackageExtensionID, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageExternalLocation_SRJournal AFTER INSERT ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 17, 1, NEW._PackageExternalLocationID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageExternalLocation_SRJournal AFTER UPDATE ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 17, 2, NEW._PackageExternalLocationID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=NEW.Package;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageExternalLocation_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageExternalLocation_SRJournal BEFORE DELETE ON PackageExternalLocation FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 17, 3, OLD._PackageExternalLocationID, OLD.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=OLD.Package;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageFamily_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageFamily_SRJournal AFTER INSERT ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 5, 1, NEW._PackageFamilyID, NEW._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageFamily_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageFamily_SRJournal AFTER UPDATE ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 5, 2, NEW._PackageFamilyID, NEW._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageFamily_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageFamily_SRJournal BEFORE DELETE ON PackageFamily FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageFamily, WhenOccurred, SequenceId)SELECT 1, workid(), 5, 3, OLD._PackageFamilyID, OLD._PackageFamilyID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageMachineStatus;CREATE TRIGGER TRG_AFTERINSERT_PackageMachineStatus AFTER INSERT ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, 12, 1, NEW._PackageMachineStatusID, NEW.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageMachineStatus_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageMachineStatus_SRJournal AFTER UPDATE ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, 12, 2, NEW._PackageMachineStatusID, NEW.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageMachineStatus_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageMachineStatus_SRJournal BEFORE DELETE ON PackageMachineStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, 12, 3, OLD._PackageMachineStatusID, OLD.PackageIdentity, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUser_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageUser_SRJournal AFTER INSERT ON PackageUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 2, 1, NEW._PackageUserID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND p._PackageID=NEW.Package AND pi.PackageFullName=p.PackageFullName;UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 14, 1, NEW._PackageUserID, NEW.User, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a WHERE s.Id=2 AND p._PackageID=NEW.Package AND pi.PackageFullName=p.PackageFullName AND a.Package=p._PackageID AND ai.ApplicationUserModelId=a.ApplicationUserModelId;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageUser_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageUser_SRJournal AFTER UPDATE ON PackageUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 2, 2, NEW._PackageUserID, NEW.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND p._PackageID=NEW.Package AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUser_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageUser_SRJournal BEFORE DELETE ON PackageUser FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, PackageIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 2, 3, OLD._PackageUserID, OLD.User, pi._PackageIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN Package AS p CROSS JOIN PackageIdentity AS pi ON pi.PackageFullName=p.PackageFullName WHERE s.Id=2 AND p._PackageID=OLD.Package AND pi.PackageFullName=p.PackageFullName;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_PackageUserStatus_SRJournal AFTER INSERT ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 1, 13, 1, NEW._PackageUserStatusID, NEW.PackageIdentity, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_PackageUserStatus_SRJournal AFTER UPDATE ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 1, 13, 2, NEW._PackageUserStatusID, NEW.PackageIdentity, NEW.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_PackageUserStatus_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_PackageUserStatus_SRJournal BEFORE DELETE ON PackageUserStatus FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, ObjectType, Action, ObjectId, PackageIdentity, User, WhenOccurred, SequenceId)SELECT 1, 13, 3, OLD._PackageUserStatusID, OLD.PackageIdentity, OLD.User, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_Protocol_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_Protocol_SRJournal AFTER INSERT ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 20, 1, NEW._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_Protocol_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_Protocol_SRJournal AFTER UPDATE ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 20, 2, NEW._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=NEW.Extension;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_Protocol_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_Protocol_SRJournal BEFORE DELETE ON Protocol FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId)SELECT 1, workid(), 20, 3, OLD._ProtocolID, pi._PackageIdentityID, ai._ApplicationIdentityID, now(), s.LastValue FROM Sequence AS s CROSS JOIN PackageIdentity AS pi CROSS JOIN Package AS p CROSS JOIN ApplicationIdentity AS ai CROSS JOIN Application AS a CROSS JOIN ApplicationExtension AS ae WHERE s.Id=2 AND pi.PackageFullName=p.PackageFullName AND p._PackageID=a.Package AND ai.ApplicationUserModelId=a.ApplicationUserModelId AND a._ApplicationId=ae.Application AND ae._ApplicationExtensionID=OLD.Extension;END;DROP TRIGGER IF EXISTS TRG_AFTERINSERT_User_SRJournal;CREATE TRIGGER TRG_AFTERINSERT_User_SRJournal AFTER INSERT ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 4, 1, NEW._UserID, NEW._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_AFTER_UPDATE_User_SRJournal;CREATE TRIGGER TRG_AFTER_UPDATE_User_SRJournal AFTER UPDATE ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 4, 2, NEW._UserID, NEW._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;DROP TRIGGER IF EXISTS TRG_BEFOREDELETE_User_SRJournal;CREATE TRIGGER TRG_BEFOREDELETE_User_SRJournal BEFORE DELETE ON User FOR EACH ROW WHEN is_srjournal_enabled()BEGIN UPDATE Sequence SET LastValue=LastValue+1 WHERE Id=2 ;INSERT INTO SRJournal(_Revision, _WorkId, ObjectType, Action, ObjectId, User, WhenOccurred, SequenceId)SELECT 1, workid(), 4, 3, OLD._UserID, OLD._UserID, now(), s.LastValue FROM Sequence AS s WHERE s.Id=2 ;END;
dX0S5
DynamicAppUriHandler
DynamicAppUriHandler\Data
DynamicAppUriHandler\Data\
DynamicAppUriHandlerGroup
DynamicAppUriHandlerGroup\
DynamicAppUriHandlerGroup\Data
DynamicAppUriHandlerGroup\Data\
DynamicAppUriHandlerGroupStatics::ActivateInstance
DynamicAppUriHandlerGroupStatics::Add
DynamicAppUriHandlerGroupStatics::ctor
DynamicAppUriHandlerGroupStatics::Delete
DynamicAppUriHandlerGroupStatics::DeleteByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::dtor
DynamicAppUriHandlerGroupStatics::Exists
DynamicAppUriHandlerGroupStatics::ExistsByUser
DynamicAppUriHandlerGroupStatics::ExistsByUserAndPackageFamily
DynamicAppUriHandlerGroupStatics::ExistsByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::Find
DynamicAppUriHandlerGroupStatics::FindByUser
DynamicAppUriHandlerGroupStatics::FindByUserAndPackageFamily
DynamicAppUriHandlerGroupStatics::ReplaceByUserAndPackageFamilyNameAndName
DynamicAppUriHandlerGroupStatics::TryGet
DynamicAppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyAndName
DynamicAppUriHandlerGroupStatics::TryGetByUserAndPackageFamilyNameAndName
DynamicAppUriHandlerGroupStatics::Update
DynamicAppUriHandlerStatics::ActivateInstance
DynamicAppUriHandlerStatics::Add
DynamicAppUriHandlerStatics::ctor
DynamicAppUriHandlerStatics::Delete
DynamicAppUriHandlerStatics::DeleteByHostNameAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::DeleteByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::dtor
DynamicAppUriHandlerStatics::Exists
DynamicAppUriHandlerStatics::ExistsByDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::ExistsByHostName
DynamicAppUriHandlerStatics::ExistsByHostNameAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::ExistsByProgID
DynamicAppUriHandlerStatics::ExistsByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::Find
DynamicAppUriHandlerStatics::FindByDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::FindByHostName
DynamicAppUriHandlerStatics::FindByProgID
DynamicAppUriHandlerStatics::TryGet
DynamicAppUriHandlerStatics::TryGetByHostNameAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::TryGetByProgIDAndDynamicAppUriHandlerGroup
DynamicAppUriHandlerStatics::Update
E$SVW
e)5*_
E0SVW
E4VW3
e8kjuR7~
E9\$8t
Ebgcv
Econecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatusfactory.cpp
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
ElapsedTime
ElapsedTimeMSec
empty distance tree with lengths
EncodePointer
EndOfLifePackage
EndOfLifePackageStatics::ActivateInstance
EndOfLifePackageStatics::ctor
EndOfLifePackageStatics::dtor
EndOfLifePackageStatics::Exists
EndOfLifePackageStatics::ExistsByPackageFamily
EndOfLifePackageStatics::Find
EndOfLifePackageStatics::TryGet
EndOfLifePackageStatics::TryGetByPackageFamily
endswith
EndsWith(*string*,suffix) error: Invalid type (%d)
EndsWith(string,*suffix*) error: Invalid type (%d)
EnterCriticalSection
Enterprise
EnterpriseStatics::ActivateInstance
EnterpriseStatics::ctor
EnterpriseStatics::dtor
EnterpriseStatics::Exists
EnterpriseStatics::ExistsByEnterpriseId
EnterpriseStatics::Find
EnterpriseStatics::Get
EnterpriseStatics::GetByEnterpriseId
EnterpriseStatics::TryGet
EnterpriseStatics::TryGetByEnterpriseId
EnterpriseUninstallBlockList
Entity
Entrypoint
en-US
EqualSid
Error
ErrorCode
ErrorCount
EventActivityIdControl
EventData
EventProviderEnabled
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EVNTt
Exception
Executable
ExecutableName
execution_flags
ExecutionFlags
ExpandedSQL
ExpandedSQL=%hs
Extension
Extension\
ext-ms-onecore-appmodel-staterepository-cache-l1-1-0.dll
ext-ms-onecore-appmodel-staterepository-cache-l1-1-1.dll
ext-ms-win-mrmcorer-resmanager-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
EXTRA
F$;C@
F&cU#R
F(9^$u
F(G;~0r
f;F*skSW
FailFast
FailFastBusySnapshot.StatementInProgress: #%u Index=%u Database=%p Statement=%p SQL=%s
FailFastBusySnapshot: Statements Total=%u Busy=%u Database=%p FirstBusySQL=%hs
Failure
failureCount
failureId
failureType
FallbackError
Families
FApplicationStatics::Find
FEXCLUSIVE
fg:SM
Field
Fields
file error
FileDescription
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
fileName
Filename
FileStatics::ActivateInstance
FileStatics::ctor
FileStatics::dtor
FileStatics::Exists
FileStatics::ExistsByDigest
FileStatics::ExistsByPackage
FileStatics::ExistsByPackageAndRelativeFilePath
FileStatics::Find
FileStatics::FindByDigest
FileStatics::FindByPackage
FileStatics::Get
FileStatics::GetByPackageAndRelativeFilePath
FileStatics::TryGet
FileStatics::TryGetByPackageAndRelativeFilePath
FileType
FileType\
FileTypeAndExtension
FileTypeAndExtension\
FileTypeAssociation
FileTypeAssociation\Data
FileTypeAssociation\Data\
FileTypeAssociationStatics::ActivateInstance
FileTypeAssociationStatics::ctor
FileTypeAssociationStatics::dtor
FileTypeAssociationStatics::Exists
FileTypeAssociationStatics::ExistsByContentType
FileTypeAssociationStatics::ExistsByContentTypeAndExtension
FileTypeAssociationStatics::ExistsByExtension
FileTypeAssociationStatics::ExistsByExtensionAndIndex
FileTypeAssociationStatics::ExistsByFileType
FileTypeAssociationStatics::ExistsByFileTypeAndExtension
FileTypeAssociationStatics::ExistsByProgID
FileTypeAssociationStatics::ExistsByProgIDAndExtension
FileTypeAssociationStatics::ExistsByUserAndContentType
FileTypeAssociationStatics::ExistsByUserAndFileType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndContentType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndContentTypeAndPackageFamilyName
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndFileType
FileTypeAssociationStatics::ExistsByUserOrDefaultAccountAndFileTypeAndPackageFamilyName
FileTypeAssociationStatics::Find
FileTypeAssociationStatics::FindByContentType
FileTypeAssociationStatics::FindByContentTypeAndExtension
FileTypeAssociationStatics::FindByExtension
FileTypeAssociationStatics::FindByFileType
FileTypeAssociationStatics::FindByFileTypeAndExtension
FileTypeAssociationStatics::FindByProgID
FileTypeAssociationStatics::FindByProgIDAndExtension
FileTypeAssociationStatics::FindByUser
FileTypeAssociationStatics::FindByUserAndContentType
FileTypeAssociationStatics::FindByUserAndFileType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndContentType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndContentTypeAndPackageFamilyName
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndFileType
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndFileTypeAndPackageFamilyName
FileTypeAssociationStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
FileTypeAssociationStatics::Get
FileTypeAssociationStatics::GetByExtensionAndIndex
FileTypeAssociationStatics::TryGet
FileTypeAssociationStatics::TryGetByExtensionAndIndex
FileVersion
FirstBusySQL
FirstReportedUptime
FirstReportedWhen
FixAllCascadingInDeploymentPartition
FixAllCascadingInMachinePartition
FixCount
Flags
Flags2
FormatMessageW
Found
FoundSchemaVersion
FreeLibrary
FreeTransientObjectSecurityDescriptor
function
g 44B'
g#\!R
G,;A@
g,ZQakg&>
G@#w,
G<#WL
G<#WL#
G<)_h)_d)_T
G0;A@
GCChangelogs
GCChangelogsInterval
Gd+GhY=
Gdf+G\fH
Gdf+Gh
GetAddress
GetApplicationUserModelIdFromToken
GetChanges() called but !db.IsOpen()
GetCurrentApplicationUserModelId
GetCurrentPackageFamilyName
GetCurrentPackageFullName
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetFileAttributesW
GetFileInformationByHandleEx
GetLastError
GetLastInsertRowID() called but !db.IsOpen()
GetLengthSid
GetLocalTime
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetPackageFullNameFromToken
GetPersistedRegistryLocationW
GetProcAddress
GetProcessHeap
GetProcessId
GetSystemTimeAsFileTime
GetTempPathW
GetTickCount
GetTokenInformation
gIF2S
Gl;OxwY
Global\StateRepository.PrimaryTileUserNotificationChannel.
Global\StateRepository.SecondaryTileUserNotificationChannel.
GlobalCollection
GR I^
gSb2>
GUVP=
Gyp*`?
h1^GW
hash_base32
hash_base32() doesn't support double (%d)
HashDigestLength
Hasher.GetDigestAsBase32(text) failed
Hasher.Start() failed
Hasher.Update(integer) failed
Hasher.Update(text) failed
HeapAlloc
HeapFree
HostId
HostIdAndPackageExtension
HostIdAndPackageExtension\
HostName
HostName\
HostNameAndDynamicAppUriHandlerGroup
HostNameAndDynamicAppUriHandlerGroup\
HostNameAndExtension
HostNameAndExtension\
HostRuntime
HostRuntime\Data
HostRuntime\Data\
HostRuntimeStatics::ActivateInstance
HostRuntimeStatics::ctor
HostRuntimeStatics::dtor
HostRuntimeStatics::Exists
HostRuntimeStatics::ExistsByHostId
HostRuntimeStatics::ExistsByPackageExtension
HostRuntimeStatics::ExistsByPackageExtensionAndHostId
HostRuntimeStatics::Find
HostRuntimeStatics::FindByHostId
HostRuntimeStatics::FindByPackageExtension
HostRuntimeStatics::GetByUserAndHostIdAndPackageFullName
HostRuntimeStatics::TryGet
HostRuntimeStatics::TryGetByPackageExtensionAndHostId
Hr?4Y
hresult
HResult
hresult
hw^wj[sY
i]5rhq
I0G1-0+
I0j0t0~0
I99Iu
iF{ln
ifq+H
imageName
imageSize
incompatible version
incomplete distance tree
incomplete dynamic bit lengths tree
incomplete literal/length tree
incorrect data check
incorrect header check
Index
Information
InitializeCriticalSectionEx
InitializeSRWLock
InitOnceBeginInitialize
InitOnceComplete
InitOnceExecuteOnce
INSERT INTO AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO ConnectedSet (_Revision, Name, Flags, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO ConnectedSetPackageFamily (_Revision, ConnectedSet, PackageFamily, _Dictionary) VALUES(?,?,?,?);
INSERT INTO CustomInstallWork (_Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO DynamicAppUriHandler (_Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO DynamicAppUriHandlerGroup (_Revision, User, PackageFamily, Name, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, compress(s.Xml), s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s._ContentGroupID, s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s._Dictionary FROM Source.AppInstaller AS s;UPDATE main.PackageAppInstaller SET AppInstaller=(SELECT anew._AppInstallerID FROM main.PackageAppInstaller AS pnew INNER JOIN Source.PackageAppInstaller AS pold ON pnew._PackageAppInstallerID=pold._PackageAppInstallerID INNER JOIN Source.AppInstaller AS aold ON aold._AppInstallerID=pold.AppInstaller LEFT JOIN main.AppInstaller AS anew ON anew.Uri=aold.Uri WHERE main.PackageAppInstaller.AppInstaller=pold.AppInstaller);INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.File (_FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary)SELECT s._FileID, s._Revision, s._WorkId, s.Package, s.RelativeFilePath, s.Size, s.Digest, s._Dictionary FROM Source.File AS s;INSERT INTO main.AppxManifest (_AppxManifestID, _Revision, _WorkId, Package, Xml, _Dictionary)SELECT s._AppxManifestID, s._Revision, s._WorkId, s.Package, s.Xml, s._Dictionary FROM Source.AppxManifest AS s;INSERT INTO main.ContentGroup (_ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary)SELECT s._ContentGroupID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.ContentGroupType, s.Status, s._Dictionary FROM Source.ContentGroup AS s;INSERT INTO main.ContentGroupFile (_ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary)SELECT s._ContentGroupFileID, s._Revision, s._WorkId, s.ContentGroup, s.File, s._Dictionary FROM Source.ContentGroupFile AS s;INSERT INTO main.PackageSourceUri (_PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary)SELECT s._PackageSourceUriID, s._Revision, s._WorkId, s.Package, s.Uri, s.Kind, s._Dictionary FROM Source.PackageSourceUri AS s;INSERT INTO main.AppInstaller (_AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary)SELECT s._AppInstallerID, s._Revision, s.Uri, s.Version, s.LastChecked, s.CheckUpdateInterval, s.Flags, s._Dictionary FROM Source.AppInstaller AS s;INSERT INTO main.PackageAppInstaller (_PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary)SELECT s._PackageAppInstallerID, s._Revision, s._WorkId, s.Package, s.AppInstaller, s._Dictionary FROM Source.PackageAppInstaller AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, PackageOrigin, Enterprise, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE (s.IsDevelopmentMode) WHEN 0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetPlatform, s.Capabilities, s.SupportedUsers, s.Origin, s.Enterprise, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary )SELECT s._TargetPlatformID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetPlatform AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.Package_User AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PolicyID, s._Revision, s._WorkId, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, CASE WHEN s.IsDevelopmentMode=0 THEN 0 ELSE 1 END AS Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x0180);INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.Activation (_ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary)SELECT s._ActivationID, s._Revision, s.ActivationKey, s.Flags, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s._Dictionary FROM Source.Activation AS s;INSERT INTO main.ActivationUser (_ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary)SELECT s._ActivationUserID, s._Revision, s._WorkId, s.Activation, s.User, s._Dictionary FROM Source.ActivationUser AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.Flags2, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.PackageExternalLocation (_PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary)SELECT s._PackageExternalLocationID, s._Revision, s._WorkId, s.User, s.Package, s.Path, s._Dictionary FROM Source.PackageExternalLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s.Parameters, s._Dictionary FROM Source.Application AS s;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s.Parameters, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.HostRuntime (_HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary)SELECT s._HostRuntimeID, s._Revision, s._WorkId, s.HostId, s.PackageExtension, s._Dictionary FROM Source.HostRuntime AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Activation, s.HostId, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s.Parameters, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, s_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN Source.ApplicationIdentity AS s_ai ON s_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (_ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary)SELECT s._ApplicationIdentityID, s._Revision, s.ApplicationUserModelId, s._Dictionary FROM Source.ApplicationIdentity AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageMachineStatus (_PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary)SELECT s._PackageMachineStatusID, s._Revision, s.PackageIdentity, s.Status, s._Dictionary FROM Source.PackageMachineStatus AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s.MutableLink, s.MutableLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageFamilyUser (_PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary)SELECT s._PackageFamilyUserID, s._Revision, s.PackageFamily, s.User, s.WhenInstalled, s._Dictionary FROM Source.PackageFamilyUser AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.PackageUserStatus (_PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary)SELECT s._PackageUserStatusID, s._Revision, s.PackageIdentity, s.User, s.Status, s._Dictionary FROM Source.PackageUserStatus AS s;INSERT INTO main.PackageFamilyUserResource (_PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary)SELECT s._PackageFamilyUserResourceID, s._Revision, s.PackageFamilyUser, s.ResourceId, s._Dictionary FROM Source.PackageFamilyUserResource AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s.Flags, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.NamedDependency (_NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary)SELECT s._NamedDependncyID, s._Revision, s._WorkId, s.DependencyType, s.Package, s."Index", s.Name, s.Version, s._Dictionary FROM Source.NamedDependency AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x80) WHERE Entrypoint IS NOT NULL AND (Flags & 0x04) == 0;UPDATE main.ApplicationExtension SET Flags=(Flags | 0x100) WHERE Entrypoint IS NOT NULL AND (Flags & 0x30) == 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s.Flags, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppExecutionAliasUser (_AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary)SELECT s._AppExecutionAliasUserID, s._Revision, s.User, s.ApplicationIdentity, s.Status, s._Dictionary FROM Source.AppExecutionAliasUser AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandlerGroup (_AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary)SELECT s._AppUriHandlerGroupID, s._Revision, s._WorkId, s.Name, s.Extension, s._Dictionary FROM Source.AppUriHandlerGroup AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s.AppUriHandlerGroup, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.DynamicAppUriHandlerGroup (_DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary)SELECT s._DynamicAppUriHandlerGroupID, s._Revision, s.User, s.PackageFamily, s.Name, s._Dictionary FROM Source.DynamicAppUriHandlerGroup AS s;INSERT INTO main.DynamicAppUriHandler (_DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary)SELECT s._DynamicAppUriHandlerID, s._Revision, s.DynamicAppUriHandlerGroup, s.HostName, s.ProgID, s._Dictionary FROM Source.DynamicAppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s;INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary)SELECT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, s.ApplicationIdentity, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT INTO main.ProvisionedPackage (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackage AS s;INSERT INTO main.ProvisionedPackageDeleted (_ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary)SELECT s._ProvisionedPackageID, s._Revision, s.PackageIdentity, s.Flags, s.Path, s.SignatureOrigin, s.Region, s._Dictionary FROM Source.ProvisionedPackageDeleted AS s;INSERT INTO main.ProvisionedPackageExclude (_ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary)SELECT s._ProvisionedPackageExcludeID, s._Revision, s.User, s.PackageFamily, s._Dictionary FROM Source.ProvisionedPackageExclude AS s;INSERT INTO main.EndOfLifePackage (_EndOfLifePackage, _Revision, PackageFamily, _Dictionary)SELECT s._EndOfLifePackage, s._Revision, s.PackageFamily, s._Dictionary FROM Source.EndOfLifePackage AS s;INSERT INTO main.PackageSuperceded (_PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary)SELECT s._PackageSupercededID, s._Revision, s.PackageIdentity, s.User, s._Dictionary FROM Source.PackageSuperceded AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;INSERT INTO main.ConnectedSet (_ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary)SELECT s._ConnectedSetID, s._Revision, s.Name, s.Flags, s.Status, s._Dictionary FROM Source.ConnectedSet AS s;INSERT INTO main.ConnectedSetPackageFamily (_ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary)SELECT s._ConnectedSetPackageFamilyID, s._Revision, s.ConnectedSet, s.PackageFamily, s._Dictionary FROM Source.ConnectedSetPackageFamily AS s;INSERT INTO main.CustomInstallWork (_CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary)SELECT s._CustomInstallWorkID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.Flags, s.Status, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallWork AS s;INSERT INTO main.CustomInstall (_CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary)SELECT s._CustomInstallID, s._Revision, s._WorkId, s.PackageExtension, s.Verb, s.Flags, s._Dictionary FROM Source.CustomInstall AS s;INSERT INTO main.CustomInstallProcess (_CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary)SELECT s._CustomInstallProcessID, s._Revision, s._WorkId, s.CustomInstall, s."Index", s.Flags, s.File, s.Arguments, s._Dictionary FROM Source.CustomInstallProcess AS s;INSERT INTO main.CustomInstallProcessUserStatus (_CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary)SELECT s._CustomInstallProcessStatusID, s._Revision, s._WorkId, s.CustomInstallProcess, s.User, s.Status, s._Dictionary FROM Source.CustomInstallProcessUserStatus AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s._Dictionary FROM Source.PackageExtension AS s;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO main.WorkInProgress (_WorkInProgressID, _Revision, "Key", _Dictionary)SELECT s._WorkInProgressID, s._Revision, s."Key", s._Dictionary FROM Source.WorkInProgress AS s;INSERT INTO main.PackageFamily (_PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary)SELECT s._PackageFamilyID, s._Revision, s.Name, s.Publisher, s.PublisherId, s.PackageFamilyName, s.PackageSID, s._Dictionary FROM Source.PackageFamily AS s;INSERT INTO main.Enterprise (_EnterpriseID, _Revision, EnterpriseId, _Dictionary)SELECT s._EnterpriseID, s._Revision, s.EnterpriseId, s._Dictionary FROM Source.Enterprise AS s;INSERT INTO main.User (_UserID, _Revision, UserSid, _Dictionary)SELECT s._UserID, s._Revision, s.UserSid, s._Dictionary FROM Source.User AS s;INSERT INTO main.PackageIdentity (_PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary)SELECT s._PackageIdentityID, s._Revision, s.PackageFamily, s.PackageFullName, s._Dictionary FROM Source.PackageIdentity AS s;INSERT INTO main.ApplicationIdentity (ApplicationUserModelId) SELECT DISTINCT s.ApplicationUserModelId FROM Source.Application AS s;INSERT INTO main.DeploymentHistory (_DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary)SELECT s._DeploymentHistoryID, s._Revision, s._WorkId, s.PackageIdentity, s.User, s.HResult, s.WhenOccurred, s._Dictionary FROM Source.DeploymentHistory AS s;INSERT INTO main.Package (_PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary)SELECT s._PackageID, s._Revision, s._WorkId, s.PackageFamily, s.ResourceId, s.Architecture, s.Version, s.PackageFullName, s.IsInbox, s.PackageType, s.Flags, s.DisplayName, s.PublisherDisplayName, s.Description, s.Logo, s.OSMinVersion, s.OSMaxVersionTested, s.TargetDeviceFamily, s.Capabilities, s.SupportedUsers, s.SignatureOrigin, s.PackageOrigin, s.Enterprise, s.SourceBundle, s.EditionId, s.OSVersionWhenIndexed, s.InPlaceUpdateBaseline, s._Dictionary FROM Source.Package AS s;INSERT INTO main.PackageLocation (_PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, _Dictionary)SELECT s._PackageLocationID, s._Revision, s._WorkId, s.Package, s.Volume, s.InstalledLocation, s._Dictionary FROM Source.PackageLocation AS s;INSERT INTO main.MrtPackage (_MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary)SELECT s._MrtPackageID, s._Revision, s._WorkId, s.Package, s.DisplayNameReference, s.PublisherDisplayNameReference, s.DescriptionReference, s.LogoReference, s._Dictionary FROM Source.MrtPackage AS s;INSERT INTO main.TargetDeviceFamily (_TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary)SELECT s._TargetDeviceFamilyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.TargetDeviceFamily AS s;INSERT INTO main.PackageUser (_PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT s._PackageUserID, s._Revision, s._WorkId, s.Package, s.User, s.InstallTime, s.OSVersionWhenInstalled, s.WhenRestored, s.IsExplicitlyInstalled, s.DeploymentState, s.AppDataVolume, s._Dictionary FROM Source.PackageUser AS s;INSERT INTO main.Application (_ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, _Dictionary)SELECT s._ApplicationID, s._Revision, s._WorkId, s.Package, s."Index", s.ApplicationType, s.Flags, s.Subsystem, s.PackageRelativeApplicationId, s.ApplicationUserModelId, s.DisplayName, s.Description, s.Square150x150Logo, s.Square44x44Logo, s.Wide310x150Logo, s.Square310x310Logo, s.Square71x71Logo, s.ForegroundText, s.BackgroundColor, s.Executable, s.Entrypoint, s.StartPage, s.ResourceGroup, s.LockScreenNotification, s.LockScreenBadgeLogo, s.SplashScreenImage, s.SplashScreenBackgroundColor, s.InitialRotationPreference, s.ApplicationViewMinWidth, s.AppListEntry, s.EditionId, s.VisualGroup, s._Dictionary FROM Source.Application AS s;UPDATE main.Application SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.Application SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.Application SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.MrtApplication (_MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary)SELECT s._MrtApplicationID, s._Revision, s._WorkId, s.Application, s.DisplayNameReference, s.DescriptionReference, s.Square150x150LogoReference, s.Square44x44LogoReference, s.Wide310x150LogoReference, s.Square310x310LogoReference, s.Square71x71LogoReference, s.StartPageReference, s.SplashScreenImageReference, s.VisualGroupReference, s._Dictionary FROM Source.MrtApplication AS s;INSERT INTO main.ApplicationContentUriRule (_ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary)SELECT s._ApplicationContentUriRuleID, s._Revision, s._WorkId, s.Application, s."Index", s.Uri, s.Type, s.WindowsRuntimeAccess, s.Flags, s._Dictionary FROM Source.ApplicationContentUriRule AS s;INSERT INTO main.DefaultTile (_DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary)SELECT s._DefaultTileID, s._Revision, s._WorkId, s.Application, s.UpdateRecurrence, s.UpdateUriTemplate, s.ShowNameOnTiles, s.ShortName, s.DefaultSize, s.HoloContentChoice, s.MixedRealityModel, s._Dictionary FROM Source.DefaultTile AS s;INSERT INTO main.MrtDefaultTile (_MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary)SELECT s._MrtDefaultTileID, s._Revision, s._WorkId, s.DefaultTile, s.ShortNameReference, s._Dictionary FROM Source.MrtDefaultTile AS s;INSERT INTO main.MrtSharedPri (_MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary)SELECT s._MrtSharedPriID, s._Revision, s._WorkId, s.Package, s.Filename, s._Dictionary FROM Source.MrtSharedPri AS s;INSERT INTO main.MrtUserPri (_MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary)SELECT s._MrtUserPriID, s._Revision, s._WorkId, s.Package, s.User, s.Filename, s.MrtSharedPri, s._Dictionary FROM Source.MrtUserPri AS s;INSERT INTO main.Resource (_ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary)SELECT s._ResourceID, s._Revision, s._WorkId, s.Package, s."Index", s.Language, s._Dictionary FROM Source.Resource AS s;INSERT INTO main.Dependency (_DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, _Dictionary)SELECT s._DependencyID, s._Revision, s._WorkId, s.DependentPackage, s."Index", s.DependencyType, s.Name, s.Publisher, s.MinVersion, s.MaxVersion, s._Dictionary FROM Source.Dependency AS s;INSERT INTO main.DependencyGraph (_DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._DependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.DependencyGraph AS s;INSERT INTO main.WowDependencyGraph (_WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary)SELECT s._WowDependencyGraphID, s._Revision, s._WorkId, s._ShadowId, s._IsMarkedForDeletion, s.User, s.DependentPackage, s."Index", s.SupplierPackage, s.DependencyType, s._Dictionary FROM Source.WowDependencyGraph AS s;INSERT INTO main.AppxExtension (_AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary)SELECT s._AppxExtensionID, s._Revision, s._WorkId, s.User, s.Package, s.Category, s.KeyString, s.RegistrationInformation, s.ExtensionStatus, s._Dictionary FROM Source.AppxExtension AS s;INSERT INTO main.PackageExtension (_PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, Flags, _Dictionary)SELECT s._PackageExtensionID, s._Revision, s._WorkId, s.Package, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.Flags, s._Dictionary FROM Source.PackageExtension AS s;UPDATE main.PackageExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.PackageExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x80) WHERE (Flags & 0x04) == 0;UPDATE main.PackageExtension SET Flags=(Flags | 0x100) WHERE (Flags & 0x30) == 0;INSERT INTO main.PublisherCacheFolder (_PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary)SELECT s._PublisherCacheFolderID, s._Revision, s._WorkId, s.PackageExtension, s."Index", s.FolderName, s._Dictionary FROM Source.PublisherCacheFolder AS s;INSERT INTO main.ApplicationExtension (_ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, _LocalizedDictionary, _Dictionary)SELECT s._ApplicationExtensionID, s._Revision, s._WorkId, s.Application, s."Index", s.Category, s.Executable, s.Entrypoint, s.RuntimeType, s.StartPage, s.ResourceGroup, s.Flags, s.Subsystem, s._LocalizedDictionary, s._Dictionary FROM Source.ApplicationExtension AS s;UPDATE main.ApplicationExtension SET _Dictionary=NULL WHERE Category LIKE 'windows.activatableClass%' OR Category='windows.comInterface' OR Category='windows.comServer';UPDATE main.ApplicationExtension SET Flags=(Flags | 0x10) WHERE (Flags & 0x04) != 0;INSERT INTO main.FileTypeAssociation (_FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary)SELECT s._FileTypeAssociationID, s._Revision, s._WorkId, s.FileType, s.ContentType, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.FileTypeAssociation AS s;INSERT INTO main.Protocol (_ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary)SELECT s._ProtocolID, s._Revision, s._WorkId, s.ProtocolName, s.ReturnResults, s.Extension, s."Index", s.ProgID, s._Dictionary FROM Source.Protocol AS s;INSERT INTO main.ApplicationBackgroundTask (_BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary)SELECT s._BackgroundTaskID, s._Revision, s._WorkId, s.Type, s.Extension, s."Index", s._Dictionary FROM Source.ApplicationBackgroundTask AS s;INSERT INTO main.AppExecutionAlias (_AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, _Dictionary)SELECT s._AppExecutionAliasID, s._Revision, s._WorkId, s.Alias, s.Extension, s._Dictionary FROM Source.AppExecutionAlias AS s;INSERT INTO main.AppService (_AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary)SELECT s._AppServiceID, s._Revision, s._WorkId, s.Name, s.Extension, s."Index", s._Dictionary FROM Source.AppService AS s;INSERT INTO main.AppUriHandler (_AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, _Dictionary)SELECT s._AppUriHandlerID, s._Revision, s._WorkId, s.HostName, s.Extension, s.ProgID, s._Dictionary FROM Source.AppUriHandler AS s;INSERT INTO main.PackageProperty (_PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary)SELECT s._PackagePropertyID, s._Revision, s._WorkId, s.Package, s."Index", s.Name, s._Dictionary FROM Source.PackageProperty AS s;INSERT INTO main.ApplicationProperty (_ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary)SELECT s._ApplicationPropertyID, s._Revision, s._WorkId, s.Application, s."Index", s.Name, s._Dictionary FROM Source.ApplicationProperty AS s;INSERT INTO main.Bundle (_BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary)SELECT s._BundleID, s._Revision, s._WorkId, s.Package, s.UniqueLanguage, s.UniqueScale, s.UniqueDXFeatureLevel, s._Dictionary FROM Source.Bundle AS s;INSERT INTO main.BundlePackage (_BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary)SELECT s._BundlePackageID, s._Revision, s._WorkId, s.Bundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s.Flags, s._Dictionary FROM Source.BundlePackage AS s;INSERT INTO main.BundleResource (_BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._BundleResourceID, s._Revision, s._WorkId, s.BundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.BundleResource AS s;INSERT INTO main.OptionalBundle (_OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary)SELECT s._OptionalBundleID, s._Revision, s._WorkId, s.MainBundle, s.Name, s.Publisher, s.Version, s.Filename, s._Dictionary FROM Source.OptionalBundle AS s;INSERT INTO main.OptionalBundlePackage (_OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary)SELECT s._OptionalBundlePackageID, s._Revision, s._WorkId, s.OptionalBundle, s.PackageType, s.Version, s.Architecture, s.ResourceId, s.Filename, s."Offset", s.Size, s._Dictionary FROM Source.OptionalBundlePackage AS s;INSERT INTO main.OptionalBundleResource (_OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary)SELECT s._OptionalBundleResourceID, s._Revision, s._WorkId, s.OptionalBundlePackage, s.Language, s.Scale, s.DXFeatureLevel, s._Dictionary FROM Source.OptionalBundleResource AS s;INSERT INTO main.XboxPackage (_XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary)SELECT s._XboxPackageID, s._Revision, s._WorkId, s.Package, s.EditionId, s.BuildId, s.DeviceId, s.BuildVersion, s.ContentId, s.ProductId, s.MediaId, s.PackageSize, s.TitleId, s.PrimaryServiceConfigId, s.EraVersion, s.EscrowedKeyBlobId, s._Dictionary FROM Source.XboxPackage AS s;INSERT INTO main.PackageFamilyPolicy (_PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackageFamilyPolicyID, s._Revision, s._WorkId, s.User, s.PackageFamily, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackageFamilyPolicy AS s;INSERT INTO main.PackagePolicy (_PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary)SELECT s._PackagePolicyID, s._Revision, s._WorkId, s.User, s.Package, s.Name, s."Index", s.ValueString, s.ValueNumber, s._Dictionary FROM Source.PackagePolicy AS s;INSERT INTO main.AppExtensionHost (_AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary)SELECT s._AppExtensionHostID, s._Revision, s._WorkId, s.Extension, s.Name, s._Dictionary FROM Source.AppExtensionHost AS s;INSERT INTO main.AppExtension (_AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary)SELECT s._AppExtensionID, s._Revision, s._WorkId, s.Name, s.Id, s.PublicFolder, s.DisplayName, s.Description, s.Extension, s._Dictionary FROM Source.AppExtension AS s;INSERT INTO main.PrimaryTile (_PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._PrimaryTileID, s._Revision, s._WorkId, s.Application, s.Package, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.PrimaryTile AS s WHERE s._PrimaryTileID IN (SELECT spt._PrimaryTileID FROM Source.PrimaryTile AS spt INNER JOIN Source.Application AS sa ON spt.Application=sa._ApplicationID INNER JOIN Source.Package AS sp ON spt.Package=sp._PackageID AND sa.Package=sp._PackageID WHERE spt._WorkId<=0 AND sa._WorkId<=0 AND sp._WorkId<=0 GROUP BY spt.Application);INSERT INTO main.PrimaryTileUser (_PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._PrimaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.PrimaryTileUser AS s INNER JOIN Source.PrimaryTile AS s_pt ON s_pt._PrimaryTileID=s.PrimaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_pt.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId GROUP BY s.User, m_ai._ApplicationIdentityID, s._WorkId;INSERT INTO main.PrimaryTileUserChangelog (_PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._PrimaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.PrimaryTileUserChangelog AS s;INSERT INTO main.SecondaryTile (_SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary)SELECT s._SecondaryTileID, s._Revision, s._WorkId, s.Flags, s.TileTemplate, s.TileId, s.Arguments, s.EditionId, s._Dictionary FROM Source.SecondaryTile AS s;INSERT INTO main.SecondaryTileUser (_SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) SELECT DISTINCT s._SecondaryTileUserID, s._Revision, s._WorkId, s._Created, s._Modified, s.SecondaryTile, s.User, m_ai._ApplicationIdentityID, s.State, s.TileUniqueId, s._Dictionary FROM Source.SecondaryTileUser AS s INNER JOIN Source.SecondaryTile AS s_st ON s_st._SecondaryTileID=s.SecondaryTile INNER JOIN Source.Application AS s_a ON s_a._ApplicationID=s_st.Application INNER JOIN main.ApplicationIdentity AS m_ai ON m_ai.ApplicationUserModelId=s_a.ApplicationUserModelId;INSERT INTO main.SecondaryTileUserChangelog (_SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary)SELECT s._SecondaryTileUserChangelogID, s._Revision, s._WorkId, s._Created, s._Deleted, s.User, s.TileUniqueId, s.WhenOccurred, s._Dictionary FROM Source.SecondaryTileUserChangelog AS s;INSERT OR REPLACE INTO main.Sequence (_SequenceID, Id, LastValue)SELECT s._SequenceID, s.Id, s.LastValue FROM Source.Sequence AS s;INSERT INTO main.MigratorPatch (_MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary)SELECT s._MigratorPatchID, s._Revision, s._WorkId, s.PatchId, s.HResult, s.StateRepositoryVersion, s."When", s._Dictionary FROM Source.MigratorPatch AS s;
INSERT INTO PackageFamilyPolicy (_Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageFamilyUserResource (_Revision, PackageFamilyUser, ResourceId, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackagePolicy (_Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageUser(_Revision, _WorkId, Package, User, InstallTime, IsExplicitlyInstalled, DeploymentState, AppDataVolume)SELECT 1, 0, _PackageID, (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'), now(), 1, 6, 0 FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser);
INSERT INTO PrimaryTile (_Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO PrimaryTileUser (_Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO SecondaryTile (_Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO SecondaryTileUser (_Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO Sequence (Id, LastValue) VALUES(?,?);
INSERT INTO XboxPackage (_Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT OR IGNORE INTO User(_Revision, UserSid, _Dictionary)VALUES(1, X'010100000000000512000000', NULL);
InstalledLocation
insufficient memory
InternalName
invalid bit length repeat
invalid block type
invalid distance code
invalid literal/length code
invalid stored block lengths
invalid window size
Io=aW\
io2Mn
IoPriority
is_srjournal_enabled
is_triggers_enabled
IsDebuggerPresent
iSgA)
IsInAutoCommitMode() called but !db.IsOpen()
Issue
IsValidSid
itvR+
Iv`i@
j#j$h
j&j'3
j)X8d
j^[f9
j^^f91
j^_f98
j^_f99
j^_f99j
j^Zf9
J>f;O
J0Q0~0
Jf7tn
jnjXD
journal_mode
journal_size_limit
jr6\^
JYIED
K*E'D
k>uE3
k4c i
kernelbase.dll
KEYWp
KJvre6
kL*f;b}
KwQPg4
Ky7=}>
L$ j,
L$(j,
L$(PRW
L$(QP
L$,^3
L$,j,
L$@QP
L$\_^[3
L$<PR
L$<PRW
L$0PR
L$0Q3
L$0QS
L$4^3
L$4j,
L$4PR
L$4PRW
L$4QP
L$8Q3
L$8QS
L$8u$
L$D_^[3
L$hPR
L$L_^[3
L$l_^[3
L$lPR
L$LQS
L$t^3
L$t_^[3
L$xVh
L$xVh${
L$xVh,y
L$xVh@^
L$xVh\U
L$xVh\V
L$xVhde
L$xVhPs
L$xVhtB
L$xVhtn
L$xVhXv
l.lv%
LastChangeId
LastKnownStatus
LeaveCriticalSection
LegalCopyright
lineNumber
LineNumber
lineNumber
LoadLibraryExW
Local AppData
Local\SM0:%d:%d:%hs
LocalAlloc
LocalFree
locking_mode
LogHr
LookasideHitPeak
LookasideMissFullPeak
LookasideMissSizePeak
LookasideUsed
LookasideUsedPeak
LookupAccountSidW
LsaLookupClose
LsaLookupFreeMemory
LsaLookupGetDomainInfo
LsaLookupOpenLocalPolicy
M:I3h
m<&8cx
M>n]$T
M>Ygc
M0K0I
Machine
MachineDatabase
MachineDatabase_Pages
MachineDatabase_PagesCheckpointed
MachineDatabaseAutoCheckpoint
MachineDatabaseCheckpointThreshold
MachineDatabaseFileChunkSize
MachineDatabaseJournalSizeLimit
MachineDatabaseOptions
MachineDatabasePageSize
MachineDatabaseStatisticsLastUpdated
MachineDisposition
MachineJournalSize_After
MachineJournalSize_Before
MachineSize_After
MachineSize_Before
MainBundle
MaintenanceInterval
MaintenanceLastPerformed
MaintenanceMaxClockDelta
malloc
MallocCount
MallocCountPeak
MallocSizePeak
memcmp
memcpy
memcpy_s
memmove
memmove_s
MEMORY
MemoryPriority
MemoryUsed
MemoryUsedPeak
memset
message
Message
message
Message
message
Method
Mi8qTylC
Microsoft
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1)0'
Microsoft Corporation1.0,
Microsoft Corporation1200
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
Microsoft.Windows.StateRepository.Core
Microsoft.Windows.StateRepository.Service
Microsoft-Windows-StateRepository
Microsoft-Windows-StateRepository/Debug
Microsoft-Windows-StateRepository/Diagnostic
Microsoft-Windows-StateRepository/Operational
Microsoft-Windows-StateRepository/Restricted
Migrate
MigratorErrors
MigratorPatch
MigratorPatchStatics::ActivateInstance
MigratorPatchStatics::ctor
MigratorPatchStatics::dtor
MigratorPatchStatics::Exists
MigratorPatchStatics::ExistsByPatchId
MigratorPatchStatics::Find
MigratorPatchStatics::FindByPatchId
MigratorPatchStatics::Get
MigratorPatchStatics::TryGet
minATL$__a
minATL$__m
minATL$__r
minATL$__z
module
ModuleCollection
MoveFileExW
MQ*6r
MrtApplication
MrtApplicationStatics::ActivateInstance
MrtApplicationStatics::ctor
MrtApplicationStatics::dtor
MrtApplicationStatics::Exists
MrtApplicationStatics::ExistsByApplication
MrtApplicationStatics::Find
MrtApplicationStatics::Get
MrtApplicationStatics::GetByApplication
MrtApplicationStatics::TryGet
MrtApplicationStatics::TryGetByApplication
MrtDefaultTile
MrtDefaultTileStatics::ActivateInstance
MrtDefaultTileStatics::ctor
MrtDefaultTileStatics::dtor
MrtDefaultTileStatics::Exists
MrtDefaultTileStatics::ExistsByDefaultTile
MrtDefaultTileStatics::Find
MrtDefaultTileStatics::Get
MrtDefaultTileStatics::GetByDefaultTile
MrtDefaultTileStatics::TryGet
MrtDefaultTileStatics::TryGetByDefaultTile
MrtPackage
MrtPackageStatics::ActivateInstance
MrtPackageStatics::ctor
MrtPackageStatics::dtor
MrtPackageStatics::Exists
MrtPackageStatics::ExistsByPackage
MrtPackageStatics::Find
MrtPackageStatics::Get
MrtPackageStatics::GetByPackage
MrtPackageStatics::TryGet
MrtPackageStatics::TryGetByPackage
MrtSharedPri
MrtSharedPriStatics::ActivateInstance
MrtSharedPriStatics::ctor
MrtSharedPriStatics::dtor
MrtSharedPriStatics::Exists
MrtSharedPriStatics::ExistsByFilename
MrtSharedPriStatics::ExistsByPackage
MrtSharedPriStatics::Find
MrtSharedPriStatics::FindByPackage
MrtSharedPriStatics::Get
MrtSharedPriStatics::GetByFilename
MrtSharedPriStatics::TryGet
MrtSharedPriStatics::TryGetByFilename
MrtUserPri
MrtUserPriStatics::ActivateInstance
MrtUserPriStatics::ctor
MrtUserPriStatics::dtor
MrtUserPriStatics::Exists
MrtUserPriStatics::ExistsByMrtSharedPri
MrtUserPriStatics::ExistsByPackage
MrtUserPriStatics::ExistsByPackageAndUser
MrtUserPriStatics::ExistsByUser
MrtUserPriStatics::Find
MrtUserPriStatics::FindByMrtSharedPri
MrtUserPriStatics::FindByPackage
MrtUserPriStatics::FindByUser
MrtUserPriStatics::Get
MrtUserPriStatics::GetByPackageAndUser
MrtUserPriStatics::TryGet
MrtUserPriStatics::TryGetByPackageAndUser
ms:CriticalData
ms:Measures
ms:ReservedKeyword44
ms:Telemetry
Msg:[%ws] 
msvcrt.dll
MultiByteToWideChar
MutableLink
MutableLocation
N0L0J
Name\
NameAndExtension
NameAndExtension\
NamedDependency
NamedDependencyStatics::ActivateInstance
NamedDependencyStatics::ctor
NamedDependencyStatics::dtor
NamedDependencyStatics::Exists
NamedDependencyStatics::ExistsByPackage
NamedDependencyStatics::ExistsByPackageAndDependencyType
NamedDependencyStatics::ExistsByPackageAndDependencyTypeAndIndex
NamedDependencyStatics::Find
NamedDependencyStatics::FindByPackage
NamedDependencyStatics::FindByPackageAndDependencyType
NamedDependencyStatics::TryGet
NamedDependencyStatics::TryGetByPackageAndDependencyTypeAndIndex
Nd@X7
nec2~-! 
need dictionary
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
niKZ3]
nld5jQ
NORMAL
np;0E
NtAccessCheck
ntdll.dll
NtQueryInformationFile
NtQueryInformationProcess
NtQueryInformationThread
NtQueryInformationToken
NtSetInformationThread
NtUpdateWnfStateData
NumberOfPagesCheckpointed
o R|,
O:BAG:BAD:(A;;0x1;;;SY)(A;;0x1;;;BA)(A;;0x1;;;LS)
O:BAG:BAD:(A;;0x111FFFFF;;;SY)(A;;0x111FFFFF;;;BA)(XA;;0x111FFFFF;;;AU;(!(WIN://ISMULTISESSIONSKU)))(XA;;0x111FFFFF;;;S-1-15-3-1024-1572800732-1164253991-2733652370-1720403341-3570188209-547973490-1048710288-340345592;(!(WIN://ISMULTISESSIONSKU)))
O{P@!
O0l0{0
O0M0K
O0X0_0x0
oA&vZ
objectId
ObjectLength
objectType
onecore\base\appmodel\common\appxuninstallblocklist.cpp
onecore\base\appmodel\common\base32encoding.cpp
onecore\base\appmodel\common\bytebuffer.cpp
onecore\base\appmodel\common\cryptoprovider.cpp
onecore\base\appmodel\common\pathhelpers.cpp
onecore\base\appmodel\common\registrykey.cpp
onecore\base\appmodel\common\sidhelper.cpp
onecore\base\appmodel\common\stateseparation.cpp
onecore\base\appmodel\common\stringbuilder.cpp
onecore\base\appmodel\common\userprofile.cpp
onecore\base\appmodel\common\widestring.cpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Context.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Activation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-ActivationUser.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Application.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-ApplicationExtension.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-ApplicationUser.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-AppUriHandler.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-AppUriHandlerGroup.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-DynamicAppUriHandler.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-DynamicAppUriHandlerGroup.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-FileTypeAssociation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-HostRuntime.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Package.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageExtension.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageExternalLocation.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageFamily.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageMachineStatus.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageUser.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-PackageUserStatus.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-Protocol.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Entity-User.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Key.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-Manager.hpp
onecore\base\appmodel\StateRepository\cache\inc\SRCache-Manager.hpp
onecore\base\appmodel\StateRepository\Cache\Inc\SRCache-MultiKey.hpp
onecore\base\appmodel\StateRepository\Common\Inc\Security.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\blob.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\cachemanagement.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\changetracking.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\database.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Database.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\DatabaseCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecachesingleton.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-hasher.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-progid.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywinrtreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entities-partitions.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlerlauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlerlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxmanifest.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheactivation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheactivationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplication-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheapplicationuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachedynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachefiletypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachehostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackagemachinestatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cachepackageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheprotocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-cacheuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-connectedset.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-connectedsetpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroupfile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstall.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallprocess.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallprocessuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallprocessuserstatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallwork.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-defaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-endoflifepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-enterprise.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociationlauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociationlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-migratorpatch.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtsharedpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtuserpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-nameddependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageappinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagemachinestatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagemachinestatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesourceuri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesuperceded.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarypreviewtileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocollauncherinfo.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocollauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackagedeleted.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-publishercachefolder.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-targetdevicefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\globals.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\importdatabase.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\integrity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\logging.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\longrunningtransaction.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\maintenance.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\MultiUser.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\repair.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\repository.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\resourcepriority.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\ResourcePriority.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statement.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Statement.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementcache.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\StatementCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementexecution.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\text.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\texta.cpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf16String.hpp
onecore\base\appmodel\StateRepository\DataAccessLayer\Utf8String.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\accesscontrol.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\AutoCoSid.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\dal-user.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\localize.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\notificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\NotificationChannel.hpp
onecore\base\appmodel\staterepository\winrt\client\lib\notificationchannels.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activationuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.activationuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionalias.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appexecutionaliasuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhost.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhostfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appextensionhostfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstaller.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appinstallerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.application.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtaskfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationbackgroundtaskfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirulefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationcontenturirulefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.application-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextension-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationidentity.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationidentityfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationproperty.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationpropertyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.applicationpropertyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservice.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservicefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appservicefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandler.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlergroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerlauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appurihandlerlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxmanifest.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.appxmanifestfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundle.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundlepackagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundleresource.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.bundleresourcefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedset.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetpackagefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.connectedsetpackagefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.contentgroupfilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstall.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocess.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocessfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocessfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocessuserstatus.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocessuserstatusfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallprocessuserstatusfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallwork.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallworkfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.custominstallworkfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.defaulttile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.defaulttilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependency.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraph.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraphfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dependencygraphfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.deploymenthistory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.deploymenthistoryfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroupfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.dynamicappurihandlergroupfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.endoflifepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.endoflifepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.enterprise.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.enterprisefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.file.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationlauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.filetypeassociationlauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntime.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntimefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.hostruntimefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.management.repositorymanager.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.migratorpatch.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.migratorpatchfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtapplication.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtapplicationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtdefaulttilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtsharedpri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtsharedprifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtuserpri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.mrtuserprifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.nameddependency.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.nameddependencyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundle.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundlepackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundleresource.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.optionalbundleresourcefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.package.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageappinstaller.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageappinstallerfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.package-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextension.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextension-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextensionfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageextensionfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageexternallocationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicy-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilypolicyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagefamilyuserresourcefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageidentity.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageidentityfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocation.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocationfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagelocationfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatus.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatusfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagemachinestatusfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicy.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicy-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepolicyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageproperty.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepropertyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagepropertyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesourceuri.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesourceurifactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesuperceded.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packagesupercededfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatus.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.packageuserstatusfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarypreviewtileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarypreviewtileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytile-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelogfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserchangelogfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileusernotificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileusernotificationchannelfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.primarytileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocol.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocolfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocolfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocollauncherinfo.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.protocollauncherinfo-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagedeleted.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagedeletedfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackageexcludefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.provisionedpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.publishercachefolder.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.publishercachefolderfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.resource.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.resourcefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytile.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytile-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytilefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuser.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelogfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserchangelogfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserdatachange.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileuserfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileusernotificationchannel.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileusernotificationchannelfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileview-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.secondarytileviewfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequence.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequencefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.sequencefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamily.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamilyfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.targetdevicefamilyfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileview.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileview-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewqueryfilter.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.tileviewqueryfilter-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.user.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.user-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.userfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.userfactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.wowdependencygraph.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.wowdependencygraphfactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackage.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackagefactory.cpp
onecore\base\appmodel\staterepository\winrt\client\lib\windows.internal.staterepository.xboxpackagefactory-custom.cpp
onecore\base\appmodel\staterepository\winrt\client\srv\upgrade.cpp
onecore\base\appmodel\StateRepository\WinRT\common\inc\WinRT-DAL.hpp
onecore\base\appmodel\staterepository\winrt\common\src\winrt.cpp
onecore\internal\sdk\inc\wil\opensource/wil/token_helpers.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\opensource\wil\result.h
onecore\internal\sdk\inc\wil\Staging.h
onecore\private\base\inc\AppModel\Common\FileInUse.hpp
onecore\private\base\inc\appmodel\staterepository\dal/Database.hpp
OpenProcess
OpenProcess() failed on %u of %u for %hs
OpenProcessToken
OpenSemaphoreW
OpenThreadToken
OptionalBundle
OptionalBundlePackage
OptionalBundlePackageStatics::ActivateInstance
OptionalBundlePackageStatics::ctor
OptionalBundlePackageStatics::dtor
OptionalBundlePackageStatics::Exists
OptionalBundlePackageStatics::ExistsByOptionalBundle
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersion
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersionAndArchitecture
OptionalBundlePackageStatics::ExistsByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundlePackageStatics::Find
OptionalBundlePackageStatics::FindByOptionalBundle
OptionalBundlePackageStatics::FindByOptionalBundleAndVersion
OptionalBundlePackageStatics::FindByOptionalBundleAndVersionAndArchitecture
OptionalBundlePackageStatics::Get
OptionalBundlePackageStatics::GetByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundlePackageStatics::TryGet
OptionalBundlePackageStatics::TryGetByOptionalBundleAndVersionAndArchitectureAndResourceId
OptionalBundleResource
OptionalBundleResourceStatics::ActivateInstance
OptionalBundleResourceStatics::ctor
OptionalBundleResourceStatics::dtor
OptionalBundleResourceStatics::Exists
OptionalBundleResourceStatics::ExistsByOptionalBundlePackage
OptionalBundleResourceStatics::Find
OptionalBundleResourceStatics::FindByOptionalBundlePackage
OptionalBundleResourceStatics::Get
OptionalBundleResourceStatics::TryGet
OptionalBundleStatics::ActivateInstance
OptionalBundleStatics::ctor
OptionalBundleStatics::dtor
OptionalBundleStatics::Exists
OptionalBundleStatics::ExistsByMainBundle
OptionalBundleStatics::ExistsByMainBundleAndName
OptionalBundleStatics::ExistsByMainBundleAndNameAndPublisher
OptionalBundleStatics::ExistsByName
OptionalBundleStatics::ExistsByNameAndPublisher
OptionalBundleStatics::Find
OptionalBundleStatics::FindByMainBundle
OptionalBundleStatics::FindByMainBundleAndName
OptionalBundleStatics::FindByName
OptionalBundleStatics::FindByNameAndPublisher
OptionalBundleStatics::Get
OptionalBundleStatics::GetByMainBundleAndNameAndPublisher
OptionalBundleStatics::TryGet
OptionalBundleStatics::TryGetByMainBundleAndNameAndPublisher
Options
OriginalFilename
originatingContextId
originatingContextMessage
originatingContextName
O'SecondaryTileUserChangelogStatics::DeleteBy::Created
OSMaxVersionTested
OutputDebugStringW
oversubscribed distance tree
oversubscribed dynamic bit lengths tree
oversubscribed literal/length tree
OXb%Y
P/z/i_
P9w0t
P9w0u
Package
Package rows w/no PackageUser references
Package.PackageType=Bundle and Package.SourceBundle=BundlePackage but no other Package rows from Bundle
Package\
Package\Data
Package\Data\
PackageAndCategory
PackageAndCategory\
PackageAndPackageRelativeApplicationId
PackageAndPackageRelativeApplicationId\
PackageAppInstaller
PackageAppInstallerStatics::ActivateInstance
PackageAppInstallerStatics::ctor
PackageAppInstallerStatics::dtor
PackageAppInstallerStatics::Exists
PackageAppInstallerStatics::ExistsByAppInstaller
PackageAppInstallerStatics::ExistsByPackage
PackageAppInstallerStatics::ExistsByPackageAndAppInstaller
PackageAppInstallerStatics::Find
PackageAppInstallerStatics::FindByAppInstaller
PackageAppInstallerStatics::FindByPackage
PackageAppInstallerStatics::Get
PackageAppInstallerStatics::GetByPackageAndAppInstaller
PackageAppInstallerStatics::TryGet
PackageAppInstallerStatics::TryGetByPackageAndAppInstaller
PackageExtension
PackageExtension\
PackageExtension\Data
PackageExtension\Data\
PackageExtensionStatics::ActivateInstance
PackageExtensionStatics::ctor
PackageExtensionStatics::dtor
PackageExtensionStatics::Exists
PackageExtensionStatics::ExistsByCategory
PackageExtensionStatics::ExistsByPackage
PackageExtensionStatics::ExistsByPackageAndCategory
PackageExtensionStatics::ExistsByPackageAndIndex
PackageExtensionStatics::Find
PackageExtensionStatics::FindByCategory
PackageExtensionStatics::FindByPackage
PackageExtensionStatics::FindByPackageAndCategory
PackageExtensionStatics::FindByUserAndCategory
PackageExtensionStatics::Get
PackageExtensionStatics::GetByPackageAndIndex
PackageExtensionStatics::TryGet
PackageExtensionStatics::TryGetByPackageAndIndex
PackageExternalLocation
PackageExternalLocation\Data
PackageExternalLocation\Data\
PackageExternalLocationStatics::ActivateInstance
PackageExternalLocationStatics::ctor
PackageExternalLocationStatics::dtor
PackageExternalLocationStatics::Exists
PackageExternalLocationStatics::ExistsByPackage
PackageExternalLocationStatics::ExistsByUser
PackageExternalLocationStatics::ExistsByUserAndPackage
PackageExternalLocationStatics::ExistsEffectiveByUserAndPackage
PackageExternalLocationStatics::ExistsEffectiveByUserAndPackageFullName
PackageExternalLocationStatics::Find
PackageExternalLocationStatics::FindByPackage
PackageExternalLocationStatics::FindByUser
PackageExternalLocationStatics::TryGet
PackageExternalLocationStatics::TryGetByUserAndPackage
PackageExternalLocationStatics::TryGetEffectiveByUserAndPackage
PackageExternalLocationStatics::TryGetEffectiveByUserAndPackageFullName
PackageFamily
packageFamily
PackageFamily
PackageFamily\
PackageFamily\Data
PackageFamily\Data\
PackageFamilyName
PackageFamilyName\
PackageFamilyPolicy
PackageFamilyPolicyStatics::ActivateInstance
PackageFamilyPolicyStatics::Add
PackageFamilyPolicyStatics::ClearWorkByWorkId
PackageFamilyPolicyStatics::ctor
PackageFamilyPolicyStatics::Delete
PackageFamilyPolicyStatics::DeleteByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::DeleteByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::DeleteByWorkId
PackageFamilyPolicyStatics::dtor
PackageFamilyPolicyStatics::Exists
PackageFamilyPolicyStatics::ExistsByName
PackageFamilyPolicyStatics::ExistsByNameAndIndex
PackageFamilyPolicyStatics::ExistsByNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::ExistsByNameAndIndexAndValueString
PackageFamilyPolicyStatics::ExistsByNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByNameAndValueString
PackageFamilyPolicyStatics::ExistsByPackageFamily
PackageFamilyPolicyStatics::ExistsByPackageFamilyAndName
PackageFamilyPolicyStatics::ExistsByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUser
PackageFamilyPolicyStatics::ExistsByUserAndName
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndNameAndIndexAndValueString
PackageFamilyPolicyStatics::ExistsByUserAndNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndNameAndValueString
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamily
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndName
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndValueNumber
PackageFamilyPolicyStatics::ExistsByUserAndPackageFamilyAndNameAndValueString
PackageFamilyPolicyStatics::Find
PackageFamilyPolicyStatics::FindByName
PackageFamilyPolicyStatics::FindByNameAndIndex
PackageFamilyPolicyStatics::FindByNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::FindByNameAndIndexAndValueString
PackageFamilyPolicyStatics::FindByNameAndValueNumber
PackageFamilyPolicyStatics::FindByNameAndValueString
PackageFamilyPolicyStatics::FindByPackageFamily
PackageFamilyPolicyStatics::FindByPackageFamilyAndName
PackageFamilyPolicyStatics::FindByUser
PackageFamilyPolicyStatics::FindByUserAndName
PackageFamilyPolicyStatics::FindByUserAndNameAndIndex
PackageFamilyPolicyStatics::FindByUserAndNameAndIndexAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndNameAndIndexAndValueString
PackageFamilyPolicyStatics::FindByUserAndNameAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndNameAndValueString
PackageFamilyPolicyStatics::FindByUserAndPackageFamily
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndName
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndNameAndValueNumber
PackageFamilyPolicyStatics::FindByUserAndPackageFamilyAndNameAndValueString
PackageFamilyPolicyStatics::Get
PackageFamilyPolicyStatics::GetByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::GetByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::TryGet
PackageFamilyPolicyStatics::TryGetByPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::TryGetByUserAndPackageFamilyAndNameAndIndex
PackageFamilyPolicyStatics::Update
PackageFamilyPolicyStatics::UpdateWorkId
PackageFamilyStatics::ActivateInstance
PackageFamilyStatics::ctor
PackageFamilyStatics::dtor
PackageFamilyStatics::Exists
PackageFamilyStatics::ExistsByName
PackageFamilyStatics::ExistsByNameAndPublisherId
PackageFamilyStatics::ExistsByPackageFamilyName
PackageFamilyStatics::ExistsByPackageSID
PackageFamilyStatics::ExistsByPublisherId
PackageFamilyStatics::ExistsByUserAndNameAndPublisherId
PackageFamilyStatics::ExistsByUserAndPackageFamilyName
PackageFamilyStatics::Find
PackageFamilyStatics::FindByName
PackageFamilyStatics::FindByPackageSID
PackageFamilyStatics::FindByPublisherId
PackageFamilyStatics::FindByUser
PackageFamilyStatics::FindByUserAndPublisherId
PackageFamilyStatics::Get
PackageFamilyStatics::GetByNameAndPublisherId
PackageFamilyStatics::GetByPackageFamilyName
PackageFamilyStatics::GetByUserAndNameAndPublisherId
PackageFamilyStatics::GetByUserAndPackageFamilyName
PackageFamilyStatics::GetCurrent
PackageFamilyStatics::TryGet
PackageFamilyStatics::TryGetByNameAndPublisherId
PackageFamilyStatics::TryGetByPackageFamilyName
PackageFamilyStatics::TryGetByUserAndNameAndPublisherId
PackageFamilyStatics::TryGetByUserAndPackageFamilyName
PackageFamilyUser
PackageFamilyUserResource
PackageFamilyUserResourceStatics::ActivateInstance
PackageFamilyUserResourceStatics::Add
PackageFamilyUserResourceStatics::ctor
PackageFamilyUserResourceStatics::Delete
PackageFamilyUserResourceStatics::DeleteByPackageFamilyUserAndResourceId
PackageFamilyUserResourceStatics::dtor
PackageFamilyUserResourceStatics::Exists
PackageFamilyUserResourceStatics::ExistsByPackageFamilyUser
PackageFamilyUserResourceStatics::ExistsByPackageFamilyUserAndResourceId
PackageFamilyUserResourceStatics::Find
PackageFamilyUserResourceStatics::FindByPackageFamilyUser
PackageFamilyUserResourceStatics::TryGet
PackageFamilyUserResourceStatics::TryGetByPackageFamilyUserAndResourceId
PackageFamilyUserResourceStatics::Update
PackageFamilyUserStatics::ActivateInstance
PackageFamilyUserStatics::ctor
PackageFamilyUserStatics::dtor
PackageFamilyUserStatics::Exists
PackageFamilyUserStatics::ExistsByPackageFamily
PackageFamilyUserStatics::ExistsByPackageFamilyName
PackageFamilyUserStatics::ExistsByUser
PackageFamilyUserStatics::ExistsByUserAndPackageFamily
PackageFamilyUserStatics::ExistsByUserAndPackageFamilyName
PackageFamilyUserStatics::Find
PackageFamilyUserStatics::FindByPackageFamily
PackageFamilyUserStatics::FindByPackageFamilyName
PackageFamilyUserStatics::FindByUser
PackageFamilyUserStatics::GetByUserAndPackageFamilyName
PackageFamilyUserStatics::TryGet
PackageFamilyUserStatics::TryGetByUserAndPackageFamily
PackageFamilyUserStatics::TryGetByUserAndPackageFamilyName
PackageFullName
PackageFullName\
PackageIdentity
packageIdentity
PackageIdentity
PackageIdentity\
PackageIdentityStatics::ActivateInstance
PackageIdentityStatics::ctor
PackageIdentityStatics::dtor
PackageIdentityStatics::Exists
PackageIdentityStatics::ExistsByPackageFamily
PackageIdentityStatics::ExistsByPackageFullName
PackageIdentityStatics::Find
PackageIdentityStatics::FindByPackageFamily
PackageIdentityStatics::Get
PackageIdentityStatics::GetByPackageFullName
PackageIdentityStatics::TryGet
PackageIdentityStatics::TryGetByPackageFullName
PackageLocation
PackageLocationStatics::ActivateInstance
PackageLocationStatics::ctor
PackageLocationStatics::dtor
PackageLocationStatics::Exists
PackageLocationStatics::ExistsByInstalledLocation
PackageLocationStatics::ExistsByPackage
PackageLocationStatics::ExistsByVolume
PackageLocationStatics::Find
PackageLocationStatics::FindByInstalledLocation
PackageLocationStatics::FindByVolume
PackageLocationStatics::Get
PackageLocationStatics::GetByPackage
PackageLocationStatics::GetByUserAndApplicationUserModelId
PackageLocationStatics::GetVolumeByPackageFullName
PackageLocationStatics::TryGet
PackageLocationStatics::TryGetByPackage
PackageMachineStatus
PackageMachineStatus::DeleteByPackageFullName
PackageMachineStatus\Data
PackageMachineStatus\Data\
PackageMachineStatusStatics::ActivateInstance
PackageMachineStatusStatics::ctor
PackageMachineStatusStatics::dtor
PackageMachineStatusStatics::Exists
PackageMachineStatusStatics::ExistsByPackageIdentity
PackageMachineStatusStatics::Find
PackageMachineStatusStatics::TryGet
PackageMachineStatusStatics::TryGetByPackageIdentity
PackageOrigin
PackagePolicy
PackagePolicyStatics::ActivateInstance
PackagePolicyStatics::Add
PackagePolicyStatics::ClearWorkByWorkId
PackagePolicyStatics::ctor
PackagePolicyStatics::Delete
PackagePolicyStatics::DeleteByPackageAndNameAndIndex
PackagePolicyStatics::DeleteByUserAndPackageAndNameAndIndex
PackagePolicyStatics::DeleteByWorkId
PackagePolicyStatics::dtor
PackagePolicyStatics::Exists
PackagePolicyStatics::ExistsByName
PackagePolicyStatics::ExistsByNameAndIndex
PackagePolicyStatics::ExistsByNameAndIndexAndValueNumber
PackagePolicyStatics::ExistsByNameAndIndexAndValueString
PackagePolicyStatics::ExistsByNameAndValueNumber
PackagePolicyStatics::ExistsByNameAndValueString
PackagePolicyStatics::ExistsByPackage
PackagePolicyStatics::ExistsByPackageAndName
PackagePolicyStatics::ExistsByPackageAndNameAndIndex
PackagePolicyStatics::ExistsByUser
PackagePolicyStatics::ExistsByUserAndName
PackagePolicyStatics::ExistsByUserAndNameAndIndex
PackagePolicyStatics::ExistsByUserAndNameAndIndexAndValueNumber
PackagePolicyStatics::ExistsByUserAndNameAndIndexAndValueString
PackagePolicyStatics::ExistsByUserAndNameAndValueNumber
PackagePolicyStatics::ExistsByUserAndNameAndValueString
PackagePolicyStatics::ExistsByUserAndPackage
PackagePolicyStatics::ExistsByUserAndPackageAndName
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndIndex
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndValueNumber
PackagePolicyStatics::ExistsByUserAndPackageAndNameAndValueString
PackagePolicyStatics::Find
PackagePolicyStatics::FindByName
PackagePolicyStatics::FindByNameAndIndex
PackagePolicyStatics::FindByNameAndIndexAndValueNumber
PackagePolicyStatics::FindByNameAndIndexAndValueString
PackagePolicyStatics::FindByNameAndValueNumber
PackagePolicyStatics::FindByNameAndValueString
PackagePolicyStatics::FindByPackage
PackagePolicyStatics::FindByPackageAndName
PackagePolicyStatics::FindByUser
PackagePolicyStatics::FindByUserAndName
PackagePolicyStatics::FindByUserAndNameAndIndex
PackagePolicyStatics::FindByUserAndNameAndIndexAndValueNumber
PackagePolicyStatics::FindByUserAndNameAndIndexAndValueString
PackagePolicyStatics::FindByUserAndNameAndValueNumber
PackagePolicyStatics::FindByUserAndNameAndValueString
PackagePolicyStatics::FindByUserAndPackage
PackagePolicyStatics::FindByUserAndPackageAndName
PackagePolicyStatics::FindByUserAndPackageAndNameAndValueNumber
PackagePolicyStatics::FindByUserAndPackageAndNameAndValueString
PackagePolicyStatics::Get
PackagePolicyStatics::GetByPackageAndNameAndIndex
PackagePolicyStatics::GetByUserAndPackageAndNameAndIndex
PackagePolicyStatics::TryGet
PackagePolicyStatics::TryGetByPackageAndNameAndIndex
PackagePolicyStatics::TryGetByUserAndPackageAndNameAndIndex
PackagePolicyStatics::Update
PackagePolicyStatics::UpdateWorkId
PackagePolicyStatics::Upsert
PackageProperty
PackagePropertyStatics::ActivateInstance
PackagePropertyStatics::ctor
PackagePropertyStatics::dtor
PackagePropertyStatics::Exists
PackagePropertyStatics::ExistsByName
PackagePropertyStatics::ExistsByPackage
PackagePropertyStatics::ExistsByPackageAndIndex
PackagePropertyStatics::ExistsByPackageAndName
PackagePropertyStatics::ExistsByUserAndName
PackagePropertyStatics::Find
PackagePropertyStatics::FindByName
PackagePropertyStatics::FindByPackage
PackagePropertyStatics::FindByPackageAndName
PackagePropertyStatics::FindByUserAndName
PackagePropertyStatics::Get
PackagePropertyStatics::GetByPackageAndIndex
PackagePropertyStatics::TryGet
PackagePropertyStatics::TryGetByPackageAndIndex
PackageRelativeApplicationId
PackageRepositoryRoot
Packages
PackageSID
PackageSourceUri
PackageSourceUriStatics::ActivateInstance
PackageSourceUriStatics::ctor
PackageSourceUriStatics::dtor
PackageSourceUriStatics::Exists
PackageSourceUriStatics::ExistsByPackage
PackageSourceUriStatics::ExistsByPackageAndKind
PackageSourceUriStatics::Find
PackageSourceUriStatics::FindByPackage
PackageSourceUriStatics::FindByPackageAndKind
PackageSourceUriStatics::Get
PackageSourceUriStatics::TryGet
PackageStatics::ActivateInstance
PackageStatics::ctor
PackageStatics::dtor
PackageStatics::Exists
PackageStatics::ExistsByEditionId
PackageStatics::ExistsByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::ExistsByPackageFamily
PackageStatics::ExistsByPackageFamilyAndPackageType
PackageStatics::ExistsByPackageFamilyAndPackageTypeAndResourceId
PackageStatics::ExistsByPackageFamilyAndPackageTypeAndResourceIdAndVersion
PackageStatics::ExistsByPackageFamilyAndResourceId
PackageStatics::ExistsByPackageFamilyAndResourceIdAndArchitecture
PackageStatics::ExistsByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::ExistsByPackageFamilyName
PackageStatics::ExistsByPackageFamilyNameAndPackageType
PackageStatics::ExistsByPackageFullName
PackageStatics::ExistsBySourceBundle
PackageStatics::ExistsBySourceBundleAndPackageType
PackageStatics::ExistsByUserAndApplicationUserModelId
PackageStatics::ExistsByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::ExistsByUserAndPackageFamily
PackageStatics::ExistsByUserAndPackageFamilyAndPackageType
PackageStatics::ExistsByUserAndPackageFamilyName
PackageStatics::ExistsByUserAndPackageFamilyNameAndPackageType
PackageStatics::ExistsByUserAndPackageFullName
PackageStatics::ExistsByUserAndPublisherId
PackageStatics::ExistsByUserOrDefaultAccountAndApplicationUserModelId
PackageStatics::ExistsByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
PackageStatics::ExistsByUserOrDefaultAccountAndPackageFullName
PackageStatics::Find
PackageStatics::FindBundleAndMainOrOptionalNotPartOfBundleByUserAndNotOtherUser_SortedByPackageType
PackageStatics::FindByEditionId
PackageStatics::FindByPackageFamily
PackageStatics::FindByPackageFamilyAndPackageType
PackageStatics::FindByPackageFamilyAndPackageTypeAndResourceId
PackageStatics::FindByPackageFamilyAndPackageTypeAndResourceIdAndVersion
PackageStatics::FindByPackageFamilyAndResourceId
PackageStatics::FindByPackageFamilyAndResourceIdAndArchitecture
PackageStatics::FindByPackageFamilyName
PackageStatics::FindByPackageFamilyNameAndPackageType
PackageStatics::FindByPackageOrigin
PackageStatics::FindBySourceBundle
PackageStatics::FindByUser
PackageStatics::FindByUserAndPackageFamily
PackageStatics::FindByUserAndPackageFamilyAndPackageType
PackageStatics::FindByUserAndPackageFamilyName
PackageStatics::FindByUserAndPackageFamilyNameAndPackageType
PackageStatics::FindByUserAndPackageTypeAndNotOtherUser
PackageStatics::FindByUserAndPublisherId
PackageStatics::FindByUserOrDefaultAccount
PackageStatics::FindByUserOrDefaultAccountAnd::PackageID
PackageStatics::FindByUserOrDefaultAccountAndApplicationUserModelId
PackageStatics::FindByUserOrDefaultAccountAndPackageFamilyNameAndPackageType
PackageStatics::FindByUserOrDefaultAccountAndPackageFullName
PackageStatics::FindMainOrOptionalByUserAndNotByFamilyAndOtherUser
PackageStatics::FindPackageFullNamesByUserSidAndPackageTypeAndTargetDeviceFamily
PackageStatics::Get
PackageStatics::GetByInstalledLocation
PackageStatics::GetByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::GetByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::GetByPackageFullName
PackageStatics::GetByUserAnd::PackageId
PackageStatics::GetByUserAndApplicationUserModelId
PackageStatics::GetByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::GetByUserAndPackageFullName
PackageStatics::GetByUserOrDefaultAccountAndPackageFullName
PackageStatics::GetCurrent
PackageStatics::GetEffectiveIsUninstallableByPackageFullName
PackageStatics::GetEffectiveSupportedUsersByApplicationUserModelId
PackageStatics::GetEffectiveSupportedUsersByPackageFullName
PackageStatics::GetIsSilverlight81AndEffectiveSupportedUsersAndVolumeByUserAndPackageFullName
PackageStatics::GetIsSilverlight81AndEffectiveSupportedUsersByUserAndPackageFullName
PackageStatics::GetMainPackageDependencyByUserAndSupplierPackage
PackageStatics::GetPackageOriginByUserAndPackageFullName
PackageStatics::GetStagedPackageOriginByPackageFullName
PackageStatics::TryGet
PackageStatics::TryGetByInstalledLocation
PackageStatics::TryGetByNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::TryGetByPackageFamilyAndResourceIdAndArchitectureAndVersion
PackageStatics::TryGetByPackageFullName
PackageStatics::TryGetByUserAndNameAndArchitectureAndVersionAndResourceIdAndPublisherId
PackageStatics::TryGetByUserAndPackageFullName
PackageStatics::TryGetByUserOrDefaultAccountAndPackageFullName
PackageStatics::TryGetEffectiveLocationByUserAndApplicationUserModelId
PackageStatics::TryGetEffectiveLocationByUserAndPackage
PackageStatics::TryGetEffectiveLocationByUserAndPackageFullName
PackageStatics::UpdateIsMachineRegisteredByPackageFullName
PackageStatics::UpdateIsSingletonRegistered
PackageSuperceded
PackageSupercededStatics::ActivateInstance
PackageSupercededStatics::ctor
PackageSupercededStatics::dtor
PackageSupercededStatics::Exists
PackageSupercededStatics::ExistsByPackageIdentity
PackageSupercededStatics::ExistsByUser
PackageSupercededStatics::ExistsByUserAndPackageIdentity
PackageSupercededStatics::Find
PackageSupercededStatics::FindByPackageIdentity
PackageSupercededStatics::FindByUser
PackageSupercededStatics::TryGet
PackageSupercededStatics::TryGetByUserAndPackageIdentity
PackageType
PackageUser
PackageUser rows for Bundle but no other Package(s) sourced from the bundle
PackageUser.User has Package(s) with Package.Type!=Bundle but not Package.Type=Bundle
PackageUser\Data
PackageUser\Data\
PackageUserStatics::ActivateInstance
PackageUserStatics::ctor
PackageUserStatics::dtor
PackageUserStatics::Exists
PackageUserStatics::ExistsByAppDataVolume
PackageUserStatics::ExistsByPackage
PackageUserStatics::ExistsByPackageFamilyNameAndPackageType
PackageUserStatics::ExistsByPackageFullName
PackageUserStatics::ExistsByPackageFullNameAndDeploymentState
PackageUserStatics::ExistsByUser
PackageUserStatics::ExistsByUserAndDeploymentState
PackageUserStatics::ExistsByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUserStatics::ExistsByUserAndPackage
PackageUserStatics::ExistsByUserAndPackageFamilyNameAndPackageType
PackageUserStatics::ExistsByUserAndPackageFullName
PackageUserStatics::Find
PackageUserStatics::FindByAppDataVolume
PackageUserStatics::FindByPackage
PackageUserStatics::FindByPackageFamilyNameAndPackageType
PackageUserStatics::FindByPackageFullName
PackageUserStatics::FindByUser
PackageUserStatics::FindByUserAndDeploymentState
PackageUserStatics::FindByUserAndDeploymentStateAndIsExplicitlyInstalled
PackageUserStatics::FindByUserAndPackageFamilyNameAndPackageType
PackageUserStatics::Get
PackageUserStatics::GetByUserAndPackage
PackageUserStatics::GetByUserAndPackageFullName
PackageUserStatics::GetMainPackageFullNameByUserAndPackageFamilyName
PackageUserStatics::TryGet
PackageUserStatics::TryGetByUserAndPackage
PackageUserStatics::TryGetByUserAndPackageFullName
PackageUserStatus
PackageUserStatus::DeleteByUserSecurityIdentifierAndPackageFullName
PackageUserStatus::UpdateStatusByUserSecurityIdentifierAndPackageFullName
PackageUserStatus\Data
PackageUserStatus\Data\
PackageUserStatusStatics::ActivateInstance
PackageUserStatusStatics::ctor
PackageUserStatusStatics::dtor
PackageUserStatusStatics::Exists
PackageUserStatusStatics::ExistsByUser
PackageUserStatusStatics::ExistsByUserAndPackageIdentity
PackageUserStatusStatics::Find
PackageUserStatusStatics::FindByUser
PackageUserStatusStatics::TryGet
PackageUserStatusStatics::TryGetByUserAndPackageIdentity
page_size
PageCacheOverflow
PageCacheOverflowPeak
PageCachePeak
PageCacheUsed
PageCacheUsedPeak
Parameters
PartA_PrivTags
Partition
Partition %d not supported by GC()
PathCchCombine
PERSIST
PfBV-
Ph0n#
Phase
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
Pj)h8!
Pj,hh*
Pj.h8$
Pj.h8@
Pj.hp5
Pj.hxA
Pj.hXI
Pj/h@J
Pj:h@D
Pj:hP8
Pj:hXB
Pj[h _
Pj[h`
Pj[h0
Pj[h8
Pj[hh1
Pj[hp-
Pj[hXf
Pj\h 
Pj\h *
Pj\h(p
Pj\h@
Pj\h8
Pj\hh
Pj\hp
Pj]h 
Pj]h 2
Pj]h(
Pj]h(.
Pj]hHH
Pj]hP
Pj]hx
Pj]hXr
Pj^h 
Pj^h `
Pj^h@C
Pj^h0
Pj^h8
Pj^h8c
Pj^hH
Pj^hP
Pj^hx
Pj^hX
Pj^hXu
Pj_h0
Pj_h0#
Pj_hP
Pj_hX
Pj`hHN
Pj`hp
Pj`hx
Pj`hX_
Pj+h@:
Pj+hH4
Pj+hp3
Pj+hXC
Pj0h -
Pj0h`t
Pj0hP9
Pj0hx)
Pj1hX7
Pj2h0#
Pj2h0,
Pj2hx/
Pj2hX+
Pj3h8Z
Pj4h@u
Pj4hP 
Pj4hP6
Pj5h <
Pj5hp'
Pj9hh(
Pjah U
Pjah@
Pjah`
Pjah0
Pjahp
Pjbh@
Pjbhph
Pjch 
Pjch8
PjchH
Pjchh
Pjchx
Pjdh(
Pjdh`j
Pjdh0
Pjdh8i
Pjdh8R
PjdhH
PjdhxM
PjehPT
Pjfh@
Pjfh0
Pjfh0k
PjfhhQ
Pjfhp
PjfhX
Pjfhx
Pj-h`>
Pj-h8F
Pjhh@
Pjhh0
PjhhX
Pj-hPE
Pj-hX?
Pjkh@
Pjlhxa
PjOhp/
PjSh  
PjSh0
PjShp
PjShx)
PjTh0X
PjUh(
PjUh0?
PjUh8
PjUhp
PjUhX6
PjVh8
PjVhP8
PjVhX&
PjWh@o
PjWh8
PjWhH
PjWhP[
PjWhxx
PjXh {
PjXh(
PjXh0
PjXh8
PjXhh
PjXhP
PjXhpo
PjXhx
PjYh 
PjYh`9
PjYhP
PjYhp
PjYhx
PjYhx>
PjZh@
PjZhH
PjZhh)
PjZhp
Policy.Aggressive.ConnectionMaxAge
Policy.Aggressive.ConnectionMaxCount
Policy.Aggressive.ConnectionMinCount
Policy.Aggressive.GCInterval
Policy.Aggressive.StatementMaxAge
Policy.Aggressive.StatementMaxCount
Policy.Aggressive.StatementMinCount
Policy.Normal.ConnectionMaxAge
Policy.Normal.ConnectionMaxCount
Policy.Normal.ConnectionMinCount
Policy.Normal.GCInterval
Policy.Normal.StatementMaxAge
Policy.Normal.StatementMaxCount
Policy.Normal.StatementMinCount
PostCheckAllCascadingInMachinePartition
PostFixAllCascadingInMachinePartition
PPPh@
PPPhp
PPPRj
PPPWj
PQQQQQQQQQQ
PQRRSW
PRAGMA %s;
PRAGMA %s=%I64d;
PRAGMA %s=%I64u;
PRAGMA %s=%s;
PRAGMA encoding = "UTF-8";
PRAGMA optimize(%d);
PRAGMA optimize;
prbT+
PreviousDeploymentVersion
PreviousMachineVersion
previousVersion
PrimaryPreviewTileViewStatics::ActivateInstance
PrimaryPreviewTileViewStatics::ctor
PrimaryPreviewTileViewStatics::dtor
PrimaryPreviewTileViewStatics::Exists
PrimaryPreviewTileViewStatics::ExistsByPackage
PrimaryPreviewTileViewStatics::ExistsByTileUniqueId
PrimaryPreviewTileViewStatics::ExistsByUser
PrimaryPreviewTileViewStatics::ExistsByUserAndApplication
PrimaryPreviewTileViewStatics::ExistsByUserAndApplicationUserModelId
PrimaryPreviewTileViewStatics::Find
PrimaryPreviewTileViewStatics::FindByPackage
PrimaryPreviewTileViewStatics::FindByUser
PrimaryPreviewTileViewStatics::Get
PrimaryPreviewTileViewStatics::GetByTileUniqueId
PrimaryPreviewTileViewStatics::GetByUserAndApplication
PrimaryPreviewTileViewStatics::GetByUserAndApplicationUserModelId
PrimaryPreviewTileViewStatics::TryGet
PrimaryPreviewTileViewStatics::TryGetByTileUniqueId
PrimaryPreviewTileViewStatics::TryGetByUserAndApplication
PrimaryPreviewTileViewStatics::TryGetByUserAndApplicationUserModelId
PrimaryTile
PrimaryTileStatics::ActivateInstance
PrimaryTileStatics::Add
PrimaryTileStatics::ClearWorkByWorkId
PrimaryTileStatics::ctor
PrimaryTileStatics::Delete
PrimaryTileStatics::DeleteByApplication
PrimaryTileStatics::DeleteByApplicationAndTileId
PrimaryTileStatics::DeleteByWorkId
PrimaryTileStatics::dtor
PrimaryTileStatics::Exists
PrimaryTileStatics::ExistsByApplication
PrimaryTileStatics::ExistsByApplicationAndTileId
PrimaryTileStatics::ExistsByPackage
PrimaryTileStatics::Find
PrimaryTileStatics::FindByPackage
PrimaryTileStatics::Get
PrimaryTileStatics::GetByApplication
PrimaryTileStatics::GetByApplicationAndTileId
PrimaryTileStatics::TryGet
PrimaryTileStatics::TryGetByApplication
PrimaryTileStatics::TryGetByApplicationAndTileId
PrimaryTileStatics::Update
PrimaryTileStatics::UpdateWorkId
PrimaryTileUser
PrimaryTileUserChangelog
PrimaryTileUserChangelogStatics::ActivateInstance
PrimaryTileUserChangelogStatics::ctor
PrimaryTileUserChangelogStatics::DeleteBy::Created
PrimaryTileUserChangelogStatics::DeleteBy::Deleted
PrimaryTileUserChangelogStatics::DeleteByTileUniqueId
PrimaryTileUserChangelogStatics::dtor
PrimaryTileUserChangelogStatics::Exists
PrimaryTileUserChangelogStatics::ExistsBy_Created
PrimaryTileUserChangelogStatics::ExistsBy_Deleted
PrimaryTileUserChangelogStatics::ExistsByTileUniqueId
PrimaryTileUserChangelogStatics::ExistsByUser
PrimaryTileUserChangelogStatics::ExistsByUserAndTileUniqueId
PrimaryTileUserChangelogStatics::ExistsByWhenOccurred
PrimaryTileUserChangelogStatics::Find
PrimaryTileUserChangelogStatics::FindByUser
PrimaryTileUserChangelogStatics::FindByWhenOccurred
PrimaryTileUserChangelogStatics::Get
PrimaryTileUserChangelogStatics::GetBy_Created
PrimaryTileUserChangelogStatics::GetBy_Deleted
PrimaryTileUserChangelogStatics::GetByTileUniqueId
PrimaryTileUserChangelogStatics::GetByUserAndTileUniqueId
PrimaryTileUserChangelogStatics::TryGet
PrimaryTileUserChangelogStatics::TryGetBy_Created
PrimaryTileUserChangelogStatics::TryGetBy_Deleted
PrimaryTileUserChangelogStatics::TryGetByTileUniqueId
PrimaryTileUserChangelogStatics::TryGetByUserAndTileUniqueId
PrimaryTileUserDataChange::ctor
PrimaryTileUserDataChange::dtor
PrimaryTileUserNotificationChannel::ctor
PrimaryTileUserNotificationChannel::DeregisterForNotifications
PrimaryTileUserNotificationChannel::dtor
PrimaryTileUserNotificationChannel::RaiseNotification
PrimaryTileUserNotificationChannel::RegisterForNotifications
PrimaryTileUserNotificationChannelStatics::ActivateInstance
PrimaryTileUserNotificationChannelStatics::CreateForUser
PrimaryTileUserNotificationChannelStatics::CreateForUserSecurityIdentifier
PrimaryTileUserNotificationChannelStatics::CreateForUserSid
PrimaryTileUserNotificationChannelStatics::ctor
PrimaryTileUserNotificationChannelStatics::dtor
PrimaryTileUserStatics::ActivateInstance
PrimaryTileUserStatics::Add
PrimaryTileUserStatics::ClearWorkByWorkId
PrimaryTileUserStatics::ctor
PrimaryTileUserStatics::Delete
PrimaryTileUserStatics::DeleteByUserAndApplicationIdentity
PrimaryTileUserStatics::DeleteByWorkId
PrimaryTileUserStatics::dtor
PrimaryTileUserStatics::Exists
PrimaryTileUserStatics::ExistsBy_Created
PrimaryTileUserStatics::ExistsBy_Modified
PrimaryTileUserStatics::ExistsByApplicationIdentity
PrimaryTileUserStatics::ExistsByTileUniqueId
PrimaryTileUserStatics::ExistsByUser
PrimaryTileUserStatics::ExistsByUserAndApplicationIdentity
PrimaryTileUserStatics::Find
PrimaryTileUserStatics::FindBy_Created
PrimaryTileUserStatics::FindBy_Modified
PrimaryTileUserStatics::FindByApplicationIdentity
PrimaryTileUserStatics::FindByUser
PrimaryTileUserStatics::FindDataChangeByGTChangeId
PrimaryTileUserStatics::FindDataChangeByGTWhenOccurred
PrimaryTileUserStatics::FindDataChangeByUserAndGTChangeId
PrimaryTileUserStatics::FindDataChangeByUserAndGTWhenOccurred
PrimaryTileUserStatics::Get
PrimaryTileUserStatics::GetByTileUniqueId
PrimaryTileUserStatics::GetByUserAndApplicationIdentity
PrimaryTileUserStatics::GetDataChangeByChangeId
PrimaryTileUserStatics::TryGet
PrimaryTileUserStatics::TryGetByTileUniqueId
PrimaryTileUserStatics::TryGetByUserAndApplicationIdentity
PrimaryTileUserStatics::TryGetDataChangeByChangeId
PrimaryTileUserStatics::Update
PrimaryTileUserStatics::UpdateWorkId
PrimaryTileViewStatics::ActivateInstance
PrimaryTileViewStatics::ctor
PrimaryTileViewStatics::dtor
PrimaryTileViewStatics::Exists
PrimaryTileViewStatics::ExistsByApplication
PrimaryTileViewStatics::ExistsByApplicationAndTileId
PrimaryTileViewStatics::ExistsByPackage
PrimaryTileViewStatics::ExistsByTileUniqueId
PrimaryTileViewStatics::ExistsByUser
PrimaryTileViewStatics::ExistsByUserAndApplication
PrimaryTileViewStatics::ExistsByUserAndApplicationUserModelId
PrimaryTileViewStatics::Find
PrimaryTileViewStatics::FindByApplication
PrimaryTileViewStatics::FindByPackage
PrimaryTileViewStatics::FindByUser
PrimaryTileViewStatics::Get
PrimaryTileViewStatics::GetByApplicationAndTileId
PrimaryTileViewStatics::GetByTileUniqueId
PrimaryTileViewStatics::GetByUserAndApplication
PrimaryTileViewStatics::GetByUserAndApplicationUserModelId
PrimaryTileViewStatics::TryGet
PrimaryTileViewStatics::TryGetByApplicationAndTileId
PrimaryTileViewStatics::TryGetByTileUniqueId
PrimaryTileViewStatics::TryGetByUserAndApplication
PrimaryTileViewStatics::TryGetByUserAndApplicationUserModelId
Priorities
ProcessCount
ProcessId
ProcessIdToSessionId
ProcessIndex
ProcessingSQL
ProductName
ProductVersion
Profile
ProfileImagePath
ProgID
ProgID\
ProgIDAndDynamicAppUriHandlerGroup
ProgIDAndDynamicAppUriHandlerGroup\
ProgIDAndExtension
ProgIDAndExtension\
Protocol
Protocol\Data
Protocol\Data\
ProtocolStatics::ActivateInstance
ProtocolStatics::ctor
ProtocolStatics::dtor
ProtocolStatics::Exists
ProtocolStatics::ExistsByExtension
ProtocolStatics::ExistsByExtensionAndIndex
ProtocolStatics::ExistsByProgID
ProtocolStatics::ExistsByProgIDAndExtension
ProtocolStatics::ExistsByProtocolName
ProtocolStatics::ExistsByProtocolNameAndExtension
ProtocolStatics::ExistsByProtocolNameAndReturnResults
ProtocolStatics::ExistsByUserAndProtocolName
ProtocolStatics::ExistsByUserOrDefaultAccountAndProtocolName
ProtocolStatics::ExistsByUserOrDefaultAccountAndProtocolNameAndPackageFamilyName
ProtocolStatics::Find
ProtocolStatics::FindByExtension
ProtocolStatics::FindByProgID
ProtocolStatics::FindByProgIDAndExtension
ProtocolStatics::FindByProtocolName
ProtocolStatics::FindByProtocolNameAndExtension
ProtocolStatics::FindByProtocolNameAndReturnResults
ProtocolStatics::FindByUserAndProtocolName
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProgId
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProtocolName
ProtocolStatics::FindLauncherInfoByUserOrDefaultAccountAndProtocolNameAndPackageFamilyName
ProtocolStatics::Get
ProtocolStatics::GetByExtensionAndIndex
ProtocolStatics::TryGet
ProtocolStatics::TryGetByExtensionAndIndex
ProvisionedPackage
ProvisionedPackageDeleted
ProvisionedPackageDeletedStatics::ActivateInstance
ProvisionedPackageDeletedStatics::ctor
ProvisionedPackageDeletedStatics::dtor
ProvisionedPackageDeletedStatics::Exists
ProvisionedPackageDeletedStatics::ExistsByPackageIdentity
ProvisionedPackageDeletedStatics::ExistsByPath
ProvisionedPackageDeletedStatics::Find
ProvisionedPackageDeletedStatics::TryGet
ProvisionedPackageDeletedStatics::TryGetByPackageIdentity
ProvisionedPackageDeletedStatics::TryGetByPath
ProvisionedPackageExclude
ProvisionedPackageExcludeStatics::ActivateInstance
ProvisionedPackageExcludeStatics::ctor
ProvisionedPackageExcludeStatics::dtor
ProvisionedPackageExcludeStatics::Exists
ProvisionedPackageExcludeStatics::ExistsByPackageFamily
ProvisionedPackageExcludeStatics::Find
ProvisionedPackageExcludeStatics::TryGet
ProvisionedPackageExcludeStatics::TryGetByPackageFamily
ProvisionedPackageStatics::ActivateInstance
ProvisionedPackageStatics::ctor
ProvisionedPackageStatics::dtor
ProvisionedPackageStatics::Exists
ProvisionedPackageStatics::ExistsByPackageIdentity
ProvisionedPackageStatics::ExistsByPath
ProvisionedPackageStatics::Find
ProvisionedPackageStatics::TryGet
ProvisionedPackageStatics::TryGetByPackageIdentity
ProvisionedPackageStatics::TryGetByPath
PRVAX
Ps pw
PSh(9
PSh|b
PSh8I
PSj!Z
PSj#Z
PSj$Z
PSj)Z
PSj.Z
PSj\Z
PSj]Z
PSj3Z
PSjEZ
PSjgZ
PSjNZ
PSjOZ
PSjQZ
PSjRZ
PSjUZ
PSjVZ
PSjxZ
PSjyZ
Publisher
PublisherCacheFolder
PublisherCacheFolderStatics::ActivateInstance
PublisherCacheFolderStatics::ctor
PublisherCacheFolderStatics::dtor
PublisherCacheFolderStatics::Exists
PublisherCacheFolderStatics::ExistsByFolderName
PublisherCacheFolderStatics::ExistsByPackageExtension
PublisherCacheFolderStatics::ExistsByPackageExtensionAndFolderName
PublisherCacheFolderStatics::ExistsByPackageExtensionAndIndex
PublisherCacheFolderStatics::Find
PublisherCacheFolderStatics::FindByFolderName
PublisherCacheFolderStatics::FindByPackageExtension
PublisherCacheFolderStatics::Get
PublisherCacheFolderStatics::GetByPackageExtensionAndFolderName
PublisherCacheFolderStatics::GetByPackageExtensionAndIndex
PublisherCacheFolderStatics::TryGet
PublisherCacheFolderStatics::TryGetByPackageExtensionAndFolderName
PublisherCacheFolderStatics::TryGetByPackageExtensionAndIndex
PVj(Z
PVj)Z
PVj,Z
PVj^Z
PVj+Z
PVj4Z
PVjfZ
PVjgZ
PVjiZ
PVjKZ
PVjLZ
PVjMZ
PVjNZ
PVjoZ
PVjOZ
PVjpZ
PVjPZ
PVjqZ
PVjQZ
PVjrZ
PVjRZ
PVjSZ
PVjtZ
PVjUZ
PVjyZ
PWj8j Z
PWjuZ
PWSVRQ
q&<wM
q\Q17
q7y5T
QB[7w
QEFKR
QlN|z
QmMI#
qoe|9
QPh|b
QQQQQQPQQQQ
QQSVh
QQSVW
QQSVW3
QQSVWh
QQVW3
QRPh\
QRPh|
QRPh<
QSVW3
QSVWh
QSVWj
QSVWQ
QueryFullProcessImageNameW
QueryPerformanceCounter
QueryUnbiasedInterruptTime
QVhDq
QVj(Y
QVRh 
QVRh a
QVRh(6
QVRh`q
QVRh0
QVRh0p
QVRh8
QVRhh%
QVRhh3
QVRhp
QVRhP
QVRhP%
QVRhp0
QVRhxb
R!s4Z
R"dWD
r(4pE
R0^0y0
r2f;E
RaiseException
RaiseFailFastException
realloc
Redmond1
RegCloseKey
RegCreateKeyExW
RegDeleteTreeW
RegDeleteValueW
RegEnumKeyExW
RegisterServiceCtrlHandlerExW
RegOpenKeyExW
RegQueryInfoKeyW
RegQueryValueExW
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
RepairGhostMinimumAgeForDeletion
Repository._Checkpoint
RepositoryManager
RepositoryManager::Cache_CheckIntegrity
RepositoryManager::Cache_Initialize
RepositoryManager::Cache_Update
RepositoryManager::CheckIntegrity
RepositoryManager::Checkpoint
RepositoryManager::ClearChangelogs
RepositoryManager::ClearDatabaseCache
RepositoryManager::DoMaintenance
RepositoryManager::GCChangelogs
RepositoryManager::GetDatabaseSize
RepositoryManager::IsAutoCheck
RepositoryManager::IsCheckpointDue
RepositoryManager::IsMaintenance
RepositoryManager::Optimize
RepositoryManager::OptimizeForPartition
RepositoryManager::Repair
RepositoryManager::ResetAutoCheck
RepositoryManager::SetAutoCheck
RepositoryManager::SetCheckpointIsDue
RepositoryManager::SetMaintenanceIsDue
RepositoryManager::UpdateAllMultiPartTransactionsCascading
RepositoryManager::UpdateStatistics
RepositoryManager::UpdateStatisticsForPartition
RepositoryManager::Upgrade
Required configuration data not found: %ws
ResolveDelayLoadedAPI
Resource
ResourceGroup
ResourceManagerQueueGetString
ResourceStatics::ActivateInstance
ResourceStatics::ctor
ResourceStatics::dtor
ResourceStatics::Exists
ResourceStatics::ExistsByPackage
ResourceStatics::ExistsByPackageAndIndex
ResourceStatics::Find
ResourceStatics::FindByPackage
ResourceStatics::Get
ResourceStatics::GetByPackageAndIndex
ResourceStatics::TryGet
ResourceStatics::TryGetByPackageAndIndex
ReturnHr
Revision
rf`^H
RoActivateInstance
RoGetActivationFactory
RoInitialize
ROLLBACK /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
RoOriginateError
RoOriginateErrorW
RoRegisterActivationFactories
RoRevokeActivationFactories
RoTransformError
RoUninitialize
RqM7Z
RSPWQVh
RSPWQVhLT
Rt>7 ~Z
RtlAcquireSRWLockExclusive
RtlAcquireSRWLockShared
RtlAllocateHeap
RtlCaptureStackBackTrace
RtlCompareUnicodeString
RtlConvertSidToUnicodeString
RtlCopySid
RtlDeleteCriticalSection
RtlDetermineDosPathNameType_U
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlDowncaseUnicodeString
RtlEnterCriticalSection
RtlEqualSid
RtlExpandEnvironmentStrings
RtlFreeHeap
RtlFreeUnicodeString
RtlGetDeviceFamilyInfoEnum
RtlInitializeCriticalSection
RtlInitializeGenericTableAvl
RtlInitUnicodeString
RtlInsertElementGenericTableAvl
RtlIsMultiUsersInSessionSku
RtlIsStateSeparationEnabled
RtlLeaveCriticalSection
RtlLengthSid
RtlLookupElementGenericTableAvl
RtlNotifyFeatureUsage
RtlNtStatusToDosErrorNoTeb
RtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlReleaseSRWLockExclusive
RtlReleaseSRWLockShared
RtlSubscribeWnfStateChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlValidSid
RuntimeType
S$I?(L
S["Dn
s0WRSV
SBUO,6{
SchemaUsed
SchemaVersion
ScratchOverflow
ScratchOverflowPeak
ScratchSizePeak
ScratchUsed
ScratchUsedPeak
SecondaryTile
SecondaryTileStatics::ActivateInstance
SecondaryTileStatics::Add
SecondaryTileStatics::ClearWorkByWorkId
SecondaryTileStatics::ctor
SecondaryTileStatics::Delete
SecondaryTileStatics::DeleteByWorkId
SecondaryTileStatics::dtor
SecondaryTileStatics::Exists
SecondaryTileStatics::Find
SecondaryTileStatics::Get
SecondaryTileStatics::TryGet
SecondaryTileStatics::Update
SecondaryTileStatics::UpdateWorkId
SecondaryTileUser
SecondaryTileUser.SecondaryTile->SecondaryTile.rowid
SecondaryTileUserChangelog
SecondaryTileUserChangelogStatics::ActivateInstance
SecondaryTileUserChangelogStatics::ctor
SecondaryTileUserChangelogStatics::DeleteBy::Deleted
SecondaryTileUserChangelogStatics::DeleteByTileUniqueId
SecondaryTileUserChangelogStatics::dtor
SecondaryTileUserChangelogStatics::Exists
SecondaryTileUserChangelogStatics::ExistsBy_Created
SecondaryTileUserChangelogStatics::ExistsBy_Deleted
SecondaryTileUserChangelogStatics::ExistsByTileUniqueId
SecondaryTileUserChangelogStatics::ExistsByUser
SecondaryTileUserChangelogStatics::ExistsByUserAndTileUniqueId
SecondaryTileUserChangelogStatics::ExistsByWhenOccurred
SecondaryTileUserChangelogStatics::Find
SecondaryTileUserChangelogStatics::FindByUser
SecondaryTileUserChangelogStatics::FindByWhenOccurred
SecondaryTileUserChangelogStatics::Get
SecondaryTileUserChangelogStatics::GetBy_Created
SecondaryTileUserChangelogStatics::GetBy_Deleted
SecondaryTileUserChangelogStatics::GetByTileUniqueId
SecondaryTileUserChangelogStatics::GetByUserAndTileUniqueId
SecondaryTileUserChangelogStatics::TryGet
SecondaryTileUserChangelogStatics::TryGetBy_Created
SecondaryTileUserChangelogStatics::TryGetBy_Deleted
SecondaryTileUserChangelogStatics::TryGetByTileUniqueId
SecondaryTileUserChangelogStatics::TryGetByUserAndTileUniqueId
SecondaryTileUserDataChange::ctor
SecondaryTileUserDataChange::dtor
SecondaryTileUserNotificationChannel::ctor
SecondaryTileUserNotificationChannel::DeregisterForNotifications
SecondaryTileUserNotificationChannel::dtor
SecondaryTileUserNotificationChannel::RaiseNotification
SecondaryTileUserNotificationChannel::RegisterForNotifications
SecondaryTileUserNotificationChannelStatics::ActivateInstance
SecondaryTileUserNotificationChannelStatics::CreateForUser
SecondaryTileUserNotificationChannelStatics::CreateForUserSecurityIdentifier
SecondaryTileUserNotificationChannelStatics::CreateForUserSid
SecondaryTileUserNotificationChannelStatics::ctor
SecondaryTileUserNotificationChannelStatics::dtor
SecondaryTileUserStatics::ActivateInstance
SecondaryTileUserStatics::Add
SecondaryTileUserStatics::ClearWorkByWorkId
SecondaryTileUserStatics::ctor
SecondaryTileUserStatics::Delete
SecondaryTileUserStatics::DeleteByUserAndSecondaryTile
SecondaryTileUserStatics::DeleteByWorkId
SecondaryTileUserStatics::dtor
SecondaryTileUserStatics::Exists
SecondaryTileUserStatics::ExistsBy_Created
SecondaryTileUserStatics::ExistsBy_Modified
SecondaryTileUserStatics::ExistsByTileUniqueId
SecondaryTileUserStatics::ExistsByUser
SecondaryTileUserStatics::ExistsByUserAndApplicationIdentity
SecondaryTileUserStatics::ExistsByUserAndSecondaryTile
SecondaryTileUserStatics::Find
SecondaryTileUserStatics::FindBy_Created
SecondaryTileUserStatics::FindBy_Modified
SecondaryTileUserStatics::FindByUser
SecondaryTileUserStatics::FindByUserAndApplicationIdentity
SecondaryTileUserStatics::FindDataChangeByGTChangeId
SecondaryTileUserStatics::FindDataChangeByGTWhenOccurred
SecondaryTileUserStatics::FindDataChangeByUserAndGTChangeId
SecondaryTileUserStatics::FindDataChangeByUserAndGTWhenOccurred
SecondaryTileUserStatics::Get
SecondaryTileUserStatics::GetByTileUniqueId
SecondaryTileUserStatics::GetByUserAndSecondaryTile
SecondaryTileUserStatics::GetDataChangeByChangeId
SecondaryTileUserStatics::TryGet
SecondaryTileUserStatics::TryGetByTileUniqueId
SecondaryTileUserStatics::TryGetByUserAndSecondaryTile
SecondaryTileUserStatics::TryGetDataChangeByChangeId
SecondaryTileUserStatics::Update
SecondaryTileUserStatics::UpdateWorkId
SecondaryTileView
SecondaryTileViewStatics::ActivateInstance
SecondaryTileViewStatics::Add
SecondaryTileViewStatics::ctor
SecondaryTileViewStatics::Delete
SecondaryTileViewStatics::DeleteByTileUniqueId
SecondaryTileViewStatics::DeleteByUserAndApplicationAndTileId
SecondaryTileViewStatics::dtor
SecondaryTileViewStatics::Exists
SecondaryTileViewStatics::ExistsByTileUniqueId
SecondaryTileViewStatics::ExistsByUser
SecondaryTileViewStatics::ExistsByUserAndApplication
SecondaryTileViewStatics::ExistsByUserAndApplicationAndTileId
SecondaryTileViewStatics::ExistsByUserAndPackage
SecondaryTileViewStatics::Find
SecondaryTileViewStatics::FindByUser
SecondaryTileViewStatics::FindByUserAndApplication
SecondaryTileViewStatics::FindByUserAndPackage
SecondaryTileViewStatics::Get
SecondaryTileViewStatics::GetByTileUniqueId
SecondaryTileViewStatics::GetByUserAndApplicationAndTileId
SecondaryTileViewStatics::TryGet
SecondaryTileViewStatics::TryGetByTileUniqueId
SecondaryTileViewStatics::TryGetByUserAndApplicationAndTileId
SecondaryTileViewStatics::Update
SELECT "as"._AppServiceID, "as"._Revision, "as"._WorkId, "as".Name, "as".Extension, "as"."Index", "as"._Dictionary FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND "as"._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT "as"._AppServiceID, "as"._Revision, "as"._WorkId, "as".Name, "as".Extension, "as"."Index", "as"._Dictionary FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND ("as"._WorkId=0 OR "as"._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE ActivationKey IS ?;
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation;
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE _WorkId=0;
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE Activation=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE Activation=? AND _WorkId=0;
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE User=? AND _WorkId=0;
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE User=? AND Activation=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ActivationUserID, _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE User=? AND Activation=? AND _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND _WorkId=0;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Extension=? AND _WorkId=0;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary FROM AppExecutionAliasUser WHERE User=?;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Status, _Dictionary FROM AppExecutionAliasUser;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _WorkId=0;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND _WorkId=0;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExtensionHostID, _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE Extension=? AND Name=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Extension=? AND Name=? AND _WorkId=0;
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppExtensionID, _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE Name=? AND _WorkId=0;
SELECT _AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary FROM AppInstaller WHERE Uri=?;
SELECT _AppInstallerID, _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary FROM AppInstaller;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _WorkId=0;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0 ORDER BY "Index";
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0;
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Category=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE EditionId IS ? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE Package=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0;
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE ApplicationUserModelId=?;
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Name=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Extension=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND _WorkId=0;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppServiceID, _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE Name=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Extension=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND _WorkId=0;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppUriHandlerGroupID, _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE HostName=? AND Extension=? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND _WorkId=0;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppUriHandlerID, _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Extension=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND _WorkId=0;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BackgroundTaskID, _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND _WorkId=0;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _WorkId=0;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundleID, _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE Package=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND _WorkId=0;
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundlePackageID, _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE PackageType=? AND Bundle=? AND _WorkId=0;
SELECT _BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE (_WorkId=0 OR _WorkId=?);
SELECT _BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE _WorkId=0;
SELECT _BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE BundlePackage=? AND (_WorkId=0 OR _WorkId=?);
SELECT _BundleResourceID, _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE BundlePackage=? AND _WorkId=0;
SELECT _CacheActivationID, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup FROM CacheActivation;
SELECT _CacheActivationUserID, Activation, User FROM CacheActivationUser;
SELECT _CacheApplicationExtensionID, Application, "Index", Flags, Category, Activation, HostId, Parameters FROM CacheApplicationExtension;
SELECT _CacheApplicationID, Package, "Index", Flags, PackageRelativeApplicationId, ApplicationUserModelId, Activation, HostId, Parameters, Executable, Entrypoint, StartPage FROM CacheApplication;
SELECT _CacheApplicationUserID, Application, User, ApplicationUserModelId FROM CacheApplicationUser;
SELECT _CacheAppUriHandlerGroupID, Name, Extension FROM CacheAppUriHandlerGroup;
SELECT _CacheAppUriHandlerID, HostName, Extension, ProgID, AppUriHandlerGroup FROM CacheAppUriHandler;
SELECT _CacheDynamicAppUriHandlerGroupID, User, PackageFamily, Name FROM CacheDynamicAppUriHandlerGroup;
SELECT _CacheDynamicAppUriHandlerID, DynamicAppUriHandlerGroup, HostName, ProgID FROM CacheDynamicAppUriHandler;
SELECT _CacheFileTypeAssociationID, Extension, FileType, ProgID FROM CacheFileTypeAssociation;
SELECT _CacheHostRuntimeID, PackageExtension, HostId FROM CacheHostRuntime;
SELECT _CachePackageExtensionID, Package, "Index", Flags, Category, Activation, HostId, Parameters FROM CachePackageExtension;
SELECT _CachePackageExternalLocationID, User, Package, Path FROM CachePackageExternalLocation;
SELECT _CachePackageFamilyID, PackageFamilyName, PackageSID, Publisher FROM CachePackageFamily;
SELECT _CachePackageID, PackageFullName, PackageFamily, PackageType, Flags, Flags2, PackageOrigin, Volume, OSMaxVersionTested, InstalledLocation, MutableLink, MutableLocation, TargetDeviceFamilyName FROM CachePackage;
SELECT _CachePackageMachineStatusID, PackageIdentity, PackageFullName, Status FROM CachePackageMachineStatus;
SELECT _CachePackageUserID, Package, User FROM CachePackageUser;
SELECT _CachePackageUserStatusID, User, PackageIdentity, PackageFullName, Status FROM CachePackageUserStatus;
SELECT _CacheProtocolID, Extension, Name, ProgID FROM CacheProtocol;
SELECT _CacheUserID, UserSid FROM CacheUser;
SELECT _ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet WHERE Name=?;
SELECT _ConnectedSetID, _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=?;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE ConnectedSet=?;
SELECT _ConnectedSetPackageFamilyID, _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _WorkId=0;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND _WorkId=0;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupFileID, _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND _WorkId=0 ORDER BY "Index";
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND _WorkId=0;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ContentGroupID, _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE _WorkId=0;
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE PackageExtension=? AND _WorkId=0;
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE PackageExtension=? AND Verb=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallID, _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE PackageExtension=? AND Verb=? AND _WorkId=0;
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE _WorkId=0;
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE CustomInstall=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE CustomInstall=? AND "Index"=? AND _WorkId=0;
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE CustomInstall=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallProcessID, _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE CustomInstall=? AND _WorkId=0;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE _WorkId=0;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE CustomInstallProcess=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE CustomInstallProcess=? AND _WorkId=0;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE User=? AND _WorkId=0;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE User=? AND CustomInstallProcess=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallProcessStatusID, _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE User=? AND CustomInstallProcess=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND _WorkId=0;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _CustomInstallWorkID, _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _WorkId=0;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DefaultTileID, _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE Application=? AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=3 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=3 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependencyType=3 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependencyType=3 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE (_WorkId=0 OR _WorkId=?);
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND "Index"=? AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND Name=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND Name=? AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE Name=? AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE PackageIdentity=? AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE User=? AND _WorkId=0;
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _DeploymentHistoryID, _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE WhenOccurred=? AND _WorkId=0;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE User=?;
SELECT _DynamicAppUriHandlerGroupID, _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE HostName=? AND DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE HostName=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE ProgID IS ?;
SELECT _DynamicAppUriHandlerID, _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler;
SELECT _EndOfLifePackage, _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage WHERE PackageFamily=?;
SELECT _EndOfLifePackage, _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage;
SELECT _EnterpriseID, _Revision, EnterpriseId, _Dictionary FROM Enterprise WHERE EnterpriseId=?;
SELECT _EnterpriseID, _Revision, EnterpriseId, _Dictionary FROM Enterprise;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Digest=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Digest=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Package=? AND _WorkId=0;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _FileID, _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE Package=? AND RelativeFilePath=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND _WorkId=0;
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _FileTypeAssociationID, _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE HostId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE HostId=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND _WorkId=0;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _HostRuntimeID, _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND _WorkId=0;
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _WorkId=0;
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE PatchId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MigratorPatchID, _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE PatchId=? AND _WorkId=0;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _WorkId=0;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtApplicationID, _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE Application=? AND _WorkId=0;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _WorkId=0;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE DefaultTile=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtDefaultTileID, _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE DefaultTile=? AND _WorkId=0;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _WorkId=0;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtPackageID, _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE Package=? AND _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Filename=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Filename=? AND _WorkId=0;
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtSharedPriID, _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE Package=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE MrtSharedPri=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE MrtSharedPri=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0;
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _MrtUserPriID, _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE User=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND _WorkId=0;
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND (_WorkId=0 OR _WorkId=?);
SELECT _NamedDependncyID, _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE Package=? AND DependencyType=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND _WorkId=0;
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND _WorkId=0;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _OptionalBundlePackageID, _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0;
SELECT _OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE _WorkId=0;
SELECT _OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE OptionalBundlePackage=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleResourceID, _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE OptionalBundlePackage=? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE AppInstaller=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE AppInstaller=? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND _WorkId=0;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageAppInstallerID, _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Category=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (pel.User=0 OR pel.User=?1) AND pel.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 ORDER BY User DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND (_WorkId=0 OR _WorkId=?) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 R p._WorkId=?3) ORDER BY User DESC, _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY User DESC, _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND _WorkId=0 ORDER BY User DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=? AND PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageFamilyName=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageSID=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageFamilyPolicyID, _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE PackageFamily=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE User=? AND PackageFamily=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE User=?;
SELECT _PackageFamilyUserID, _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE PackageFamilyUser=? AND ResourceId=?;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE PackageFamilyUser=?;
SELECT _PackageFamilyUserResourceID, _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE EditionId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageOrigin=?1 AND (_WorkId=0 OR _WorkId=?2);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFamily=?;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFullName=?;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE InstalledLocation=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE InstalledLocation=? AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE Volume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE Volume=? AND _WorkId=0;
SELECT _PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus WHERE PackageIdentity=?;
SELECT _PackageMachineStatusID, _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND _WorkId=0;
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePolicyID, _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Name=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND _WorkId=0;
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackagePropertyID, _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND _WorkId=0;
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageSourceUriID, _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE PackageIdentity=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE User=? AND PackageIdentity=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE User=?;
SELECT _PackageSupercededID, _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE User=? AND PackageIdentity=?;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE User=?;
SELECT _PackageUserStatusID, _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE Package=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Created=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _Modified=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE ApplicationIdentity=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND _WorkId=0;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PrimaryTileUserID, _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND "Index"=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProgID IS ? AND Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND Extension=? AND _WorkId=0;
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ProtocolID, _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND _WorkId=0;
SELECT _ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude WHERE PackageFamily=?;
SELECT _ProvisionedPackageExcludeID, _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE PackageIdentity=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE Path=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE PackageIdentity=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE Path=?;
SELECT _ProvisionedPackageID, _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND _WorkId=0;
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE _WorkId=0;
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WowDependencyGraphID=? AND _WorkId=0;
SELECT _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE _ActivationUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Activation, User, _Dictionary FROM ActivationUser WHERE _ActivationUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _MrtApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary FROM MrtApplication WHERE _MrtApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryPreviewTileView WHERE _PrimaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _PrimaryTileUserID, _PrimaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM PrimaryTileView WHERE _PrimaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _SecondaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _TileViewID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _TileViewID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _DefaultTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, UpdateRecurrence, UpdateUriTemplate, ShowNameOnTiles, ShortName, DefaultSize, HoloContentChoice, MixedRealityModel, _Dictionary FROM DefaultTile WHERE _DefaultTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _BundlePackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Bundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, Flags, _Dictionary FROM BundlePackage WHERE _BundlePackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE _BundleResourceID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, BundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM BundleResource WHERE _BundleResourceID=? AND _WorkId=0;
SELECT _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _ContentGroupFileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, ContentGroup, File, _Dictionary FROM ContentGroupFile WHERE _ContentGroupFileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE _CustomInstallProcessID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, CustomInstall, "Index", Flags, File, Arguments, _Dictionary FROM CustomInstallProcess WHERE _CustomInstallProcessID=? AND _WorkId=0;
SELECT _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE _CustomInstallProcessStatusID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, CustomInstallProcess, User, Status, _Dictionary FROM CustomInstallProcessUserStatus WHERE _CustomInstallProcessStatusID=? AND _WorkId=0;
SELECT _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, DefaultTile, ShortNameReference, _Dictionary FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _NamedDependncyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, DependencyType, Package, "Index", Name, Version, _Dictionary FROM NamedDependency WHERE _NamedDependncyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE _DependencyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE _DependencyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _AppExtensionHostID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Extension, Name, _Dictionary FROM AppExtensionHost WHERE _AppExtensionHostID=? AND _WorkId=0;
SELECT _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _HostRuntimeID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, HostId, PackageExtension, _Dictionary FROM HostRuntime WHERE _HostRuntimeID=? AND _WorkId=0;
SELECT _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _AppUriHandlerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, HostName, Extension, ProgID, AppUriHandlerGroup, _Dictionary FROM AppUriHandler WHERE _AppUriHandlerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _OptionalBundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE _OptionalBundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _AppServiceID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Extension, "Index", _Dictionary FROM AppService WHERE _AppServiceID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Extension, _Dictionary FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _AppExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary FROM AppExtension WHERE _AppExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, OptionalBundle, PackageType, Version, Architecture, ResourceId, Filename, "Offset", Size, _Dictionary FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE _OptionalBundleResourceID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, OptionalBundlePackage, Language, Scale, DXFeatureLevel, _Dictionary FROM OptionalBundleResource WHERE _OptionalBundleResourceID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, _Dictionary FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE _ResourceID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE _ResourceID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, _Dictionary FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _ContentGroupID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, ContentGroupType, Status, _Dictionary FROM ContentGroup WHERE _ContentGroupID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, AppInstaller, _Dictionary FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _MrtPackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary FROM MrtPackage WHERE _MrtPackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _MrtSharedPriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Filename, _Dictionary FROM MrtSharedPri WHERE _MrtSharedPriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE _FileID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, RelativeFilePath, Size, Digest, _Dictionary FROM File WHERE _FileID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _PackageSourceUriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Uri, Kind, _Dictionary FROM PackageSourceUri WHERE _PackageSourceUriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _MrtUserPriID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, User, Filename, MrtSharedPri, _Dictionary FROM MrtUserPri WHERE _MrtUserPriID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, _Dictionary FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE _CustomInstallID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageExtension, Verb, Flags, _Dictionary FROM CustomInstall WHERE _CustomInstallID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageIdentity, User, HResult, WhenOccurred, _Dictionary FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _MigratorPatchID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PatchId, HResult, StateRepositoryVersion, "When", _Dictionary FROM MigratorPatch WHERE _MigratorPatchID=? AND _WorkId=0;
SELECT _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _ProtocolID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary FROM Protocol WHERE _ProtocolID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Type, Extension, "Index", _Dictionary FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE _AppxExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE _AppxExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Name, "Index", Flags, Status, File, Arguments, _Dictionary FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, User, PackageFamily, Name, "Index", ValueString, ValueNumber, _Dictionary FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0;
SELECT _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE _ActivationID=?;
SELECT _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE _ApplicationIdentityID=?;
SELECT _Revision, ConnectedSet, PackageFamily, _Dictionary FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=?;
SELECT _Revision, DynamicAppUriHandlerGroup, HostName, ProgID, _Dictionary FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=?;
SELECT _Revision, EnterpriseId, _Dictionary FROM Enterprise WHERE _EnterpriseID=?;
SELECT _Revision, Name, Flags, Status, _Dictionary FROM ConnectedSet WHERE _ConnectedSetID=?;
SELECT _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE _PackageFamilyID=?;
SELECT _Revision, PackageFamily, _Dictionary FROM EndOfLifePackage WHERE _EndOfLifePackage=?;
SELECT _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE _PackageIdentityID=?;
SELECT _Revision, PackageFamily, User, WhenInstalled, _Dictionary FROM PackageFamilyUser WHERE _PackageFamilyUserID=?;
SELECT _Revision, PackageFamilyUser, ResourceId, _Dictionary FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=?;
SELECT _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackage WHERE _ProvisionedPackageID=?;
SELECT _Revision, PackageIdentity, Flags, Path, SignatureOrigin, Region, _Dictionary FROM ProvisionedPackageDeleted WHERE _ProvisionedPackageID=?;
SELECT _Revision, PackageIdentity, Status, _Dictionary FROM PackageMachineStatus WHERE _PackageMachineStatusID=?;
SELECT _Revision, PackageIdentity, User, _Dictionary FROM PackageSuperceded WHERE _PackageSupercededID=?;
SELECT _Revision, PackageIdentity, User, Status, _Dictionary FROM PackageUserStatus WHERE _PackageUserStatusID=?;
SELECT _Revision, Uri, Version, LastChecked, CheckUpdateInterval, Flags, _Dictionary FROM AppInstaller WHERE _AppInstallerID=?;
SELECT _Revision, User, ApplicationIdentity, Status, _Dictionary FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=?;
SELECT _Revision, User, PackageFamily, _Dictionary FROM ProvisionedPackageExclude WHERE _ProvisionedPackageExcludeID=?;
SELECT _Revision, User, PackageFamily, Name, _Dictionary FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=?;
SELECT _Revision, UserSid, _Dictionary FROM User WHERE _UserID=?;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _SecondaryTileUserID, _SecondaryTileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM SecondaryTileView WHERE User=? AND Package=? AND _WorkId=0;
SELECT _SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileID, _Revision, _WorkId, Flags, TileTemplate, TileId, Arguments, EditionId, _Dictionary FROM SecondaryTile WHERE _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserChangelogID, _Revision, _WorkId, _Created, _Deleted, User, TileUniqueId, WhenOccurred, _Dictionary FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Created=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _Modified=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?);
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _SecondaryTileUserID, _Revision, _WorkId, _Created, _Modified, SecondaryTile, User, ApplicationIdentity, State, TileUniqueId, _Dictionary FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0;
SELECT _SequenceID, Id, LastValue FROM Sequence WHERE Id=?;
SELECT _SequenceID, Id, LastValue FROM Sequence;
SELECT _SRJournalID, _Revision, _WorkId, ObjectType, "Action", ObjectId, Flags, User, PackageFamily, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId, _Dictionary FROM SRJournal WHERE ((ObjectType<>2) OR (ObjectType=2 AND User NOT IN (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'))) AND (_WorkId=0 OR _WorkId=?) ORDER BY SequenceId;
SELECT _SRJournalID, _Revision, _WorkId, ObjectType, "Action", ObjectId, Flags, User, PackageFamily, PackageIdentity, ApplicationIdentity, WhenOccurred, SequenceId, _Dictionary FROM SRJournal WHERE ((ObjectType<>2) OR (ObjectType=2 AND User NOT IN (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'))) AND _WorkId=0 ORDER BY SequenceId;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE (_WorkId=0 OR _WorkId=?);
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _WorkId=0;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND _WorkId=0;
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TargetDeviceFamilyID, _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE Package=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Application=? AND TileId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE Package=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE TileUniqueId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Application=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0;
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _TileViewID, _Revision, _WorkId, Application, Package, Flags, TileType, TileTemplate, TileId, Arguments, EditionId, _Dictionary, _TileUserID, _TileUser_Revision, _Created, _Modified, User, ApplicationIdentity, State, TileUniqueId, ApplicationUserModelId FROM TileView WHERE User=? AND Package=? AND _WorkId=0;
SELECT _UserID FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId=? AND _WorkId=0;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM PrimaryTileUserDataChange WHERE WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId=? AND _WorkId=0;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND ChangeId>? AND (_WorkId=0 OR _WorkId=?) ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND ChangeId>? AND _WorkId=0 ORDER BY ChangeId;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE User=? AND WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE WhenOccurred>? AND (_WorkId=0 OR _WorkId=?) ORDER BY WhenOccurred;
SELECT _WorkId, ChangeId, Disposition, TileUniqueId FROM SecondaryTileUserDataChange WHERE WhenOccurred>? AND _WorkId=0 ORDER BY WhenOccurred;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=?1) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND _WorkId=?2) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=?5) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ContentId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ContentId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE DeviceId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE DeviceId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EditionId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE Package=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ProductId=? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE ProductId=? AND _WorkId=0;
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE TitleId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _XboxPackageID, _Revision, _WorkId, Package, EditionId, BuildId, DeviceId, BuildVersion, ContentId, ProductId, MediaId, PackageSize, TitleId, PrimaryServiceConfigId, EraVersion, EscrowedKeyBlobId, _Dictionary FROM XboxPackage WHERE TitleId IS ? AND _WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ai._ApplicationIdentityID=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ai._ApplicationIdentityID=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=? AND a._WorkId=0 AND p._WorkId=0 ;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID WHERE ae.Category='windows.appExecutionAlias' AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 AND ae._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a._ApplicationID=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.AppListEntry=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=?2 AND p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE a.ApplicationUserModelId=?2 AND p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=? AND a._WorkId=0 AND p._WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY a._WorkId DESC;
SELECT a.ApplicationType FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0;
SELECT abt._BackgroundTaskID, abt._Revision, abt._WorkId, abt.Type, abt.Extension, abt."Index", abt._Dictionary FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND (abt._WorkId=0 OR abt._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT abt._BackgroundTaskID, abt._Revision, abt._WorkId, abt.Type, abt.Extension, abt."Index", abt._Dictionary FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND abt._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT Activation, User FROM CacheActivationUser WHERE _CacheActivationUserID=?;
SELECT ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup FROM CacheActivation WHERE _CacheActivationID=?;
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4))) AND p.PackageFullName=?2 AND ae.Name=?3 AND ae._WorkId=0 AND ae2._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND p._WorkId=0
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Package AS p ON p._PackageID=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4)))F AND p.PackageFullName=?2 AND ae.Name=?3 AND (ae._WorkId=0 OR ae._WorkId=?5) AND (ae2._WorkId=0 OR ae2._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pu._WorkId=0 OR pu._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5)
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3))) AND ae.Name=?2 AND ae._WorkId=0 AND ae2._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0
SELECT ae._AppExtensionID, ae._Revision, ae._WorkId, ae.Name, ae.Id, ae.PublicFolder, ae.DisplayName, ae.Description, ae.Extension, ae._Dictionary FROM AppExtension AS ae INNER JOIN ApplicationExtension AS ae2 ON ae2._ApplicationExtensionID=ae.Extension INNER JOIN Application AS a ON a._ApplicationID=ae2.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE (pu.User=?1 OR (pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3))) AND AND ae.Name=?2 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (ae2._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND p.PackageFullName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.fileTypeAssociation' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND fta._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pu._WorkId=0 OR pu._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID WHERE ae.Category='windows.protocol' AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 AND pr._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT ap._ApplicationPropertyID, ap._Revision, ap._WorkId, ap.Application, ap."Index", ap.Name, ap._Dictionary FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT Application, "Index", Flags, Category, Activation, HostId, Parameters FROM CacheApplicationExtension WHERE _CacheApplicationExtensionID=?;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT auhg._AppUriHandlerGroupID, auhg._Revision, auhg._WorkId, auhg.Name, auhg.Extension, auhg._Dictionary FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND auhg.Name=?3 AND (auhg._WorkId=0 OR auhg._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT auhg._AppUriHandlerGroupID, auhg._Revision, auhg._WorkId, auhg.Name, auhg.Extension, auhg._Dictionary FROM AppUriHandlerGroup AS auhg INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND auhg.Name=?3 AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT cau._CacheApplicationUserID, cau.Application, cau.User, cau.ApplicationUserModelId FROM CacheApplicationUser AS cau INNER JOIN Application AS a ON a._ApplicationID=cau.Application INNER JOIN Package AS p ON p._PackageID=a.Package WHERE User=? AND Package=?;
SELECT COUNT(*), GROUP_CONCAT(_BundleID) FROM (SELECT b._BundleId FROM Source.Bundle AS b WHERE b.Package NOT IN(SELECT p._PackageID FROM Source.Package AS p)UNION SELECT b._BundleID FROM Source.Bundle AS b INNER JOIN Source.Package AS p ON p._PackageID=b.Package WHERE p.SourceBundle<>b._BundleID);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ActivationUser WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ActivationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstall WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallProcess WHERE (CustomInstall>0) AND (CustomInstall NOT IN (SELECT _CustomInstallID FROM CustomInstall));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallProcessUserStatus WHERE (CustomInstallProcess>0) AND (CustomInstallProcess NOT IN (SELECT _CustomInstallProcessID FROM CustomInstallProcess));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallProcessUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT cpu._CachePackageUserID, cpu.Package, cpu.User FROM CachePackageUser AS cpu INNER JOIN User AS u ON u._UserID=cpu.User WHERE u.UserSid<>X'010100000000000512000000';
SELECT dauhg._DynamicAppUriHandlerGroupID, dauhg._Revision, dauhg.User, dauhg.PackageFamily, dauhg.Name, dauhg._Dictionary FROM DynamicAppUriHandlerGroup AS dauhg INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily WHERE dauhg.User=? AND pf.PackageFamilyName=? AND dauhg.Name=?;
SELECT DynamicAppUriHandlerGroup, HostName, ProgID FROM CacheDynamicAppUriHandler WHERE _CacheDynamicAppUriHandlerID=?;
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS( SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu.DeploymentState=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Activation WHERE _ActivationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Activation WHERE ActivationKey IS ? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE _ActivationUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE _ActivationUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE Activation=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE Activation=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE User=? AND Activation=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ActivationUser WHERE User=? AND Activation=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE _AppExecutionAliasID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAlias WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE _AppExecutionAliasUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE ApplicationIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExecutionAliasUser WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE _AppExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Extension=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtension WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND aeh.Name=?3 AND (aeh._WorkId=0 OR aeh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4))
SELECT EXISTS(SELECT 1 FROM AppExtensionHost AS aeh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aeh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND aeh.Name=?3 AND aeh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0)
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE _AppExtensionHostID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE _AppExtensionHostID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppExtensionHost WHERE Extension=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstaller WHERE _AppInstallerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppInstaller WHERE Uri=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND (a._WorkId=0 OR a._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package WHERE p.PackageFullName=?1 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4)  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3)  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND a._WorkId=0  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE a.Package=?2 AND pu.User=?1 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE _ApplicationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND (abt._WorkId=0 OR abt._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask AS abt INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=abt.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE abt.Type=?2 AND pu.User=?1 AND abt._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE _BackgroundTaskID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationBackgroundTask WHERE Type=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE _ApplicationContentUriRuleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationIdentity WHERE _ApplicationIdentityID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationIdentity WHERE ApplicationUserModelId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND (ap._WorkId=0 OR ap._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty AS ap INNER JOIN Application AS a ON a._ApplicationID=ap.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ap.Name=?2 AND pu.User=?1 AND ap._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE _ApplicationPropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ApplicationProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND "as"._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService AS "as" INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID="as".Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE "as".Name=?2 AND pu.User=?1 AND ("as"._WorkId=0 OR "as"._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE _AppServiceID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE _AppServiceID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppService WHERE Name=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.HostName=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE auh.ProgId=?2 AND pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (auh._WorkId=0 OR auh._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE _AppUriHandlerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE _AppUriHandlerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE HostName=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandler WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE _AppUriHandlerGroupID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppUriHandlerGroup WHERE Name=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE _AppxExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE _AppxExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE _BundleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Bundle WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE _BundlePackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE _BundlePackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE Bundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND Bundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundlePackage WHERE PackageType=? AND Bundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundleResource WHERE _BundleResourceID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundleResource WHERE _BundleResourceID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundleResource WHERE BundlePackage=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM BundleResource WHERE BundlePackage=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheActivation WHERE _CacheActivationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheActivationUser WHERE _CacheActivationUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplication WHERE _CacheApplicationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplicationExtension WHERE _CacheApplicationExtensionID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheApplicationUser WHERE User=? AND Application=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheAppUriHandler WHERE _CacheAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheAppUriHandlerGroup WHERE _CacheAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheDynamicAppUriHandler WHERE _CacheDynamicAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheDynamicAppUriHandlerGroup WHERE _CacheDynamicAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheFileTypeAssociation WHERE _CacheFileTypeAssociationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheHostRuntime WHERE _CacheHostRuntimeID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackage WHERE _CachePackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageExtension WHERE _CachePackageExtensionID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageExternalLocation WHERE _CachePackageExternalLocationID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageFamily WHERE _CachePackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageMachineStatus WHERE _CachePackageMachineStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageUser WHERE _CachePackageUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CachePackageUserStatus WHERE _CachePackageUserStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheProtocol WHERE _CacheProtocolID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CacheUser WHERE _CacheUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSet WHERE _ConnectedSetID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSet WHERE Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE _ConnectedSetPackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE ConnectedSet=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ConnectedSetPackageFamily WHERE ConnectedSet=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE _ContentGroupID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroup WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE _ContentGroupFileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE _ContentGroupFileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ContentGroupFile WHERE ContentGroup=? AND File=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE _CustomInstallID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE _CustomInstallID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE PackageExtension=? AND Verb=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstall WHERE PackageExtension=? AND Verb=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE _CustomInstallProcessID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE _CustomInstallProcessID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE CustomInstall=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE CustomInstall=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE CustomInstall=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcess WHERE CustomInstall=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE _CustomInstallProcessStatusID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE _CustomInstallProcessStatusID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE CustomInstallProcess=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE CustomInstallProcess=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE User=? AND CustomInstallProcess=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallProcessUserStatus WHERE User=? AND CustomInstallProcess=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE _CustomInstallWorkID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM CustomInstallWork WHERE User=? AND Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE _DefaultTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE _DefaultTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DefaultTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE _DependencyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE _DependencyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE DependentPackage=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Dependency WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=?5) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _DependencyGraphID=?4 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE _DeploymentHistoryID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE PackageIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE PackageIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DeploymentHistory WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE _DynamicAppUriHandlerID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE HostName=? AND DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE HostName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE ProgID IS ? AND DynamicAppUriHandlerGroup=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandler WHERE ProgID IS ? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE _DynamicAppUriHandlerGroupID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? AND Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DynamicAppUriHandlerGroup WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM EndOfLifePackage WHERE _EndOfLifePackage=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM EndOfLifePackage WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Enterprise WHERE _EnterpriseID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Enterprise WHERE EnterpriseId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE _FileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE _FileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Digest=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Digest=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND RelativeFilePath=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM File WHERE Package=? AND RelativeFilePath=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE _FileTypeAssociationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ContentType IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE FileType=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM FileTypeAssociation WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE _HostRuntimeID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE _HostRuntimeID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE HostId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE HostId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM HostRuntime WHERE PackageExtension=? AND HostId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE _MigratorPatchID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE _MigratorPatchID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE PatchId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MigratorPatch WHERE PatchId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE _MrtApplicationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE _MrtApplicationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtApplication WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE _MrtDefaultTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE DefaultTile=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtDefaultTile WHERE DefaultTile=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE _MrtPackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE _MrtPackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtPackage WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE _MrtSharedPriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE _MrtSharedPriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Filename=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Filename=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtSharedPri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE _MrtUserPriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE _MrtUserPriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE MrtSharedPri=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE MrtSharedPri=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM MrtUserPri WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE _NamedDependncyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE _NamedDependncyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM NamedDependency WHERE Package=? AND DependencyType=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE _OptionalBundleID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE _OptionalBundleID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE MainBundle=? AND Name=? AND Publisher=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundle WHERE Name=? AND Publisher=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE _OptionalBundlePackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundlePackage WHERE OptionalBundle=? AND Version=? AND Architecture=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundleResource WHERE _OptionalBundleResourceID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundleResource WHERE _OptionalBundleResourceID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundleResource WHERE OptionalBundlePackage=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM OptionalBundleResource WHERE OptionalBundlePackage=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE _PackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE EditionId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND Version=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Package WHERE SourceBundle=? AND PackageType & ? !=0 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE _PackageAppInstallerID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE AppInstaller=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE AppInstaller=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageAppInstaller WHERE Package=? AND AppInstaller=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 R p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE (User=0 OR User=?1) AND PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE (User=0 OR User=?) AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE _PackageExternalLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE _PackageFamilyID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? AND PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE Name=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageFamilyName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PackageSID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamily WHERE PublisherId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE _PackageFamilyPolicyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE PackageFamily=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyPolicy WHERE User=? AND PackageFamily=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pf.PackageFamilyName=?1 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pfu.User=?1 AND pf.PackageFamilyName=?2 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE _PackageFamilyUserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE User=? AND PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUser WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE _PackageFamilyUserResourceID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE PackageFamilyUser=? AND ResourceId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageFamilyUserResource WHERE PackageFamilyUser=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE _PackageIdentityID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageIdentity WHERE PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE InstalledLocation=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE InstalledLocation=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE Volume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageMachineStatus WHERE _PackageMachineStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageMachineStatus WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE _PackagePolicyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND "Index"=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueNumber=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackagePolicy WHERE User=? AND Package=? AND Name=? AND ValueString IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE _PackagePropertyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageProperty WHERE Package=? AND Name=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE _PackageSourceUriID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE _PackageSourceUriID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSourceUri WHERE Package=? AND Kind=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE _PackageSupercededID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE User=? AND PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageSuperceded WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3)  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0  LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND DeploymentState=? AND IsExplicitlyInstalled=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE _PackageUserStatusID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE User=? AND PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus WHERE User=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE _PrimaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryPreviewTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE _PrimaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTile WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _Modified=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE _PrimaryTileUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE _PrimaryTileUserChangelogID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE _PrimaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE _PrimaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PrimaryTileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pkg._WorkId=0 OR pkg._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 AND pu._WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE _ProtocolID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE _ProtocolID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProgID IS ? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND Extension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Protocol WHERE ProtocolName=? AND ReturnResults=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE _ProvisionedPackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackage WHERE Path=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE _ProvisionedPackageID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE PackageIdentity=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageDeleted WHERE Path=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageExclude WHERE _ProvisionedPackageExcludeID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM ProvisionedPackageExclude WHERE PackageFamily=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE _PublisherCacheFolderID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PublisherCacheFolder WHERE PackageExtension=? AND FolderName IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE _ResourceID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE _ResourceID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Resource WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTile WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTile WHERE _SecondaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Modified=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _Modified=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE _SecondaryTileUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND ApplicationIdentity=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUser WHERE User=? AND SecondaryTile=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Created=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Created=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Deleted=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _Deleted=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE _SecondaryTileUserChangelogID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE User=? AND TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileUserChangelog WHERE WhenOccurred=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE _SecondaryTileID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE _SecondaryTileID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM SecondaryTileView WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Sequence WHERE _SequenceID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM Sequence WHERE Id=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND "Index"=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TargetDeviceFamily WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE _TileViewID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE _TileViewID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND TileId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Application=? AND TileId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE TileUniqueId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE TileUniqueId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Application=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Application=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND ApplicationUserModelId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND ApplicationUserModelId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM TileView WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE _UserID=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE UserSid=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND _WorkId=?2) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=?5) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=?5))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND "Index"=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType=?3 AND _WowDependencyGraphID=?4 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE _XboxPackageID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ContentId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ContentId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE DeviceId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE DeviceId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EditionId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EditionId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE EscrowedKeyBlobId IS ? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ProductId=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE ProductId=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE TitleId IS ? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM XboxPackage WHERE TitleId IS ? AND _WorkId=0 LIMIT 1);
SELECT Extension, FileType, ProgID FROM CacheFileTypeAssociation WHERE _CacheFileTypeAssociationID=?;
SELECT Extension, Name, ProgID FROM CacheProtocol WHERE _CacheProtocolID=?;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.ContentType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE fta.FileType=?2 AND u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (fta._WorkId=0 OR fta._WorkId=?2) AND (ae._WorkId=0 OR ae._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2) ;
SELECT fta._FileTypeAssociationID, fta._Revision, fta._WorkId, fta.FileType, fta.ContentType, fta.Extension, fta."Index", fta.ProgID, fta._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageUser AS pu ON pu.Package=a.Package INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 ;
SELECT HostName, Extension, ProgID, AppUriHandlerGroup FROM CacheAppUriHandler WHERE _CacheAppUriHandlerID=?;
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=4 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND (_WorkId=0 OR _WorkId=?4)) AND (hr._WorkId=0 OR hr._WorkId=?4) AND (pe._WorkId=0 OR pe._WorkId=?4) AND (dg._WorkId=0 OR dg._WorkId=?4);
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=4 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND _WorkId=0) AND hr._WorkId=0 AND pe._WorkId=0 AND dg._WorkId=0;
SELECT Id, LastValue FROM Sequence WHERE _SequenceID=?;
SELECT LastValue FROM Sequence WHERE Id=?;
SELECT MAX((SELECT IFNULL(MAX(MAX(_Created, _Modified)), 0) FROM TileView WHERE User=?1 AND _WorkId=0),(SELECT IFNULL(MAX(MAX(_Created, _Deleted)), 0) FROM PrimaryTileUserChangelog WHERE User=?1 AND _WorkId=0),(SELECT IFNULL(MAX(MAX(_Created, _Deleted)), 0) FROM SecondaryTileUserChangelog WHERE User=?1 AND _WorkId=0));
SELECT name FROM SQLITE_MASTER WHERE type='table' AND name NOT LIKE 'sqlite_%';
SELECT Name, Extension FROM CacheAppUriHandlerGroup WHERE _CacheAppUriHandlerGroupID=?;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & 0x21 != 0 AND p.PackageFamily NOT IN ( SELECT p.PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND(p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?7)  AND (pu._WorkId=0 OR pu._WorkId=?7);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND p.ResourceId=?4 AND p.Architecture=?5 AND p.Version=?6 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3)  AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND (p._WorkId=0 OR p._WorkId=?6);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND pf.PublisherId=?2 AND p.ResourceId=?3 AND p.Architecture=?4 AND p.Version=?5 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p.PackageType & 8 != 0 OR (p.PackageType & 0x21 != 0 AND p.SourceBundle=0)) AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3)) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY p.PackageType;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p.PackageType & 8 != 0 OR (p.PackageType & 0x21 != 0 AND p.SourceBundle=0)) AND p._PackageID NOT IN( SELECT p._PackageID from Package as p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?2 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0 ORDER BY p.PackageType;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND p._WorkId=0 AND pu._WorkId=0) AND p._WorkId=0 AND pu._WorkId=0
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p.PackageType & ?2 != 0 AND p._PackageID NOT IN ( SELECT p._PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?3 AND(p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4)
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p._PackageID=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFamily=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT p._ProtocolID, p._Revision, p._WorkId, p.ProtocolName, p.ReturnResults, p.Extension, p."Index", p.ProgID, p._Dictionary FROM Protocol  AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pkg._WorkId=0 OR pkg._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p._ProtocolID, p._Revision, p._WorkId, p.ProtocolName, p.ReturnResults, p.Extension, p."Index", p.ProgID, p._Dictionary FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=pkg._PackageID WHERE p.ProtocolName=?2 AND pu.User=?1 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 AND pu._WorkId=0;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND (p._WorkId=0 OR p._WorkId=?3)   AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageFamily AS pf ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageType=1 AND pu.User=?1 AND pf.PackageFamilyName=?2 AND p._WorkId=0  AND pu._WorkId=0 ORDER BY p.Version DESC LIMIT 1;
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (tdf._WorkId=0 OR tdf._WorkId=?4);
SELECT p.PackageFullName FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN TargetDeviceFamily AS tdf ON tdf._TargetDeviceFamilyID=p.TargetDeviceFamily WHERE u.UserSid=?1 AND p.PackageType & ?2 !=0 AND tdf.Name=?3 AND pu._WorkId=0 AND p._WorkId=0 AND tdf._WorkId=0;
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT p.SupportedUsers, p.PackageFullName FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND p._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0;
SELECT Package, "Index", Flags, Category, Activation, HostId, Parameters FROM CachePackageExtension WHERE _CachePackageExtensionID=?;
SELECT Package, "Index", Flags, PackageRelativeApplicationId, ApplicationUserModelId, Activation, HostId, Parameters, Executable, Entrypoint, StartPage FROM CacheApplication WHERE _CacheApplicationID=?;
SELECT Package, User FROM CachePackageUser WHERE _CachePackageUserID=?;
SELECT PackageExtension, HostId FROM CacheHostRuntime WHERE _CacheHostRuntimeID=?;
SELECT PackageFamilyName, PackageSID, Publisher FROM CachePackageFamily WHERE _CachePackageFamilyID=?;
SELECT PackageFullName, PackageFamily, PackageType, Flags, Flags2, PackageOrigin, Volume, OSMaxVersionTested, InstalledLocation, MutableLink, MutableLocation, TargetDeviceFamilyName FROM CachePackage WHERE _CachePackageID=?;
SELECT PackageIdentity, PackageFullName, Status FROM CachePackageMachineStatus WHERE _CachePackageMachineStatusID=?;
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT PackageOrigin FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.PackageFullName=?2 AND pu.User=?1 AND p._WorkId=0 AND pu._WorkId=0;
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT PackageOrigin FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=?3 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND (a._WorkId=0 OR a._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=?1 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Application AS a ON a.Package=pel.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pel.User=0 AND pu.User=?1 AND a.ApplicationUserModelId=?2 AND pel._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND a._WorkId=0 AND pu._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND p._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=?3 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe._Dictionary FROM PackageExtension  AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND (pe._WorkId=0 OR pe._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pe._PackageExtensionID, pe._Revision, pe._WorkId, pe.Package, pe."Index", pe.Category, pe.Activation, pe.HostId, pe.Executable, pe.Entrypoint, pe.RuntimeType, pe.StartPage, pe.Flags, pe.Parameters, pe._Dictionary FROM PackageExtension AS pe INNER JOIN Package AS p ON p._PackageID=pe.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pe.Category=?2 AND pu.User=?1 AND pe._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.Name=?2 AND pf.PublisherId=?3 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PublisherId=?2 AND pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND (p._WorkId=0 OR p._WorkId=?2) AND (pu._WorkId=0 OR pu._WorkId=?2);
SELECT pf._PackageFamilyID, pf._Revision, pf.Name, pf.Publisher, pf.PublisherId, pf.PackageFamilyName, pf.PackageSID, pf._Dictionary FROM PackageFamily AS pf INNER JOIN Package AS p ON p.PackageFamily=pf._PackageFamilyID INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1  AND p._WorkId=0 AND pu._WorkId=0;
SELECT pfu._PackageFamilyUserID, pfu._Revision, pfu.PackageFamily, pfu.User, pfu.WhenInstalled, pfu._Dictionary FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pf.PackageFamilyName=?1;
SELECT pfu._PackageFamilyUserID, pfu._Revision, pfu.PackageFamily, pfu.User, pfu.WhenInstalled, pfu._Dictionary FROM PackageFamilyUser AS pfu INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pfu.PackageFamily WHERE pfu.User=?1 AND pf.PackageFamilyName=?2;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND (pl._WorkId=0 OR pl._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) ORDER BY pl._WorkId DESC;
SELECT pl._PackageLocationID, pl._Revision, pl._WorkId, pl.Package, pl.Volume, pl.InstalledLocation, pl.MutableLink, pl.MutableLocation, pl._Dictionary FROM PackageLocation AS pl INNER JOIN Application AS a ON a.Package=pl.Package INNER JOIN PackageUser AS pu ON pu.Package=a.Package WHERE pu.User=?1 AND a.ApplicationUserModelId=?2 AND pl._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0 ORDER BY pl._WorkId DESC;
SELECT pl.InstalledLocation || '\' || a.Executable AS AbsoluteExecutable, a.Entrypoint, a.Flags, a.Subsystem, p.SupportedUsers, p.PackageFullName, p.Flags FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageLocation AS pl ON pl.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pl._WorkId=0 OR pl._WorkId=?3);
SELECT pl.InstalledLocation || '\' || a.Executable AS AbsoluteExecutable, a.Entrypoint, a.Flags, a.Subsystem, p.SupportedUsers, p.PackageFullName, p.Flags FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageLocation AS pl ON pl.Package=a.Package WHERE a.ApplicationUserModelId=?2 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 AND pl._WorkId=0;
SELECT pl.Volume FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?1 AND (pl._WorkId=0 OR pl._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2) ORDER BY pl._WorkId DESC;
SELECT pl.Volume FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?1 AND pl._WorkId=0 AND p._WorkId=0;
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty  AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND (pp._WorkId=0 OR pp._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT pp._PackagePropertyID, pp._Revision, pp._WorkId, pp.Package, pp."Index", pp.Name, pp._Dictionary FROM PackageProperty AS pp INNER JOIN Package AS p ON p._PackageID=pp.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pp.Name=?2 AND pu.User=?1 AND pp._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (pu._WorkId=0 OR pu._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pu.User=?1 AND pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu._WorkId=0 AND p._WorkId=0 ;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0 OR p._WorkId=?2);
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE p.PackageFullName=?1 AND pu._WorkId=0 AND p._WorkId=0;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) ORDER BY pu._WorkId DESC;
SELECT pu._PackageUserID, pu._Revision, pu._WorkId, pu.Package, pu.User, pu.InstallTime, pu.OSVersionWhenInstalled, pu.WhenRestored, pu.IsExplicitlyInstalled, pu.DeploymentState, pu.AppDataVolume, pu._Dictionary FROM PackageUser AS pu INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND p._WorkId=0 AND pu._WorkId=0;
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT tv._TileViewID, tv._Revision, tv._WorkId, tv.Application, tv.Package, tv.Flags, tv.TileType, tv.TileTemplate, tv.TileId, tv.Arguments, tv.EditionId, tv._Dictionary, tv._TileUserID, tv._TileUser_Revision, tv._Created, tv._Modified, tv.User, tv.ApplicationIdentity, tv.State, tv.TileUniqueId, tv.ApplicationUserModelId FROM TileView AS tv WHERE tv.User=? AND (tv._Created>? OR tv._Modified>?)
SELECT User, Package, Path FROM CachePackageExternalLocation WHERE _CachePackageExternalLocationID=?;
SELECT User, PackageFamily, Name FROM CacheDynamicAppUriHandlerGroup WHERE _CacheDynamicAppUriHandlerGroupID=?;
SELECT User, PackageIdentity, PackageFullName, Status FROM CachePackageUserStatus WHERE _CachePackageUserStatusID=?;
SELECT UserSid FROM CacheUser WHERE _CacheUserID=?;
SELECT xp._XboxPackageID, xp._Revision, xp._WorkId, xp.Package, xp.EditionId, xp.BuildId, xp.DeviceId, xp.BuildVersion, xp.ContentId, xp.ProductId, xp.MediaId, xp.PackageSize, xp.TitleId, xp.PrimaryServiceConfigId, xp.EraVersion, xp.EscrowedKeyBlobId, xp._Dictionary FROM XboxPackage AS xp WHERE xp.EditionId LIKE '%#' || ? AND (xp._WorkId=0 OR xp._WorkId=?)
SELECT xp._XboxPackageID, xp._Revision, xp._WorkId, xp.Package, xp.EditionId, xp.BuildId, xp.DeviceId, xp.BuildVersion, xp.ContentId, xp.ProductId, xp.MediaId, xp.PackageSize, xp.TitleId, xp.PrimaryServiceConfigId, xp.EraVersion, xp.EscrowedKeyBlobId, xp._Dictionary FROM XboxPackage AS xp WHERE xp.EditionId LIKE '%#' || ? AND xp._WorkId=0
sequenceId
SequenceStatics::ActivateInstance
SequenceStatics::ctor
SequenceStatics::dtor
SequenceStatics::Exists
SequenceStatics::ExistsById
SequenceStatics::Find
SequenceStatics::Get
SequenceStatics::GetById
SequenceStatics::GetCurrentValue
SequenceStatics::TryGet
SequenceStatics::TryGetById
ServiceDebugOnStartup
ServiceIdleTimeout
ServiceLastKnownStatus
ServiceMain
ServiceWaitHintInterval
SessionId
SetEvent
SetLastError
SetServiceStatus
SetThreadpoolTimer
SetThreadToken
SetUnhandledExceptionFilter
SHA256
SHLoadIndirectString
si6r^lK
SizeInPages
Sleep
SOFTWARE
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository
Software\Microsoft\Windows NT\CurrentVersion\ProfileList
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository\Cache
Software\Microsoft\Windows\CurrentVersion\AppModel\StateRepositoryStatus
Software\Microsoft\Windows\CurrentVersion\Appx
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx
Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
Software\Policies\Microsoft\Windows\Appx
Source
SourceBundle
sp^Z6
SQLite.AutoIndexWarning
sqlite3_bind_blob
sqlite3_bind_int
sqlite3_bind_int64
sqlite3_bind_null
sqlite3_bind_text16
sqlite3_busy_timeout
sqlite3_changes
sqlite3_clear_bindings
sqlite3_close
sqlite3_column_blob
sqlite3_column_bytes
sqlite3_column_int
sqlite3_column_int64
sqlite3_column_text
sqlite3_column_text16
sqlite3_column_type
sqlite3_config
sqlite3_create_function_v2
sqlite3_db_config
sqlite3_db_filename
sqlite3_db_handle
sqlite3_db_status
sqlite3_enable_shared_cache
sqlite3_errcode
sqlite3_errmsg
sqlite3_exec
sqlite3_expanded_sql
sqlite3_extended_errcode
sqlite3_extended_result_codes
sqlite3_file_control
sqlite3_finalize
sqlite3_free
sqlite3_get_autocommit
sqlite3_initialize
sqlite3_last_insert_rowid
sqlite3_log
sqlite3_malloc
sqlite3_next_stmt
sqlite3_open_v2
sqlite3_prepare_v2
sqlite3_profile
sqlite3_reset
sqlite3_result_blob
sqlite3_result_error_code
sqlite3_result_error_nomem
sqlite3_result_error16
sqlite3_result_int
sqlite3_result_int64
sqlite3_result_text16
sqlite3_shutdown
sqlite3_snprintf
sqlite3_sql
sqlite3_status
sqlite3_step
sqlite3_stmt_busy
sqlite3_trace
sqlite3_user_data
sqlite3_value_blob
sqlite3_value_bytes
sqlite3_value_int
sqlite3_value_int64
sqlite3_value_text16
sqlite3_value_type
sqlite3_vfs_find
sqlite3_vfs_register
sqlite3_vfs_unregister
sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_checkpoint_v2(): Mode:%d EffectiveMode:%d Size:%d Pages:%d
SQQPQQPh
SRCache_AllocStringBuffer
SRCache_Free
SRCacheContext_Close
SRCacheContext_Create
SRCacheContext_CreateSubContext
SRCacheContext_Delete
SRCacheContext_DeleteIfEmpty
SRCacheContext_EnumerateData
SRCacheContext_GetField_String
SRCacheContext_GetField_UInt32
SRCacheContext_GetField_UInt64
SRCacheContext_Open
SRCacheContext_OpenSubContext
SRCacheContext_SetField_MultiString
SRCacheContext_SetField_String
SRCacheContext_SetField_UInt32
SRCacheContext_SetField_UInt64
SRCacheManager_Close
SRCacheManager_GetProperty_UInt32
SRCacheManager_Open
SRCacheManager_SetProperty_UInt32
SRCacheManager_SetProperty_UInt64
SRJournal
SRJournalArchive
srjournalId
sroptions
SSSPQ
SSSSRQ
SSWhh
StartPage
StatementCache.Count
StatementCache.Hits
StatementCache.Lifespan
StatementCache.Misses
StatementCount
StatementPtr
StatementUsed
StateRepository
StateRepository.Core.dll
StateRepository.Database.Statistics
StateRepository.DatabaseCache.Statistics
StateRepository.DoMaintenance
StateRepository.FailFastBusySnapshot
StateRepository.FailFastBusySnapshot.BusyCount
StateRepository.FailFastBusySnapshot.DatabasePtr
StateRepository.FailFastBusySnapshot.FirstBusySQL
StateRepository.FailFastBusySnapshot.Statement#%u.ExpandedSQL
StateRepository.FailFastBusySnapshot.Statement#%u.Ptr
StateRepository.FailFastBusySnapshot.Statement#%u.SQL
StateRepository.FailFastBusySnapshot.StatementCount
StateRepository.FailFastBusySnapshot.StatementInProgress
StateRepository.log
StateRepository.ResourcePriority.Inadequate
StateRepository.Task.DataAccessLayer
StateRepository.Task.Migrate
StateRepository.Task.WinRTAPI
StateRepository_DataAccessLayer_DatabaseCache_Add
StateRepository_DataAccessLayer_DatabaseCache_Get
StateRepository_Initialize
STATEREPOSITORY_KEYWORD
StateRepository_Migrate
STATEREPOSITORY_PERF_KEYWORD
StateRepository_Service_UpdateStatus
StateRepository_Shutdown
StateRepositoryStatus
Status
stream end
stream error
StringFileInfo
StringFromGUID2
Subkey
SupplierPackage
SvchostPushServiceGlobals
SVWj@
SVWj4
SVWPh
SVWPhP
SVWPhXD
SVWPQ
SVWQ3
SVWQh
SVWQh@
SVWQh`
SVWQh8
SVWQQj
Symbol
synchronous
t$ Ph
T$ R3
T$ RQ
t$ SW
T$$Pj
T$(RQ
t$(Wj
t$,SV
T$,tw
t$\Qh
T$`RP
t$<hDI
t$<WP
t$<WQ
T$0RP
T$0RQ
t$4WS
T$8RQ
t$8RW
t$HPj
T$P@3
t$PSh
t$pVQ
t$SWQP
t)Qhx
t,Qhx
t.PhHN
t/j^_
t:h@Z
t:hPm
t+?-o39>R
t0SWj
t4RQj
TargetDeviceFamily
TargetDeviceFamilyName
TargetDeviceFamilyStatics::ActivateInstance
TargetDeviceFamilyStatics::ctor
TargetDeviceFamilyStatics::dtor
TargetDeviceFamilyStatics::Exists
TargetDeviceFamilyStatics::ExistsByPackage
TargetDeviceFamilyStatics::ExistsByPackageAndIndex
TargetDeviceFamilyStatics::Find
TargetDeviceFamilyStatics::FindByPackage
TargetDeviceFamilyStatics::Get
TargetDeviceFamilyStatics::GetByPackage
TargetDeviceFamilyStatics::GetByPackageAndIndex
TargetDeviceFamilyStatics::TryGet
TargetDeviceFamilyStatics::TryGetByPackageAndIndex
TargetSize
TASK0
tcmvn
tDhTm
Tea:d
TelemetryAssert
TelemetryAssertDiagTrack
TEMP 
TEMP$
TEMP(
TEMP,
temp_store
TEMP`
TEMP|
TEMP<
TEMP0
TEMP4
TEMP8
TEMPD
TEMPh
TEMPH
TEMPl
TEMPp
TEMPP
TEMPX
TerminateProcess
tg;T$Lwar
Thales TSS ESN:4D2F-E3DD-BEEF1%0#
threadId
ThreadId
threadId
ThreadId
threadId
ThreadId
threadId
ThreadId
threadId
ThreadId
threadId
TileViewStatics::ActivateInstance
TileViewStatics::ctor
TileViewStatics::dtor
TileViewStatics::Exists
TileViewStatics::ExistsByApplication
TileViewStatics::ExistsByApplicationAndTileId
TileViewStatics::ExistsByPackage
TileViewStatics::ExistsByTileUniqueId
TileViewStatics::ExistsByUser
TileViewStatics::ExistsByUserAndApplication
TileViewStatics::ExistsByUserAndApplicationUserModelId
TileViewStatics::ExistsByUserAndPackage
TileViewStatics::Find
TileViewStatics::FindByApplication
TileViewStatics::FindByPackage
TileViewStatics::FindByUser
TileViewStatics::FindByUserAndApplication
TileViewStatics::FindByUserAndApplicationUserModelId
TileViewStatics::FindByUserAndGTChangeIdAndTileViewQueryFilter
TileViewStatics::FindByUserAndPackage
TileViewStatics::Get
TileViewStatics::GetByApplicationAndTileId
TileViewStatics::GetByTileUniqueId
TileViewStatics::GetMaxChangeIdByUser
TileViewStatics::TryGet
TileViewStatics::TryGetByApplicationAndTileId
TileViewStatics::TryGetByTileUniqueId
TimeoutMSec
timestamp
TlP0X
tNh\m
tOkC|
too many length or distance symbols
totalHits
toupper
Trace
TransactionCallerId
TransactionCallerID
Translation
TRUNCATE
tS9>t
TTBLt
tW9w0
tXhdm
u hxL
u$WSQ
u%PPPh
u&QWS
U.N%B
u/SSS
u:9\$@t
u?WQQ
u@9\$0t
u@9\$8t
u=QVQ
u>!|$0
U0S0Q
u29\$(t
u29\$0t
u2QPj
u59\$0t
U9\$0t
U9\$8t
u99\$8t
u99\$Ht
uA9\$`t
uAa=s
uD9\$0t
uD9\$8t
uEQVQ
uEQWQ
uFPPPh
ugPPPhP}E
uIQWQ
UMgrQueryUserToken
uncompress
UnhandledExceptionFilter
Unknown
unknown compression method
Unknown SQLite datatype %d
UnregisterWaitEx
uP9wH
UPDATE %s SET _WorkId=0, _ShadowId=0 WHERE _WorkId%s0 AND _WorkId<>0;
UPDATE AppExecutionAliasUser SET _Revision=?, User=?, ApplicationIdentity=?, Status=?, _Dictionary=? WHERE _AppExecutionAliasUserID=? AND _Revision=?;
UPDATE ConnectedSet SET _Revision=?, Name=?, Flags=?, Status=?, _Dictionary=? WHERE _ConnectedSetID=? AND _Revision=?;
UPDATE ConnectedSetPackageFamily SET _Revision=?, ConnectedSet=?, PackageFamily=?, _Dictionary=? WHERE _ConnectedSetPackageFamilyID=? AND _Revision=?;
UPDATE CustomInstallWork SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, Flags=?, Status=?, File=?, Arguments=?, _Dictionary=? WHERE _CustomInstallWorkID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE CustomInstallWork SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, Flags=?, Status=?, File=?, Arguments=?, _Dictionary=? WHERE _CustomInstallWorkID=? AND _Revision=? AND _WorkId=0;
UPDATE CustomInstallWork SET _WorkId=? WHERE _CustomInstallWorkID=?;
UPDATE CustomInstallWork SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE DynamicAppUriHandler SET _Revision=?, DynamicAppUriHandlerGroup=?, HostName=?, ProgID=?, _Dictionary=? WHERE _DynamicAppUriHandlerID=? AND _Revision=?;
UPDATE DynamicAppUriHandlerGroup SET _Revision=?, User=?, PackageFamily=?, Name=?, _Dictionary=? WHERE _DynamicAppUriHandlerGroupID=? AND _Revision=?;
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=~4096&FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=~8&Flags WHERE PackageFullName=? AND _WorkId=0;
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET FLAGS=4096|FLAGS WHERE _PackageID=? AND _WorkId=0;
UPDATE Package SET Flags=8|Flags WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET Flags=8|Flags WHERE PackageFullName=? AND _WorkId=0;
UPDATE PackageFamilyPolicy SET _Revision=?, _WorkId=?, User=?, PackageFamily=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackageFamilyPolicyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageFamilyPolicy SET _Revision=?, _WorkId=?, User=?, PackageFamily=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackageFamilyPolicyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageFamilyPolicy SET _WorkId=? WHERE _PackageFamilyPolicyID=?;
UPDATE PackageFamilyPolicy SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE PackageFamilyUserResource SET _Revision=?, PackageFamilyUser=?, ResourceId=?, _Dictionary=? WHERE _PackageFamilyUserResourceID=? AND _Revision=?;
UPDATE PackageMachineStatus SET Status=((Status & ~?3) | ?4)INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pms.PackageIdentityWHERE pi.PackageFullName=?2;
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackagePolicy SET _Revision=?, _WorkId=?, User=?, Package=?, Name=?, "Index"=?, ValueString=?, ValueNumber=?, _Dictionary=? WHERE _PackagePolicyID=? AND _Revision=? AND _WorkId=0;
UPDATE PackagePolicy SET _WorkId=? WHERE _PackagePolicyID=?;
UPDATE PackagePolicy SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE PackageUserStatus SET Status=((Status & ~?3) | ?4)INNER JOIN User AS u ON u._UserID=pus.UserINNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentityWHERE u.UserSid=?1 AND pi.PackageFullName=?2;
UPDATE PrimaryTile SET _Revision=?, _WorkId=?, Application=?, Package=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _PrimaryTileID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PrimaryTile SET _Revision=?, _WorkId=?, Application=?, Package=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _PrimaryTileID=? AND _Revision=? AND _WorkId=0;
UPDATE PrimaryTile SET _WorkId=? WHERE _PrimaryTileID=?;
UPDATE PrimaryTile SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PrimaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _PrimaryTileUserID=? AND _Revision=? AND _WorkId=0;
UPDATE PrimaryTileUser SET _WorkId=? WHERE _PrimaryTileUserID=?;
UPDATE PrimaryTileUser SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE SecondaryTile SET _Revision=?, _WorkId=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _SecondaryTileID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE SecondaryTile SET _Revision=?, _WorkId=?, Flags=?, TileTemplate=?, TileId=?, Arguments=?, EditionId=?, _Dictionary=? WHERE _SecondaryTileID=? AND _Revision=? AND _WorkId=0;
UPDATE SecondaryTile SET _WorkId=? WHERE _SecondaryTileID=?;
UPDATE SecondaryTile SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE SecondaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, SecondaryTile=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _SecondaryTileUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE SecondaryTileUser SET _Revision=?, _WorkId=?, _Created=?, _Modified=?, SecondaryTile=?, User=?, ApplicationIdentity=?, State=?, TileUniqueId=?, _Dictionary=? WHERE _SecondaryTileUserID=? AND _Revision=? AND _WorkId=0;
UPDATE SecondaryTileUser SET _WorkId=? WHERE _SecondaryTileUserID=?;
UPDATE SecondaryTileUser SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE Sequence SET Id=?, LastValue=? WHERE _SequenceID=?;
UPDATE Sequence SET LastValue=? WHERE _SequenceID=?;
UPDATE Sequence SET LastValue=? WHERE Id=?;
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE XboxPackage SET _Revision=?, _WorkId=?, Package=?, EditionId=?, BuildId=?, DeviceId=?, BuildVersion=?, ContentId=?, ProductId=?, MediaId=?, PackageSize=?, TitleId=?, PrimaryServiceConfigId=?, EraVersion=?, EscrowedKeyBlobId=?, _Dictionary=? WHERE _XboxPackageID=? AND _Revision=? AND _WorkId=0;
UPDATE XboxPackage SET _WorkId=? WHERE _XboxPackageID=?;
UPDATE XboxPackage SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UpdateStatistics
u-QWS
User\
User\Data
User\Data\
user_version
UserAndActivation
UserAndActivation\
UserAndApplication
UserAndApplication\
UserAndApplicationUserModelId
UserAndApplicationUserModelId\
UserAndPackage
UserAndPackage\
UserAndPackageFamilyAndName
UserAndPackageFamilyAndName\
UserAndPackageFullName
UserAndPackageFullName\
UserAndPackageIdentity
UserAndPackageIdentity\
UserDatabaseStatisticsLastUpdated
UserDomain
UserName
UserSID
UserSid
UserSID
UserSid
UserSID
UserSid\
UserStatics::ActivateInstance
UserStatics::ctor
UserStatics::dtor
UserStatics::Exists
UserStatics::ExistsByUserSecurityIdentifier
UserStatics::ExistsByUserSid
UserStatics::Find
UserStatics::Get
UserStatics::GetByUserSecurityIdentifier
UserStatics::GetByUserSid
UserStatics::GetDefaultAccount
UserStatics::GetEveryone
UserStatics::TryGet
UserStatics::TryGetByUserSecurityIdentifier
UserStatics::TryGetByUserSid
UserStatics::TryGetDefaultAccount
uyL7j
uz=m&{
v~Bpd
v1~P{K
vAios
VarFileInfo
vdpxy
Verbose
Vh0*?
VKf<!"
vLFWoT
Volume
VPh$$
VPh$F
VPh(!
VPh(@
VPh,:
VPh,[
VPh,D
VPh@9
VPh@E
VPh\0
VPh\3
VPh|%
VPh< 
VPh<6
VPh<8
VPh0J
VPh44
VPh4X
VPhD7
VPhdA
VPhDI
VPhh/
VPhH?
VPhH+
VPhHB
VPhHC
VPhL>
VPhT(
VPht.
VPht=
VPht1
VPhx2
VPhXK
VQWRP
VS_VERSION_INFO
VSj0Z
Vu=j@
VWj(Z
VWj~Z
VWjJZ
VWjSZ
VWQh$
VWQh@
VWQh`
VWQh8
VWQhp
vYQfu
w 9O$u
w<P>D
W3/Or
w8;=D
WaitForRequestsInUseTimeout
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
waJ#ON_
Warning
Washington1
wcschr
wcsrchr
WerRegisterCustomMetadata
WEVT_TEMPLATE
wFVWh`
WideCharToMultiByte
wilActivity
WilError_03
wilResult
WilStaging_02
win:Critical
win:Error
win:Informational
win:Verbose
win:Warning
win32-longpath
win32-noimpersonation
Windows StateRepository API Server
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ActivationUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppxExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.BundleResource>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.CustomInstall>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.CustomInstallProcess>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.CustomInstallProcessUserStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Dependency>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.OptionalBundleResource>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryPreviewTileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Resource>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.WowDependencyGraph>
Windows.Foundation.Collections.IIterator`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ActivationUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppxExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.BundleResource>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.CustomInstall>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.CustomInstallProcess>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.CustomInstallProcessUserStatus>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Dependency>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.OptionalBundleResource>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryPreviewTileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Resource>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.WowDependencyGraph>
Windows.Foundation.Collections.IVector`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Activation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ActivationUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExecutionAlias>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExecutionAliasUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppExtensionHost>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppInstaller>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Application>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationBackgroundTask>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationContentUriRule>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationIdentity>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ApplicationProperty>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppService>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandler>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandlerGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppxExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.AppxManifest>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Bundle>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.BundlePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.BundleResource>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ConnectedSet>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ConnectedSetPackageFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ContentGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ContentGroupFile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.CustomInstall>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.CustomInstallProcess>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.CustomInstallProcessUserStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.CustomInstallWork>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DefaultTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Dependency>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DependencyGraph>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DeploymentHistory>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DynamicAppUriHandler>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.DynamicAppUriHandlerGroup>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.EndOfLifePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Enterprise>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.File>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.FileTypeAssociation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.HostRuntime>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MigratorPatch>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtApplication>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtDefaultTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtPackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtSharedPri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.MrtUserPri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.NamedDependency>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.OptionalBundle>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.OptionalBundlePackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.OptionalBundleResource>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageAppInstaller>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageExtension>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageExternalLocation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyPolicy>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageFamilyUserResource>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageIdentity>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageLocation>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageMachineStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackagePolicy>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageProperty>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageSourceUri>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageSuperceded>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PackageUserStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryPreviewTileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUserChangelog>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileUserDataChange>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PrimaryTileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Protocol>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProtocolLauncherInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackage>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackageDeleted>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.ProvisionedPackageExclude>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.PublisherCacheFolder>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Resource>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTile>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUser>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUserChangelog>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileUserDataChange>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.SecondaryTileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.Sequence>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.TargetDeviceFamily>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.TileView>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.User>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.WowDependencyGraph>
Windows.Foundation.Collections.IVectorView`1<Windows.Internal.StateRepository.XboxPackage>
Windows.Foundation.Collections.PropertySet
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Internal.StateRepository.Activation
Windows.Internal.StateRepository.ActivationUser
Windows.Internal.StateRepository.AppExecutionAlias
Windows.Internal.StateRepository.AppExecutionAliasUser
Windows.Internal.StateRepository.AppExtension
Windows.Internal.StateRepository.AppExtensionHost
Windows.Internal.StateRepository.AppInstaller
Windows.Internal.StateRepository.Application
Windows.Internal.StateRepository.ApplicationBackgroundTask
Windows.Internal.StateRepository.ApplicationContentUriRule
Windows.Internal.StateRepository.ApplicationExtension
Windows.Internal.StateRepository.ApplicationIdentity
Windows.Internal.StateRepository.ApplicationProperty
Windows.Internal.StateRepository.AppService
Windows.Internal.StateRepository.AppUriHandler
Windows.Internal.StateRepository.AppUriHandlerGroup
Windows.Internal.StateRepository.AppUriHandlerLauncherInfo
Windows.Internal.StateRepository.AppxExtension
Windows.Internal.StateRepository.AppxManifest
Windows.Internal.StateRepository.Bundle
Windows.Internal.StateRepository.BundlePackage
Windows.Internal.StateRepository.BundleResource
Windows.Internal.StateRepository.ConnectedSet
Windows.Internal.StateRepository.ConnectedSetPackageFamily
Windows.Internal.StateRepository.ContentGroup
Windows.Internal.StateRepository.ContentGroupFile
Windows.Internal.StateRepository.CustomInstall
Windows.Internal.StateRepository.CustomInstallProcess
Windows.Internal.StateRepository.CustomInstallProcessUserStatus
Windows.Internal.StateRepository.CustomInstallWork
Windows.Internal.StateRepository.DefaultTile
Windows.Internal.StateRepository.Dependency
Windows.Internal.StateRepository.DependencyGraph
Windows.Internal.StateRepository.DeploymentHistory
Windows.Internal.StateRepository.DynamicAppUriHandler
Windows.Internal.StateRepository.DynamicAppUriHandlerGroup
Windows.Internal.StateRepository.EndOfLifePackage
Windows.Internal.StateRepository.Enterprise
Windows.Internal.StateRepository.File
Windows.Internal.StateRepository.FileTypeAssociation
Windows.Internal.StateRepository.FileTypeAssociationLauncherInfo
Windows.Internal.StateRepository.HostRuntime
Windows.Internal.StateRepository.Management.RepositoryManager
Windows.Internal.StateRepository.MigratorPatch
Windows.Internal.StateRepository.MrtApplication
Windows.Internal.StateRepository.MrtDefaultTile
Windows.Internal.StateRepository.MrtPackage
Windows.Internal.StateRepository.MrtSharedPri
Windows.Internal.StateRepository.MrtUserPri
Windows.Internal.StateRepository.NamedDependency
Windows.Internal.StateRepository.OptionalBundle
Windows.Internal.StateRepository.OptionalBundlePackage
Windows.Internal.StateRepository.OptionalBundleResource
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageAppInstaller
Windows.Internal.StateRepository.PackageExtension
Windows.Internal.StateRepository.PackageExternalLocation
Windows.Internal.StateRepository.PackageFamily
Windows.Internal.StateRepository.PackageFamilyPolicy
Windows.Internal.StateRepository.PackageFamilyUser
Windows.Internal.StateRepository.PackageFamilyUserResource
Windows.Internal.StateRepository.PackageIdentity
Windows.Internal.StateRepository.PackageLocation
Windows.Internal.StateRepository.PackageMachineStatus
Windows.Internal.StateRepository.PackagePolicy
Windows.Internal.StateRepository.PackageProperty
Windows.Internal.StateRepository.PackageSourceUri
Windows.Internal.StateRepository.PackageSuperceded
Windows.Internal.StateRepository.PackageUser
Windows.Internal.StateRepository.PackageUserStatus
Windows.Internal.StateRepository.PrimaryPreviewTileView
Windows.Internal.StateRepository.PrimaryTile
Windows.Internal.StateRepository.PrimaryTileUser
Windows.Internal.StateRepository.PrimaryTileUserChangelog
Windows.Internal.StateRepository.PrimaryTileUserDataChange
Windows.Internal.StateRepository.PrimaryTileUserNotificationChannel
Windows.Internal.StateRepository.PrimaryTileView
Windows.Internal.StateRepository.Protocol
Windows.Internal.StateRepository.ProtocolLauncherInfo
Windows.Internal.StateRepository.ProvisionedPackage
Windows.Internal.StateRepository.ProvisionedPackageDeleted
Windows.Internal.StateRepository.ProvisionedPackageExclude
Windows.Internal.StateRepository.PublisherCacheFolder
Windows.Internal.StateRepository.Resource
Windows.Internal.StateRepository.SecondaryTile
Windows.Internal.StateRepository.SecondaryTileUser
Windows.Internal.StateRepository.SecondaryTileUserChangelog
Windows.Internal.StateRepository.SecondaryTileUserDataChange
Windows.Internal.StateRepository.SecondaryTileUserNotificationChannel
Windows.Internal.StateRepository.SecondaryTileView
Windows.Internal.StateRepository.Sequence
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.TileView
Windows.Internal.StateRepository.TileViewQueryFilter
Windows.Internal.StateRepository.User
Windows.Internal.StateRepository.WowDependencyGraph
Windows.Internal.StateRepository.XboxPackage
Windows.Internal.Tiles.MigrationHelper
Windows.StateRepository.dll
Windows.StateRepository.pdb
Windows.StateRepositoryUpgrade.dll
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Add
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Delete
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::DeleteByApplicationIdentityAndUser
Windows::Internal::StateRepository::AppExecutionAliasUserFactoryServer::Update
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Add
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Delete
Windows::Internal::StateRepository::ConnectedSetFactoryServer::DeleteByName
Windows::Internal::StateRepository::ConnectedSetFactoryServer::Update
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Add
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Delete
Windows::Internal::StateRepository::ConnectedSetPackageFamilyFactoryServer::Update
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Add
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Delete
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByUserAndPackageAndIndex
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByUserAndPackageAndName
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::Update
Windows::Internal::StateRepository::CustomInstallWorkFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Add
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Delete
Windows::Internal::StateRepository::DynamicAppUriHandlerFactoryServer::Update
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Add
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Delete
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::DeleteByUserAndPackageFamilyAndName
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::ReplaceByUserAndPackageFamilyNameAndName
Windows::Internal::StateRepository::DynamicAppUriHandlerGroupFactoryServer::Update
Windows::Internal::StateRepository::Management::RepositoryManagerServer::CheckIntegrity
Windows::Internal::StateRepository::Management::RepositoryManagerServer::ClearDatabaseCache
Windows::Internal::StateRepository::Management::RepositoryManagerServer::Optimize
Windows::Internal::StateRepository::Management::RepositoryManagerServer::UnblockRequests
Windows::Internal::StateRepository::Management::RepositoryManagerServer::UpdateStatistics
Windows::Internal::StateRepository::Management::RepositoryManagerServer::Upgrade
Windows::Internal::StateRepository::PackageFactoryServer::UpdateIsMachineRegisteredByPackageFullName
Windows::Internal::StateRepository::PackageFactoryServer::UpdateIsSingletonRegistered
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Add
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Delete
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::DeleteByPackageFamilyAndNameAndIndex
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::DeleteByUserAndPackageFamilyAndNameAndIndex
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::Update
Windows::Internal::StateRepository::PackageFamilyPolicyFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Add
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Delete
Windows::Internal::StateRepository::PackageFamilyUserResourceFactoryServer::Update
Windows::Internal::StateRepository::PackageMachineStatusFactoryServer::DeleteByPackageFullName
Windows::Internal::StateRepository::PackageMachineStatusFactoryServer::UpdateStatusByPackageFullName
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Add
Windows::Internal::StateRepository::PackagePolicyFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Delete
Windows::Internal::StateRepository::PackagePolicyFactoryServer::DeleteByPackageAndNameAndIndex
Windows::Internal::StateRepository::PackagePolicyFactoryServer::DeleteByUserAndPackageAndNameAndIndex
Windows::Internal::StateRepository::PackagePolicyFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Update
Windows::Internal::StateRepository::PackagePolicyFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::PackagePolicyFactoryServer::Upsert
Windows::Internal::StateRepository::PackageUserStatusFactoryServer::DeleteByUserSecurityIdentifierAndPackageFullName
Windows::Internal::StateRepository::PackageUserStatusFactoryServer::UpdateStatusByUserSecurityIdentifierAndPackageFullName
Windows::Internal::StateRepository::PrimaryTileFactoryServer::Add
Windows::Internal::StateRepository::PrimaryTileFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PrimaryTileFactoryServer::Delete
Windows::Internal::StateRepository::PrimaryTileFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PrimaryTileFactoryServer::Update
Windows::Internal::StateRepository::PrimaryTileFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteBy_Created
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteBy_Deleted
Windows::Internal::StateRepository::PrimaryTileUserChangelogFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Add
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Delete
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::DeleteByUserAndApplicationIdentity
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::Update
Windows::Internal::StateRepository::PrimaryTileUserFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::SecondaryTileFactoryServer::Update
Windows::Internal::StateRepository::SecondaryTileFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteBy_Created
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteBy_Deleted
Windows::Internal::StateRepository::SecondaryTileUserChangelogFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::DeleteByUserAndSecondaryTile
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::Update
Windows::Internal::StateRepository::SecondaryTileUserFactoryServer::UpdateWorkId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Add
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Delete
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::DeleteByTileUniqueId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::DeleteByUserAndApplicationAndTileId
Windows::Internal::StateRepository::SecondaryTileViewFactoryServer::Update
Windows::Internal::StateRepository::XboxPackageFactoryServer::Add
Windows::Internal::StateRepository::XboxPackageFactoryServer::ClearWorkByWorkId
Windows::Internal::StateRepository::XboxPackageFactoryServer::Delete
Windows::Internal::StateRepository::XboxPackageFactoryServer::DeleteByEditionId
Windows::Internal::StateRepository::XboxPackageFactoryServer::DeleteByWorkId
Windows::Internal::StateRepository::XboxPackageFactoryServer::Update
Windows::Internal::StateRepository::XboxPackageFactoryServer::UpdateWorkId
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDuplicateString
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsStringHasEmbeddedNull
WITH BundleInfo(_PackageID, PackageType, BundleId, _PackageUserID, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)INSERT OR IGNORE INTO PackageUser  (_Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT 1, 0, p._PackageID, UserId, now(), 0, 1, DeploymentState, 0, NULL  FROM Package AS p INNER JOIN (   SELECT BundleId, UserId, DeploymentState FROM BundleInfo AS t    WHERE BundleId NOT IN (        SELECT b.BundleId FROM BundleInfo AS b         WHERE b.PackageType=8           AND b.UserId=t.UserId       )   ) AS b ON b.BundleId=p.SourceBundle AND p.PackageType=8;
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)DELETE FROM PackageUser WHERE _PackageUserID IN (    SELECT PackageUserId FROM BundleInfo AS t     WHERE t.PackageType=8       AND NOT EXISTS(            SELECT 1 FROM Package AS p             INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID             WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8           ));
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)SELECT * FROM BundleInfo AS t WHERE t.PackageType=8   AND NOT EXISTS(        SELECT 1 FROM Package AS p         INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID         WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8       );
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.ContentType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.FileType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ProgId=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.ContentType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE fta.FileType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ProgId=?2 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User WHERE u.UserSid=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.FileType=?2 AND pf.PackageFamilyName=?3 AND fta._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)) AND (p._WorkID=0 OR p._WorkID=?4) AND (pu._WorkID=0 OR pu._WorkID=?4)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (p._WorkId=0 OR p._WorkId=?4);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND (ae._WorkId=0 OR ae._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.ProgId=?2 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE dauh.ProgId=?2 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND (auh._WorkId=0 OR auh._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND (fta._WorkId=0 OR fta._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.ApplicationUserModelId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND (p._WorkId=0 OR p._WorkId=?5);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProgId=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)) AND (p._WorkID=0 OR p._WorkID=?5) AND (pu._WorkID=0 OR pu._WorkID=?5)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND (p._WorkId=0 OR p._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (pkg._WorkId=0 OR pkg._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (fta._WorkId=0 OR fta._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) AND (pr._WorkId=0 OR pr._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?5) AND (ae._WorkId=0 OR ae._WorkId=?5) AND (a._WorkId=0 OR a._WorkId=?5) AND (p._WorkId=0 OR p._WorkId=?5) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?4) AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (a._WorkId=0 OR a._WorkId=?6)  AND (p._WorkId=0 OR p._WorkId=?6) LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND pf.PackageFamilyName=?3 AND (auh._WorkId=0 OR auh._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND (p._WorkId=0 OR p._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pkg._WorkId=0 OR pkg._WorkId=?6)  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT fta._FileTypeAssociationID, fta.FileType, a._ApplicationID, a.ApplicationUserModelId, fta.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin, ae._Dictionary FROM FileTypeAssociation AS fta INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=fta.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE fta.ContentType=?2 AND pf.PackageFamilyName=?3 AND (fta._WorkId=0 OR fta._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (p._WorkId=0 OR p._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND (p._WorkId=0 OR p._WorkId=?6);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)) AND (p._WorkID=0 OR p._WorkID=?6) AND (pu._WorkID=0 OR pu._WorkID=?6)), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND (p._WorkId=0 OR p._WorkId=?6) AND (ae._WorkId=0 OR ae._WorkId=?6) AND (a._WorkId=0 OR a._WorkId=?6) AND (pkg._WorkId=0 OR pkg._WorkId=?6) ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, auh._Revision, auh._WorkId, auh.HostName, auh.Extension, auh.ProgID, auh.AppUriHandlerGroup, auh._Dictionary FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?3 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?2) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.AppListEntry=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category=?2 AND ae._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.ProgId=?2 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE dauh.ProgId=?2 AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN Application AS a ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND a._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE a.ApplicationUserModelId=?2 AND p._WorkId=0 AND pu._WorkId=0 AND a._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE p.PackageFullName=?2 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProgId=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?4 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?3) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN FileTypeAssociation AS fta ON fta.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.fileTypeAssociation' AND p.PackageFullName=?2 AND fta.FileType=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND fta._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN Protocol AS pr ON pr.Extension=ae._ApplicationExtensionID INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=a.Package WHERE ae.Category='windows.protocol' AND p.PackageFullName=?2 AND pr.ProtocolName=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pr._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (auh.HostName=?2 OR (SUBSTR(auh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(auh.HostName,2)))) AND pf.PackageFamilyName=?3 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT auh._AppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, auh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND pf.PackageFamilyName=?3 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT dauh._DynamicAppUriHandlerID, a._ApplicationID, a.ApplicationUserModelId, dauh.ProgID, pf.PackageFamilyName, p.PackageFullName, p.SupportedUsers, p.PackageOrigin FROM DynamicAppUriHandler AS dauh INNER JOIN DynamicAppUriHandlerGroup AS dauhg ON dauhg._DynamicAppUriHandlerGroupID=dauh.DynamicAppUriHandlerGroup INNER JOIN AppUriHandlerGroup AS auhg ON auhg.Name=dauhg.Name INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auhg.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=dauhg.PackageFamily INNER JOIN User AS u ON u._UserID=dauhg.User INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE (dauh.HostName=?2 OR (SUBSTR(dauh.HostName,1,1)='*' AND ENDSWITH(?2, SUBSTR(dauh.HostName,2)))) AND pf.PackageFamilyName=?3 AND auhg._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 ;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Application AS a INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND a._WorkId=0  AND p._WorkId=0 LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM AppUriHandler AS auh INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=auh.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE auh.HostName=?2 AND pf.PackageFamilyName=?3 AND auh._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT EXISTS(SELECT 1 FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0  LIMIT 1);
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND p._WorkId=0;
WITH PackageIdByUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0), PackageIdByDefaultAccountForPackageFamilyNotUser(_PackageID) AS (SELECT _PackageID FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ?5 AND pu.User IN (SELECT _UserID FROM User AS u WHERE u.UserSid=?4) AND p.PackageFamily NOT IN (SELECT DISTINCT PackageFamily FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pu.User=?1 AND p._WorkID=0 AND pu._WorkID=0)AND p._WorkID=0 AND pu._WorkID=0), PackageIdByAll(_PackageID) AS (SELECT _PackageID FROM PackageIdByUser UNION ALL SELECT _PackageID FROM PackageIdByDefaultAccountForPackageFamilyNotUser)SELECT p._ProtocolID, p.ReturnResults, a._ApplicationID, a.ApplicationUserModelId, p.ProgID, pf.PackageFamilyName, pkg.PackageFullName, pkg.SupportedUsers, pkg.PackageOrigin FROM Protocol AS p INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=p.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS pkg ON pkg._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=pkg.PackageFamily INNER JOIN PackageIdByAll AS cte_p ON cte_p._PackageID=pkg._PackageID WHERE p.ProtocolName=?2 AND pf.PackageFamilyName=?3 AND p._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND pkg._WorkId=0 ;
WorkId
workid
WorkId
WowDependencyGraph
WowDependencyGraphStatics::ActivateInstance
WowDependencyGraphStatics::ctor
WowDependencyGraphStatics::dtor
WowDependencyGraphStatics::Exists
WowDependencyGraphStatics::ExistsBySupplierPackage
WowDependencyGraphStatics::ExistsByUser
WowDependencyGraphStatics::ExistsByUserAndDependentPackage
WowDependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyType
WowDependencyGraphStatics::ExistsByUserAndDependentPackageAndDependencyTypeAnd_WowDependencyGraphID
WowDependencyGraphStatics::ExistsByUserAndDependentPackageAndIndex
WowDependencyGraphStatics::ExistsByUserAndDependentPackageAndSupplierPackage
WowDependencyGraphStatics::ExistsByUserAndSupplierPackage
WowDependencyGraphStatics::Find
WowDependencyGraphStatics::FindBySupplierPackage
WowDependencyGraphStatics::FindByUser
WowDependencyGraphStatics::FindByUserAndDependentPackage
WowDependencyGraphStatics::FindByUserAndDependentPackageAndDependencyType
WowDependencyGraphStatics::FindByUserAndDependentPackageAndDependencyTypeAnd_WowDependencyGraphID
WowDependencyGraphStatics::FindByUserAndDependentPackageAndIndex
WowDependencyGraphStatics::FindByUserAndSupplierPackage
WowDependencyGraphStatics::Get
WowDependencyGraphStatics::GetByUserAndDependentPackageAndSupplierPackage
WowDependencyGraphStatics::TryGet
WowDependencyGraphStatics::TryGetByUserAndDependentPackageAndSupplierPackage
WPhL[
WQPh(
WQPRQ
WQPVW
WriteFile
WSh8Q
WSj(Z
WSj[Z
WSjaZ
WSjlZ
WSjzZ
wSZwE8u
WVj9Z
WVjJZ
WVjQZ
x_+V{'
X0V0T
X1>EH
X9\$8t
XboxPackage
XboxPackageStatics::ActivateInstance
XboxPackageStatics::Add
XboxPackageStatics::ClearWorkByWorkId
XboxPackageStatics::ctor
XboxPackageStatics::Delete
XboxPackageStatics::DeleteByEditionId
XboxPackageStatics::DeleteByWorkId
XboxPackageStatics::dtor
XboxPackageStatics::Exists
XboxPackageStatics::ExistsByContentId
XboxPackageStatics::ExistsByDeviceId
XboxPackageStatics::ExistsByEditionId
XboxPackageStatics::ExistsByEscrowedKeyBlobId
XboxPackageStatics::ExistsByPackage
XboxPackageStatics::ExistsByProductId
XboxPackageStatics::ExistsByTitleId
XboxPackageStatics::Find
XboxPackageStatics::FindByContentId
XboxPackageStatics::FindByDeviceId
XboxPackageStatics::FindByEditionIdPackageFamilyName
XboxPackageStatics::FindByEscrowedKeyBlobId
XboxPackageStatics::FindByPackage
XboxPackageStatics::FindByProductId
XboxPackageStatics::FindByTitleId
XboxPackageStatics::Get
XboxPackageStatics::GetByEditionId
XboxPackageStatics::TryGet
XboxPackageStatics::TryGetByEditionId
XboxPackageStatics::Update
XboxPackageStatics::UpdateWorkId
xfJy;
xn>OV#
XNtQueryWnfStateData
xqG;}
xSu$W
xYc"o_
y"Vh$
y"Vhx
y"WSj4
y#Vh8
y#VhH
y#Vhh
y%Wh0Y
y%Wh8_
y(Amh
y)Vh`
y)Vh8
y)VhH
y)Vhh
y,Vh$
y,Wh@
y,Wh@|
y,Wh@I
y,Wh@Y
y,Wh`^
y,Wh0V
y,Wh0Z
y,Wh8
y,Wh8P
y,Wh8p
y,WhH
y,Whh
y,WhH
y,WhHb
y,WhP
y,WhpT
y,Whx
y,WhX
y.Sh8_
Y?'94jR%
Y__^[
Y{fUUl*
y>)IY
y6PhlK
YBEGIN EXCLUSIVE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
Yce?I
yCWh Q
ygRich
yis^9
yOPhlK
yOWh@v
yOWh0:
yOWhx
ywPhlK
z9i2B
Z9Y,tL
ZE[+n
ZIHXv~0J_
zrUo<
